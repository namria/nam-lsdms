//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LSDMS {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("lsdmsDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class lsdmsDataSet : global::System.Data.DataSet {
        
        private BarangayDataTable tableBarangay;
        
        private CadSurveyDataTable tableCadSurvey;
        
        private CaseDataTable tableCase;
        
        private LotDataTable tableLot;
        
        private LotDataDataTable tableLotData;
        
        private MunicipalityDataTable tableMunicipality;
        
        private ProjectsDataTable tableProjects;
        
        private PsgcDataTable tablePsgc;
        
        private Ref_Type_TableDataTable tableRef_Type_Table;
        
        private SectionDataTable tableSection;
        
        private TechDescDataTable tableTechDesc;
        
        private UsersDataTable tableUsers;
        
        private QuadrangleDataTable tableQuadrangle;
        
        private Ref_Type_Table2DataTable tableRef_Type_Table2;
        
        private global::System.Data.DataRelation relationFK_CadSurveyMunicipality_CadSurvey;
        
        private global::System.Data.DataRelation relationFK_CadSurveyMunicipalityCase_CadSurveyMunicipality;
        
        private global::System.Data.DataRelation relationFK_CadSurveyMunicipalityCaseBarangay_CadSurveyMunicipalityCase;
        
        private global::System.Data.DataRelation relationFK_Section_Quadrangle;
        
        private global::System.Data.DataRelation relationBarangay_Quadrangle;
        
        private global::System.Data.DataRelation relationFK_Lot_Section;
        
        private global::System.Data.DataRelation relationFK_TechDesc_Lot;
        
        private global::System.Data.DataRelation relationFK_LotData_Lot;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public lsdmsDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected lsdmsDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Barangay"] != null)) {
                    base.Tables.Add(new BarangayDataTable(ds.Tables["Barangay"]));
                }
                if ((ds.Tables["CadSurvey"] != null)) {
                    base.Tables.Add(new CadSurveyDataTable(ds.Tables["CadSurvey"]));
                }
                if ((ds.Tables["Case"] != null)) {
                    base.Tables.Add(new CaseDataTable(ds.Tables["Case"]));
                }
                if ((ds.Tables["Lot"] != null)) {
                    base.Tables.Add(new LotDataTable(ds.Tables["Lot"]));
                }
                if ((ds.Tables["LotData"] != null)) {
                    base.Tables.Add(new LotDataDataTable(ds.Tables["LotData"]));
                }
                if ((ds.Tables["Municipality"] != null)) {
                    base.Tables.Add(new MunicipalityDataTable(ds.Tables["Municipality"]));
                }
                if ((ds.Tables["Projects"] != null)) {
                    base.Tables.Add(new ProjectsDataTable(ds.Tables["Projects"]));
                }
                if ((ds.Tables["Psgc"] != null)) {
                    base.Tables.Add(new PsgcDataTable(ds.Tables["Psgc"]));
                }
                if ((ds.Tables["Ref_Type_Table"] != null)) {
                    base.Tables.Add(new Ref_Type_TableDataTable(ds.Tables["Ref_Type_Table"]));
                }
                if ((ds.Tables["Section"] != null)) {
                    base.Tables.Add(new SectionDataTable(ds.Tables["Section"]));
                }
                if ((ds.Tables["TechDesc"] != null)) {
                    base.Tables.Add(new TechDescDataTable(ds.Tables["TechDesc"]));
                }
                if ((ds.Tables["Users"] != null)) {
                    base.Tables.Add(new UsersDataTable(ds.Tables["Users"]));
                }
                if ((ds.Tables["Quadrangle"] != null)) {
                    base.Tables.Add(new QuadrangleDataTable(ds.Tables["Quadrangle"]));
                }
                if ((ds.Tables["Ref_Type_Table2"] != null)) {
                    base.Tables.Add(new Ref_Type_Table2DataTable(ds.Tables["Ref_Type_Table2"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BarangayDataTable Barangay {
            get {
                return this.tableBarangay;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CadSurveyDataTable CadSurvey {
            get {
                return this.tableCadSurvey;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CaseDataTable Case {
            get {
                return this.tableCase;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LotDataTable Lot {
            get {
                return this.tableLot;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LotDataDataTable LotData {
            get {
                return this.tableLotData;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MunicipalityDataTable Municipality {
            get {
                return this.tableMunicipality;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProjectsDataTable Projects {
            get {
                return this.tableProjects;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PsgcDataTable Psgc {
            get {
                return this.tablePsgc;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Ref_Type_TableDataTable Ref_Type_Table {
            get {
                return this.tableRef_Type_Table;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SectionDataTable Section {
            get {
                return this.tableSection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TechDescDataTable TechDesc {
            get {
                return this.tableTechDesc;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UsersDataTable Users {
            get {
                return this.tableUsers;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public QuadrangleDataTable Quadrangle {
            get {
                return this.tableQuadrangle;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Ref_Type_Table2DataTable Ref_Type_Table2 {
            get {
                return this.tableRef_Type_Table2;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            lsdmsDataSet cln = ((lsdmsDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Barangay"] != null)) {
                    base.Tables.Add(new BarangayDataTable(ds.Tables["Barangay"]));
                }
                if ((ds.Tables["CadSurvey"] != null)) {
                    base.Tables.Add(new CadSurveyDataTable(ds.Tables["CadSurvey"]));
                }
                if ((ds.Tables["Case"] != null)) {
                    base.Tables.Add(new CaseDataTable(ds.Tables["Case"]));
                }
                if ((ds.Tables["Lot"] != null)) {
                    base.Tables.Add(new LotDataTable(ds.Tables["Lot"]));
                }
                if ((ds.Tables["LotData"] != null)) {
                    base.Tables.Add(new LotDataDataTable(ds.Tables["LotData"]));
                }
                if ((ds.Tables["Municipality"] != null)) {
                    base.Tables.Add(new MunicipalityDataTable(ds.Tables["Municipality"]));
                }
                if ((ds.Tables["Projects"] != null)) {
                    base.Tables.Add(new ProjectsDataTable(ds.Tables["Projects"]));
                }
                if ((ds.Tables["Psgc"] != null)) {
                    base.Tables.Add(new PsgcDataTable(ds.Tables["Psgc"]));
                }
                if ((ds.Tables["Ref_Type_Table"] != null)) {
                    base.Tables.Add(new Ref_Type_TableDataTable(ds.Tables["Ref_Type_Table"]));
                }
                if ((ds.Tables["Section"] != null)) {
                    base.Tables.Add(new SectionDataTable(ds.Tables["Section"]));
                }
                if ((ds.Tables["TechDesc"] != null)) {
                    base.Tables.Add(new TechDescDataTable(ds.Tables["TechDesc"]));
                }
                if ((ds.Tables["Users"] != null)) {
                    base.Tables.Add(new UsersDataTable(ds.Tables["Users"]));
                }
                if ((ds.Tables["Quadrangle"] != null)) {
                    base.Tables.Add(new QuadrangleDataTable(ds.Tables["Quadrangle"]));
                }
                if ((ds.Tables["Ref_Type_Table2"] != null)) {
                    base.Tables.Add(new Ref_Type_Table2DataTable(ds.Tables["Ref_Type_Table2"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableBarangay = ((BarangayDataTable)(base.Tables["Barangay"]));
            if ((initTable == true)) {
                if ((this.tableBarangay != null)) {
                    this.tableBarangay.InitVars();
                }
            }
            this.tableCadSurvey = ((CadSurveyDataTable)(base.Tables["CadSurvey"]));
            if ((initTable == true)) {
                if ((this.tableCadSurvey != null)) {
                    this.tableCadSurvey.InitVars();
                }
            }
            this.tableCase = ((CaseDataTable)(base.Tables["Case"]));
            if ((initTable == true)) {
                if ((this.tableCase != null)) {
                    this.tableCase.InitVars();
                }
            }
            this.tableLot = ((LotDataTable)(base.Tables["Lot"]));
            if ((initTable == true)) {
                if ((this.tableLot != null)) {
                    this.tableLot.InitVars();
                }
            }
            this.tableLotData = ((LotDataDataTable)(base.Tables["LotData"]));
            if ((initTable == true)) {
                if ((this.tableLotData != null)) {
                    this.tableLotData.InitVars();
                }
            }
            this.tableMunicipality = ((MunicipalityDataTable)(base.Tables["Municipality"]));
            if ((initTable == true)) {
                if ((this.tableMunicipality != null)) {
                    this.tableMunicipality.InitVars();
                }
            }
            this.tableProjects = ((ProjectsDataTable)(base.Tables["Projects"]));
            if ((initTable == true)) {
                if ((this.tableProjects != null)) {
                    this.tableProjects.InitVars();
                }
            }
            this.tablePsgc = ((PsgcDataTable)(base.Tables["Psgc"]));
            if ((initTable == true)) {
                if ((this.tablePsgc != null)) {
                    this.tablePsgc.InitVars();
                }
            }
            this.tableRef_Type_Table = ((Ref_Type_TableDataTable)(base.Tables["Ref_Type_Table"]));
            if ((initTable == true)) {
                if ((this.tableRef_Type_Table != null)) {
                    this.tableRef_Type_Table.InitVars();
                }
            }
            this.tableSection = ((SectionDataTable)(base.Tables["Section"]));
            if ((initTable == true)) {
                if ((this.tableSection != null)) {
                    this.tableSection.InitVars();
                }
            }
            this.tableTechDesc = ((TechDescDataTable)(base.Tables["TechDesc"]));
            if ((initTable == true)) {
                if ((this.tableTechDesc != null)) {
                    this.tableTechDesc.InitVars();
                }
            }
            this.tableUsers = ((UsersDataTable)(base.Tables["Users"]));
            if ((initTable == true)) {
                if ((this.tableUsers != null)) {
                    this.tableUsers.InitVars();
                }
            }
            this.tableQuadrangle = ((QuadrangleDataTable)(base.Tables["Quadrangle"]));
            if ((initTable == true)) {
                if ((this.tableQuadrangle != null)) {
                    this.tableQuadrangle.InitVars();
                }
            }
            this.tableRef_Type_Table2 = ((Ref_Type_Table2DataTable)(base.Tables["Ref_Type_Table2"]));
            if ((initTable == true)) {
                if ((this.tableRef_Type_Table2 != null)) {
                    this.tableRef_Type_Table2.InitVars();
                }
            }
            this.relationFK_CadSurveyMunicipality_CadSurvey = this.Relations["FK_CadSurveyMunicipality_CadSurvey"];
            this.relationFK_CadSurveyMunicipalityCase_CadSurveyMunicipality = this.Relations["FK_CadSurveyMunicipalityCase_CadSurveyMunicipality"];
            this.relationFK_CadSurveyMunicipalityCaseBarangay_CadSurveyMunicipalityCase = this.Relations["FK_CadSurveyMunicipalityCaseBarangay_CadSurveyMunicipalityCase"];
            this.relationFK_Section_Quadrangle = this.Relations["FK_Section_Quadrangle"];
            this.relationBarangay_Quadrangle = this.Relations["Barangay_Quadrangle"];
            this.relationFK_Lot_Section = this.Relations["FK_Lot_Section"];
            this.relationFK_TechDesc_Lot = this.Relations["FK_TechDesc_Lot"];
            this.relationFK_LotData_Lot = this.Relations["FK_LotData_Lot"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "lsdmsDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/lsdmsDataSet.xsd";
            this.EnforceConstraints = false;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableBarangay = new BarangayDataTable();
            base.Tables.Add(this.tableBarangay);
            this.tableCadSurvey = new CadSurveyDataTable();
            base.Tables.Add(this.tableCadSurvey);
            this.tableCase = new CaseDataTable();
            base.Tables.Add(this.tableCase);
            this.tableLot = new LotDataTable();
            base.Tables.Add(this.tableLot);
            this.tableLotData = new LotDataDataTable();
            base.Tables.Add(this.tableLotData);
            this.tableMunicipality = new MunicipalityDataTable();
            base.Tables.Add(this.tableMunicipality);
            this.tableProjects = new ProjectsDataTable();
            base.Tables.Add(this.tableProjects);
            this.tablePsgc = new PsgcDataTable();
            base.Tables.Add(this.tablePsgc);
            this.tableRef_Type_Table = new Ref_Type_TableDataTable();
            base.Tables.Add(this.tableRef_Type_Table);
            this.tableSection = new SectionDataTable();
            base.Tables.Add(this.tableSection);
            this.tableTechDesc = new TechDescDataTable();
            base.Tables.Add(this.tableTechDesc);
            this.tableUsers = new UsersDataTable();
            base.Tables.Add(this.tableUsers);
            this.tableQuadrangle = new QuadrangleDataTable();
            base.Tables.Add(this.tableQuadrangle);
            this.tableRef_Type_Table2 = new Ref_Type_Table2DataTable();
            base.Tables.Add(this.tableRef_Type_Table2);
            this.relationFK_CadSurveyMunicipality_CadSurvey = new global::System.Data.DataRelation("FK_CadSurveyMunicipality_CadSurvey", new global::System.Data.DataColumn[] {
                        this.tableCadSurvey.CadSurveyNoColumn}, new global::System.Data.DataColumn[] {
                        this.tableMunicipality.CadSurveyNoColumn}, false);
            this.Relations.Add(this.relationFK_CadSurveyMunicipality_CadSurvey);
            this.relationFK_CadSurveyMunicipalityCase_CadSurveyMunicipality = new global::System.Data.DataRelation("FK_CadSurveyMunicipalityCase_CadSurveyMunicipality", new global::System.Data.DataColumn[] {
                        this.tableMunicipality.CadSurveyNoColumn,
                        this.tableMunicipality.MunicipalityPsgcColumn}, new global::System.Data.DataColumn[] {
                        this.tableCase.CadSurveyNoColumn,
                        this.tableCase.MunicipalityPsgcColumn}, false);
            this.Relations.Add(this.relationFK_CadSurveyMunicipalityCase_CadSurveyMunicipality);
            this.relationFK_CadSurveyMunicipalityCaseBarangay_CadSurveyMunicipalityCase = new global::System.Data.DataRelation("FK_CadSurveyMunicipalityCaseBarangay_CadSurveyMunicipalityCase", new global::System.Data.DataColumn[] {
                        this.tableCase.CadSurveyNoColumn,
                        this.tableCase.MunicipalityPsgcColumn,
                        this.tableCase.CadCaseNoColumn}, new global::System.Data.DataColumn[] {
                        this.tableBarangay.CadSurveyNoColumn,
                        this.tableBarangay.MunicipalityPsgcColumn,
                        this.tableBarangay.CadCaseNoColumn}, false);
            this.Relations.Add(this.relationFK_CadSurveyMunicipalityCaseBarangay_CadSurveyMunicipalityCase);
            this.relationFK_Section_Quadrangle = new global::System.Data.DataRelation("FK_Section_Quadrangle", new global::System.Data.DataColumn[] {
                        this.tableQuadrangle.CadSurveyNoColumn,
                        this.tableQuadrangle.MunicipalityPsgcColumn,
                        this.tableQuadrangle.CadCaseNoColumn,
                        this.tableQuadrangle.BarangayPsgcColumn,
                        this.tableQuadrangle.QuadrangleColumn}, new global::System.Data.DataColumn[] {
                        this.tableSection.CadSurveyNoColumn,
                        this.tableSection.MunicipalityPsgcColumn,
                        this.tableSection.CadCaseNoColumn,
                        this.tableSection.BarangayPsgcColumn,
                        this.tableSection.QuadrangleColumn}, false);
            this.Relations.Add(this.relationFK_Section_Quadrangle);
            this.relationBarangay_Quadrangle = new global::System.Data.DataRelation("Barangay_Quadrangle", new global::System.Data.DataColumn[] {
                        this.tableBarangay.CadSurveyNoColumn,
                        this.tableBarangay.MunicipalityPsgcColumn,
                        this.tableBarangay.BarangayPsgcColumn}, new global::System.Data.DataColumn[] {
                        this.tableQuadrangle.CadSurveyNoColumn,
                        this.tableQuadrangle.MunicipalityPsgcColumn,
                        this.tableQuadrangle.BarangayPsgcColumn}, false);
            this.Relations.Add(this.relationBarangay_Quadrangle);
            this.relationFK_Lot_Section = new global::System.Data.DataRelation("FK_Lot_Section", new global::System.Data.DataColumn[] {
                        this.tableSection.CadSurveyNoColumn,
                        this.tableSection.MunicipalityPsgcColumn,
                        this.tableSection.CadCaseNoColumn,
                        this.tableSection.BarangayPsgcColumn,
                        this.tableSection.QuadrangleColumn,
                        this.tableSection.SectionIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableLot.CadSurveyNoColumn,
                        this.tableLot.MunicipalityPsgcColumn,
                        this.tableLot.CadCaseNoColumn,
                        this.tableLot.BarangayPsgcColumn,
                        this.tableLot.QuadrangleColumn,
                        this.tableLot.SectionIdColumn}, false);
            this.Relations.Add(this.relationFK_Lot_Section);
            this.relationFK_TechDesc_Lot = new global::System.Data.DataRelation("FK_TechDesc_Lot", new global::System.Data.DataColumn[] {
                        this.tableLot.CadSurveyNoColumn,
                        this.tableLot.MunicipalityPsgcColumn,
                        this.tableLot.CadCaseNoColumn,
                        this.tableLot.BarangayPsgcColumn,
                        this.tableLot.QuadrangleColumn,
                        this.tableLot.SectionIdColumn,
                        this.tableLot.LotNoColumn}, new global::System.Data.DataColumn[] {
                        this.tableTechDesc.CadSurveyNoColumn,
                        this.tableTechDesc.MunicipalityPsgcColumn,
                        this.tableTechDesc.CadCaseNoColumn,
                        this.tableTechDesc.BarangayPsgcColumn,
                        this.tableTechDesc.QuadrangleColumn,
                        this.tableTechDesc.SectionIdColumn,
                        this.tableTechDesc.LotNoColumn}, false);
            this.Relations.Add(this.relationFK_TechDesc_Lot);
            this.relationFK_LotData_Lot = new global::System.Data.DataRelation("FK_LotData_Lot", new global::System.Data.DataColumn[] {
                        this.tableLot.CadSurveyNoColumn,
                        this.tableLot.MunicipalityPsgcColumn,
                        this.tableLot.CadCaseNoColumn,
                        this.tableLot.BarangayPsgcColumn,
                        this.tableLot.QuadrangleColumn,
                        this.tableLot.SectionIdColumn,
                        this.tableLot.LotNoColumn}, new global::System.Data.DataColumn[] {
                        this.tableLotData.CadSurveyNoColumn,
                        this.tableLotData.MunicipalityPsgcColumn,
                        this.tableLotData.CadCaseNoColumn,
                        this.tableLotData.BarangayPsgcColumn,
                        this.tableLotData.QuadrangleColumn,
                        this.tableLotData.SectionIdColumn,
                        this.tableLotData.LotNoColumn}, false);
            this.Relations.Add(this.relationFK_LotData_Lot);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBarangay() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCadSurvey() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCase() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLot() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLotData() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMunicipality() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProjects() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePsgc() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRef_Type_Table() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSection() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTechDesc() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUsers() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeQuadrangle() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRef_Type_Table2() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            lsdmsDataSet ds = new lsdmsDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void BarangayRowChangeEventHandler(object sender, BarangayRowChangeEvent e);
        
        public delegate void CadSurveyRowChangeEventHandler(object sender, CadSurveyRowChangeEvent e);
        
        public delegate void CaseRowChangeEventHandler(object sender, CaseRowChangeEvent e);
        
        public delegate void LotRowChangeEventHandler(object sender, LotRowChangeEvent e);
        
        public delegate void LotDataRowChangeEventHandler(object sender, LotDataRowChangeEvent e);
        
        public delegate void MunicipalityRowChangeEventHandler(object sender, MunicipalityRowChangeEvent e);
        
        public delegate void ProjectsRowChangeEventHandler(object sender, ProjectsRowChangeEvent e);
        
        public delegate void PsgcRowChangeEventHandler(object sender, PsgcRowChangeEvent e);
        
        public delegate void Ref_Type_TableRowChangeEventHandler(object sender, Ref_Type_TableRowChangeEvent e);
        
        public delegate void SectionRowChangeEventHandler(object sender, SectionRowChangeEvent e);
        
        public delegate void TechDescRowChangeEventHandler(object sender, TechDescRowChangeEvent e);
        
        public delegate void UsersRowChangeEventHandler(object sender, UsersRowChangeEvent e);
        
        public delegate void QuadrangleRowChangeEventHandler(object sender, QuadrangleRowChangeEvent e);
        
        public delegate void Ref_Type_Table2RowChangeEventHandler(object sender, Ref_Type_Table2RowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BarangayDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCadSurveyNo;
            
            private global::System.Data.DataColumn columnMunicipalityPsgc;
            
            private global::System.Data.DataColumn columnCadCaseNo;
            
            private global::System.Data.DataColumn columnBarangayPsgc;
            
            private global::System.Data.DataColumn columnGEOG_NM;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BarangayDataTable() {
                this.TableName = "Barangay";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BarangayDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BarangayDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CadSurveyNoColumn {
                get {
                    return this.columnCadSurveyNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MunicipalityPsgcColumn {
                get {
                    return this.columnMunicipalityPsgc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CadCaseNoColumn {
                get {
                    return this.columnCadCaseNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BarangayPsgcColumn {
                get {
                    return this.columnBarangayPsgc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GEOG_NMColumn {
                get {
                    return this.columnGEOG_NM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BarangayRow this[int index] {
                get {
                    return ((BarangayRow)(this.Rows[index]));
                }
            }
            
            public event BarangayRowChangeEventHandler BarangayRowChanging;
            
            public event BarangayRowChangeEventHandler BarangayRowChanged;
            
            public event BarangayRowChangeEventHandler BarangayRowDeleting;
            
            public event BarangayRowChangeEventHandler BarangayRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBarangayRow(BarangayRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BarangayRow AddBarangayRow(string CadSurveyNo, string MunicipalityPsgc, string CadCaseNo, string BarangayPsgc, string GEOG_NM) {
                BarangayRow rowBarangayRow = ((BarangayRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CadSurveyNo,
                        MunicipalityPsgc,
                        CadCaseNo,
                        BarangayPsgc,
                        GEOG_NM};
                rowBarangayRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBarangayRow);
                return rowBarangayRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BarangayRow FindByCadSurveyNoMunicipalityPsgcCadCaseNoBarangayPsgc(string CadSurveyNo, string MunicipalityPsgc, string CadCaseNo, string BarangayPsgc) {
                return ((BarangayRow)(this.Rows.Find(new object[] {
                            CadSurveyNo,
                            MunicipalityPsgc,
                            CadCaseNo,
                            BarangayPsgc})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BarangayDataTable cln = ((BarangayDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BarangayDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCadSurveyNo = base.Columns["CadSurveyNo"];
                this.columnMunicipalityPsgc = base.Columns["MunicipalityPsgc"];
                this.columnCadCaseNo = base.Columns["CadCaseNo"];
                this.columnBarangayPsgc = base.Columns["BarangayPsgc"];
                this.columnGEOG_NM = base.Columns["GEOG_NM"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCadSurveyNo = new global::System.Data.DataColumn("CadSurveyNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCadSurveyNo);
                this.columnMunicipalityPsgc = new global::System.Data.DataColumn("MunicipalityPsgc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMunicipalityPsgc);
                this.columnCadCaseNo = new global::System.Data.DataColumn("CadCaseNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCadCaseNo);
                this.columnBarangayPsgc = new global::System.Data.DataColumn("BarangayPsgc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBarangayPsgc);
                this.columnGEOG_NM = new global::System.Data.DataColumn("GEOG_NM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGEOG_NM);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCadSurveyNo,
                                this.columnMunicipalityPsgc,
                                this.columnCadCaseNo,
                                this.columnBarangayPsgc}, true));
                this.columnCadSurveyNo.AllowDBNull = false;
                this.columnCadSurveyNo.MaxLength = 20;
                this.columnMunicipalityPsgc.AllowDBNull = false;
                this.columnMunicipalityPsgc.MaxLength = 9;
                this.columnCadCaseNo.AllowDBNull = false;
                this.columnCadCaseNo.MaxLength = 20;
                this.columnBarangayPsgc.AllowDBNull = false;
                this.columnBarangayPsgc.MaxLength = 9;
                this.columnGEOG_NM.MaxLength = 60;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BarangayRow NewBarangayRow() {
                return ((BarangayRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BarangayRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BarangayRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BarangayRowChanged != null)) {
                    this.BarangayRowChanged(this, new BarangayRowChangeEvent(((BarangayRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BarangayRowChanging != null)) {
                    this.BarangayRowChanging(this, new BarangayRowChangeEvent(((BarangayRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BarangayRowDeleted != null)) {
                    this.BarangayRowDeleted(this, new BarangayRowChangeEvent(((BarangayRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BarangayRowDeleting != null)) {
                    this.BarangayRowDeleting(this, new BarangayRowChangeEvent(((BarangayRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBarangayRow(BarangayRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                lsdmsDataSet ds = new lsdmsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BarangayDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CadSurveyDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCadSurveyNo;
            
            private global::System.Data.DataColumn columnIsland;
            
            private global::System.Data.DataColumn columnRegionPsgc;
            
            private global::System.Data.DataColumn columnProvincePsgc;
            
            private global::System.Data.DataColumn columnCoordinateSystem;
            
            private global::System.Data.DataColumn columnSurveySymbolNo;
            
            private global::System.Data.DataColumn columnPreviousSurveyNo;
            
            private global::System.Data.DataColumn columnApprovedTotalMunicipality;
            
            private global::System.Data.DataColumn columnApprovedTotalCity;
            
            private global::System.Data.DataColumn columnApprovedTotalBarangay;
            
            private global::System.Data.DataColumn columnApprovedTotalLot;
            
            private global::System.Data.DataColumn columnApprovedTotalAreaHectares;
            
            private global::System.Data.DataColumn columnApprovalRemarks;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CadSurveyDataTable() {
                this.TableName = "CadSurvey";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CadSurveyDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CadSurveyDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CadSurveyNoColumn {
                get {
                    return this.columnCadSurveyNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IslandColumn {
                get {
                    return this.columnIsland;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegionPsgcColumn {
                get {
                    return this.columnRegionPsgc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProvincePsgcColumn {
                get {
                    return this.columnProvincePsgc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CoordinateSystemColumn {
                get {
                    return this.columnCoordinateSystem;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SurveySymbolNoColumn {
                get {
                    return this.columnSurveySymbolNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PreviousSurveyNoColumn {
                get {
                    return this.columnPreviousSurveyNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApprovedTotalMunicipalityColumn {
                get {
                    return this.columnApprovedTotalMunicipality;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApprovedTotalCityColumn {
                get {
                    return this.columnApprovedTotalCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApprovedTotalBarangayColumn {
                get {
                    return this.columnApprovedTotalBarangay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApprovedTotalLotColumn {
                get {
                    return this.columnApprovedTotalLot;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApprovedTotalAreaHectaresColumn {
                get {
                    return this.columnApprovedTotalAreaHectares;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApprovalRemarksColumn {
                get {
                    return this.columnApprovalRemarks;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CadSurveyRow this[int index] {
                get {
                    return ((CadSurveyRow)(this.Rows[index]));
                }
            }
            
            public event CadSurveyRowChangeEventHandler CadSurveyRowChanging;
            
            public event CadSurveyRowChangeEventHandler CadSurveyRowChanged;
            
            public event CadSurveyRowChangeEventHandler CadSurveyRowDeleting;
            
            public event CadSurveyRowChangeEventHandler CadSurveyRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCadSurveyRow(CadSurveyRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CadSurveyRow AddCadSurveyRow(string CadSurveyNo, string Island, string RegionPsgc, string ProvincePsgc, string CoordinateSystem, int SurveySymbolNo, string PreviousSurveyNo, int ApprovedTotalMunicipality, int ApprovedTotalCity, int ApprovedTotalBarangay, int ApprovedTotalLot, decimal ApprovedTotalAreaHectares, string ApprovalRemarks) {
                CadSurveyRow rowCadSurveyRow = ((CadSurveyRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CadSurveyNo,
                        Island,
                        RegionPsgc,
                        ProvincePsgc,
                        CoordinateSystem,
                        SurveySymbolNo,
                        PreviousSurveyNo,
                        ApprovedTotalMunicipality,
                        ApprovedTotalCity,
                        ApprovedTotalBarangay,
                        ApprovedTotalLot,
                        ApprovedTotalAreaHectares,
                        ApprovalRemarks};
                rowCadSurveyRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCadSurveyRow);
                return rowCadSurveyRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CadSurveyRow FindByCadSurveyNo(string CadSurveyNo) {
                return ((CadSurveyRow)(this.Rows.Find(new object[] {
                            CadSurveyNo})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CadSurveyDataTable cln = ((CadSurveyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CadSurveyDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCadSurveyNo = base.Columns["CadSurveyNo"];
                this.columnIsland = base.Columns["Island"];
                this.columnRegionPsgc = base.Columns["RegionPsgc"];
                this.columnProvincePsgc = base.Columns["ProvincePsgc"];
                this.columnCoordinateSystem = base.Columns["CoordinateSystem"];
                this.columnSurveySymbolNo = base.Columns["SurveySymbolNo"];
                this.columnPreviousSurveyNo = base.Columns["PreviousSurveyNo"];
                this.columnApprovedTotalMunicipality = base.Columns["ApprovedTotalMunicipality"];
                this.columnApprovedTotalCity = base.Columns["ApprovedTotalCity"];
                this.columnApprovedTotalBarangay = base.Columns["ApprovedTotalBarangay"];
                this.columnApprovedTotalLot = base.Columns["ApprovedTotalLot"];
                this.columnApprovedTotalAreaHectares = base.Columns["ApprovedTotalAreaHectares"];
                this.columnApprovalRemarks = base.Columns["ApprovalRemarks"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCadSurveyNo = new global::System.Data.DataColumn("CadSurveyNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCadSurveyNo);
                this.columnIsland = new global::System.Data.DataColumn("Island", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsland);
                this.columnRegionPsgc = new global::System.Data.DataColumn("RegionPsgc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegionPsgc);
                this.columnProvincePsgc = new global::System.Data.DataColumn("ProvincePsgc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProvincePsgc);
                this.columnCoordinateSystem = new global::System.Data.DataColumn("CoordinateSystem", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCoordinateSystem);
                this.columnSurveySymbolNo = new global::System.Data.DataColumn("SurveySymbolNo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSurveySymbolNo);
                this.columnPreviousSurveyNo = new global::System.Data.DataColumn("PreviousSurveyNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPreviousSurveyNo);
                this.columnApprovedTotalMunicipality = new global::System.Data.DataColumn("ApprovedTotalMunicipality", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApprovedTotalMunicipality);
                this.columnApprovedTotalCity = new global::System.Data.DataColumn("ApprovedTotalCity", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApprovedTotalCity);
                this.columnApprovedTotalBarangay = new global::System.Data.DataColumn("ApprovedTotalBarangay", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApprovedTotalBarangay);
                this.columnApprovedTotalLot = new global::System.Data.DataColumn("ApprovedTotalLot", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApprovedTotalLot);
                this.columnApprovedTotalAreaHectares = new global::System.Data.DataColumn("ApprovedTotalAreaHectares", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApprovedTotalAreaHectares);
                this.columnApprovalRemarks = new global::System.Data.DataColumn("ApprovalRemarks", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApprovalRemarks);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCadSurveyNo}, true));
                this.columnCadSurveyNo.AllowDBNull = false;
                this.columnCadSurveyNo.Unique = true;
                this.columnCadSurveyNo.MaxLength = 20;
                this.columnIsland.MaxLength = 20;
                this.columnRegionPsgc.MaxLength = 9;
                this.columnProvincePsgc.MaxLength = 9;
                this.columnCoordinateSystem.MaxLength = 10;
                this.columnPreviousSurveyNo.MaxLength = 20;
                this.columnApprovalRemarks.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CadSurveyRow NewCadSurveyRow() {
                return ((CadSurveyRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CadSurveyRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CadSurveyRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CadSurveyRowChanged != null)) {
                    this.CadSurveyRowChanged(this, new CadSurveyRowChangeEvent(((CadSurveyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CadSurveyRowChanging != null)) {
                    this.CadSurveyRowChanging(this, new CadSurveyRowChangeEvent(((CadSurveyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CadSurveyRowDeleted != null)) {
                    this.CadSurveyRowDeleted(this, new CadSurveyRowChangeEvent(((CadSurveyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CadSurveyRowDeleting != null)) {
                    this.CadSurveyRowDeleting(this, new CadSurveyRowChangeEvent(((CadSurveyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCadSurveyRow(CadSurveyRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                lsdmsDataSet ds = new lsdmsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CadSurveyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CaseDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCadSurveyNo;
            
            private global::System.Data.DataColumn columnMunicipalityPsgc;
            
            private global::System.Data.DataColumn columnCadCaseNo;
            
            private global::System.Data.DataColumn columnModuleNo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CaseDataTable() {
                this.TableName = "Case";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CaseDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CaseDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CadSurveyNoColumn {
                get {
                    return this.columnCadSurveyNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MunicipalityPsgcColumn {
                get {
                    return this.columnMunicipalityPsgc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CadCaseNoColumn {
                get {
                    return this.columnCadCaseNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModuleNoColumn {
                get {
                    return this.columnModuleNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CaseRow this[int index] {
                get {
                    return ((CaseRow)(this.Rows[index]));
                }
            }
            
            public event CaseRowChangeEventHandler CaseRowChanging;
            
            public event CaseRowChangeEventHandler CaseRowChanged;
            
            public event CaseRowChangeEventHandler CaseRowDeleting;
            
            public event CaseRowChangeEventHandler CaseRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCaseRow(CaseRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CaseRow AddCaseRow(string CadSurveyNo, string MunicipalityPsgc, string CadCaseNo, string ModuleNo) {
                CaseRow rowCaseRow = ((CaseRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CadSurveyNo,
                        MunicipalityPsgc,
                        CadCaseNo,
                        ModuleNo};
                rowCaseRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCaseRow);
                return rowCaseRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CaseRow FindByCadSurveyNoMunicipalityPsgcCadCaseNo(string CadSurveyNo, string MunicipalityPsgc, string CadCaseNo) {
                return ((CaseRow)(this.Rows.Find(new object[] {
                            CadSurveyNo,
                            MunicipalityPsgc,
                            CadCaseNo})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CaseDataTable cln = ((CaseDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CaseDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCadSurveyNo = base.Columns["CadSurveyNo"];
                this.columnMunicipalityPsgc = base.Columns["MunicipalityPsgc"];
                this.columnCadCaseNo = base.Columns["CadCaseNo"];
                this.columnModuleNo = base.Columns["ModuleNo"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCadSurveyNo = new global::System.Data.DataColumn("CadSurveyNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCadSurveyNo);
                this.columnMunicipalityPsgc = new global::System.Data.DataColumn("MunicipalityPsgc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMunicipalityPsgc);
                this.columnCadCaseNo = new global::System.Data.DataColumn("CadCaseNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCadCaseNo);
                this.columnModuleNo = new global::System.Data.DataColumn("ModuleNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModuleNo);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCadSurveyNo,
                                this.columnMunicipalityPsgc,
                                this.columnCadCaseNo}, true));
                this.columnCadSurveyNo.AllowDBNull = false;
                this.columnCadSurveyNo.MaxLength = 20;
                this.columnMunicipalityPsgc.AllowDBNull = false;
                this.columnMunicipalityPsgc.MaxLength = 9;
                this.columnCadCaseNo.AllowDBNull = false;
                this.columnCadCaseNo.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CaseRow NewCaseRow() {
                return ((CaseRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CaseRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CaseRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CaseRowChanged != null)) {
                    this.CaseRowChanged(this, new CaseRowChangeEvent(((CaseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CaseRowChanging != null)) {
                    this.CaseRowChanging(this, new CaseRowChangeEvent(((CaseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CaseRowDeleted != null)) {
                    this.CaseRowDeleted(this, new CaseRowChangeEvent(((CaseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CaseRowDeleting != null)) {
                    this.CaseRowDeleting(this, new CaseRowChangeEvent(((CaseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCaseRow(CaseRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                lsdmsDataSet ds = new lsdmsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CaseDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LotDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCadSurveyNo;
            
            private global::System.Data.DataColumn columnMunicipalityPsgc;
            
            private global::System.Data.DataColumn columnCadCaseNo;
            
            private global::System.Data.DataColumn columnBarangayPsgc;
            
            private global::System.Data.DataColumn columnQuadrangle;
            
            private global::System.Data.DataColumn columnSectionId;
            
            private global::System.Data.DataColumn columnLotNo;
            
            private global::System.Data.DataColumn columnClaimantName;
            
            private global::System.Data.DataColumn columnClaimantAddress;
            
            private global::System.Data.DataColumn columnDeclaredArea;
            
            private global::System.Data.DataColumn columnComputedArea;
            
            private global::System.Data.DataColumn columnReferencePoint;
            
            private global::System.Data.DataColumn columnTieLineNS;
            
            private global::System.Data.DataColumn columnTieLineEW;
            
            private global::System.Data.DataColumn columnTieLineDegree;
            
            private global::System.Data.DataColumn columnTieLineMinute;
            
            private global::System.Data.DataColumn columnTieLineDistance;
            
            private global::System.Data.DataColumn columnOriginalCheckedBy;
            
            private global::System.Data.DataColumn columnOriginalCheckedDate;
            
            private global::System.Data.DataColumn columnOriginalCompletedBy;
            
            private global::System.Data.DataColumn columnOriginalCompletedDate;
            
            private global::System.Data.DataColumn columnDuplicateCheckedBy;
            
            private global::System.Data.DataColumn columnDuplicateCheckedDate;
            
            private global::System.Data.DataColumn columnFinalVerifiedBy;
            
            private global::System.Data.DataColumn columnFinalCheckedBy1;
            
            private global::System.Data.DataColumn columnFinalCheckedBy2;
            
            private global::System.Data.DataColumn columnRemarks;
            
            private global::System.Data.DataColumn columnLRCNo;
            
            private global::System.Data.DataColumn columnGEName;
            
            private global::System.Data.DataColumn columnSurveyMonthFrom;
            
            private global::System.Data.DataColumn columnSurveyDayFrom;
            
            private global::System.Data.DataColumn columnSurveyYearFrom;
            
            private global::System.Data.DataColumn columnSurveyMonthTo;
            
            private global::System.Data.DataColumn columnSurveyDayTo;
            
            private global::System.Data.DataColumn columnSurveyYearTo;
            
            private global::System.Data.DataColumn columnDuplicateCompletedBy;
            
            private global::System.Data.DataColumn columnDuplicateCompletedDate;
            
            private global::System.Data.DataColumn columnUserName;
            
            private global::System.Data.DataColumn columnDateAdded;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LotDataTable() {
                this.TableName = "Lot";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LotDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LotDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CadSurveyNoColumn {
                get {
                    return this.columnCadSurveyNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MunicipalityPsgcColumn {
                get {
                    return this.columnMunicipalityPsgc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CadCaseNoColumn {
                get {
                    return this.columnCadCaseNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BarangayPsgcColumn {
                get {
                    return this.columnBarangayPsgc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuadrangleColumn {
                get {
                    return this.columnQuadrangle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionIdColumn {
                get {
                    return this.columnSectionId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LotNoColumn {
                get {
                    return this.columnLotNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClaimantNameColumn {
                get {
                    return this.columnClaimantName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClaimantAddressColumn {
                get {
                    return this.columnClaimantAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeclaredAreaColumn {
                get {
                    return this.columnDeclaredArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ComputedAreaColumn {
                get {
                    return this.columnComputedArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReferencePointColumn {
                get {
                    return this.columnReferencePoint;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TieLineNSColumn {
                get {
                    return this.columnTieLineNS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TieLineEWColumn {
                get {
                    return this.columnTieLineEW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TieLineDegreeColumn {
                get {
                    return this.columnTieLineDegree;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TieLineMinuteColumn {
                get {
                    return this.columnTieLineMinute;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TieLineDistanceColumn {
                get {
                    return this.columnTieLineDistance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OriginalCheckedByColumn {
                get {
                    return this.columnOriginalCheckedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OriginalCheckedDateColumn {
                get {
                    return this.columnOriginalCheckedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OriginalCompletedByColumn {
                get {
                    return this.columnOriginalCompletedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OriginalCompletedDateColumn {
                get {
                    return this.columnOriginalCompletedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DuplicateCheckedByColumn {
                get {
                    return this.columnDuplicateCheckedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DuplicateCheckedDateColumn {
                get {
                    return this.columnDuplicateCheckedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FinalVerifiedByColumn {
                get {
                    return this.columnFinalVerifiedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FinalCheckedBy1Column {
                get {
                    return this.columnFinalCheckedBy1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FinalCheckedBy2Column {
                get {
                    return this.columnFinalCheckedBy2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemarksColumn {
                get {
                    return this.columnRemarks;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LRCNoColumn {
                get {
                    return this.columnLRCNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GENameColumn {
                get {
                    return this.columnGEName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SurveyMonthFromColumn {
                get {
                    return this.columnSurveyMonthFrom;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SurveyDayFromColumn {
                get {
                    return this.columnSurveyDayFrom;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SurveyYearFromColumn {
                get {
                    return this.columnSurveyYearFrom;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SurveyMonthToColumn {
                get {
                    return this.columnSurveyMonthTo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SurveyDayToColumn {
                get {
                    return this.columnSurveyDayTo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SurveyYearToColumn {
                get {
                    return this.columnSurveyYearTo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DuplicateCompletedByColumn {
                get {
                    return this.columnDuplicateCompletedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DuplicateCompletedDateColumn {
                get {
                    return this.columnDuplicateCompletedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserNameColumn {
                get {
                    return this.columnUserName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateAddedColumn {
                get {
                    return this.columnDateAdded;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LotRow this[int index] {
                get {
                    return ((LotRow)(this.Rows[index]));
                }
            }
            
            public event LotRowChangeEventHandler LotRowChanging;
            
            public event LotRowChangeEventHandler LotRowChanged;
            
            public event LotRowChangeEventHandler LotRowDeleting;
            
            public event LotRowChangeEventHandler LotRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLotRow(LotRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LotRow AddLotRow(
                        string CadSurveyNo, 
                        string MunicipalityPsgc, 
                        string CadCaseNo, 
                        string BarangayPsgc, 
                        string Quadrangle, 
                        string SectionId, 
                        string LotNo, 
                        string ClaimantName, 
                        string ClaimantAddress, 
                        decimal DeclaredArea, 
                        decimal ComputedArea, 
                        string ReferencePoint, 
                        string TieLineNS, 
                        string TieLineEW, 
                        int TieLineDegree, 
                        int TieLineMinute, 
                        decimal TieLineDistance, 
                        string OriginalCheckedBy, 
                        string OriginalCheckedDate, 
                        string OriginalCompletedBy, 
                        string OriginalCompletedDate, 
                        string DuplicateCheckedBy, 
                        string DuplicateCheckedDate, 
                        string FinalVerifiedBy, 
                        string FinalCheckedBy1, 
                        string FinalCheckedBy2, 
                        string Remarks, 
                        string LRCNo, 
                        string GEName, 
                        string SurveyMonthFrom, 
                        string SurveyDayFrom, 
                        string SurveyYearFrom, 
                        string SurveyMonthTo, 
                        string SurveyDayTo, 
                        string SurveyYearTo, 
                        string DuplicateCompletedBy, 
                        string DuplicateCompletedDate, 
                        string UserName, 
                        System.DateTime DateAdded) {
                LotRow rowLotRow = ((LotRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CadSurveyNo,
                        MunicipalityPsgc,
                        CadCaseNo,
                        BarangayPsgc,
                        Quadrangle,
                        SectionId,
                        LotNo,
                        ClaimantName,
                        ClaimantAddress,
                        DeclaredArea,
                        ComputedArea,
                        ReferencePoint,
                        TieLineNS,
                        TieLineEW,
                        TieLineDegree,
                        TieLineMinute,
                        TieLineDistance,
                        OriginalCheckedBy,
                        OriginalCheckedDate,
                        OriginalCompletedBy,
                        OriginalCompletedDate,
                        DuplicateCheckedBy,
                        DuplicateCheckedDate,
                        FinalVerifiedBy,
                        FinalCheckedBy1,
                        FinalCheckedBy2,
                        Remarks,
                        LRCNo,
                        GEName,
                        SurveyMonthFrom,
                        SurveyDayFrom,
                        SurveyYearFrom,
                        SurveyMonthTo,
                        SurveyDayTo,
                        SurveyYearTo,
                        DuplicateCompletedBy,
                        DuplicateCompletedDate,
                        UserName,
                        DateAdded};
                rowLotRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLotRow);
                return rowLotRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LotRow FindByCadSurveyNoMunicipalityPsgcCadCaseNoBarangayPsgcQuadrangleSectionIdLotNo(string CadSurveyNo, string MunicipalityPsgc, string CadCaseNo, string BarangayPsgc, string Quadrangle, string SectionId, string LotNo) {
                return ((LotRow)(this.Rows.Find(new object[] {
                            CadSurveyNo,
                            MunicipalityPsgc,
                            CadCaseNo,
                            BarangayPsgc,
                            Quadrangle,
                            SectionId,
                            LotNo})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LotDataTable cln = ((LotDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LotDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCadSurveyNo = base.Columns["CadSurveyNo"];
                this.columnMunicipalityPsgc = base.Columns["MunicipalityPsgc"];
                this.columnCadCaseNo = base.Columns["CadCaseNo"];
                this.columnBarangayPsgc = base.Columns["BarangayPsgc"];
                this.columnQuadrangle = base.Columns["Quadrangle"];
                this.columnSectionId = base.Columns["SectionId"];
                this.columnLotNo = base.Columns["LotNo"];
                this.columnClaimantName = base.Columns["ClaimantName"];
                this.columnClaimantAddress = base.Columns["ClaimantAddress"];
                this.columnDeclaredArea = base.Columns["DeclaredArea"];
                this.columnComputedArea = base.Columns["ComputedArea"];
                this.columnReferencePoint = base.Columns["ReferencePoint"];
                this.columnTieLineNS = base.Columns["TieLineNS"];
                this.columnTieLineEW = base.Columns["TieLineEW"];
                this.columnTieLineDegree = base.Columns["TieLineDegree"];
                this.columnTieLineMinute = base.Columns["TieLineMinute"];
                this.columnTieLineDistance = base.Columns["TieLineDistance"];
                this.columnOriginalCheckedBy = base.Columns["OriginalCheckedBy"];
                this.columnOriginalCheckedDate = base.Columns["OriginalCheckedDate"];
                this.columnOriginalCompletedBy = base.Columns["OriginalCompletedBy"];
                this.columnOriginalCompletedDate = base.Columns["OriginalCompletedDate"];
                this.columnDuplicateCheckedBy = base.Columns["DuplicateCheckedBy"];
                this.columnDuplicateCheckedDate = base.Columns["DuplicateCheckedDate"];
                this.columnFinalVerifiedBy = base.Columns["FinalVerifiedBy"];
                this.columnFinalCheckedBy1 = base.Columns["FinalCheckedBy1"];
                this.columnFinalCheckedBy2 = base.Columns["FinalCheckedBy2"];
                this.columnRemarks = base.Columns["Remarks"];
                this.columnLRCNo = base.Columns["LRCNo"];
                this.columnGEName = base.Columns["GEName"];
                this.columnSurveyMonthFrom = base.Columns["SurveyMonthFrom"];
                this.columnSurveyDayFrom = base.Columns["SurveyDayFrom"];
                this.columnSurveyYearFrom = base.Columns["SurveyYearFrom"];
                this.columnSurveyMonthTo = base.Columns["SurveyMonthTo"];
                this.columnSurveyDayTo = base.Columns["SurveyDayTo"];
                this.columnSurveyYearTo = base.Columns["SurveyYearTo"];
                this.columnDuplicateCompletedBy = base.Columns["DuplicateCompletedBy"];
                this.columnDuplicateCompletedDate = base.Columns["DuplicateCompletedDate"];
                this.columnUserName = base.Columns["UserName"];
                this.columnDateAdded = base.Columns["DateAdded"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCadSurveyNo = new global::System.Data.DataColumn("CadSurveyNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCadSurveyNo);
                this.columnMunicipalityPsgc = new global::System.Data.DataColumn("MunicipalityPsgc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMunicipalityPsgc);
                this.columnCadCaseNo = new global::System.Data.DataColumn("CadCaseNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCadCaseNo);
                this.columnBarangayPsgc = new global::System.Data.DataColumn("BarangayPsgc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBarangayPsgc);
                this.columnQuadrangle = new global::System.Data.DataColumn("Quadrangle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuadrangle);
                this.columnSectionId = new global::System.Data.DataColumn("SectionId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionId);
                this.columnLotNo = new global::System.Data.DataColumn("LotNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLotNo);
                this.columnClaimantName = new global::System.Data.DataColumn("ClaimantName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClaimantName);
                this.columnClaimantAddress = new global::System.Data.DataColumn("ClaimantAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClaimantAddress);
                this.columnDeclaredArea = new global::System.Data.DataColumn("DeclaredArea", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeclaredArea);
                this.columnComputedArea = new global::System.Data.DataColumn("ComputedArea", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComputedArea);
                this.columnReferencePoint = new global::System.Data.DataColumn("ReferencePoint", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReferencePoint);
                this.columnTieLineNS = new global::System.Data.DataColumn("TieLineNS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTieLineNS);
                this.columnTieLineEW = new global::System.Data.DataColumn("TieLineEW", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTieLineEW);
                this.columnTieLineDegree = new global::System.Data.DataColumn("TieLineDegree", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTieLineDegree);
                this.columnTieLineMinute = new global::System.Data.DataColumn("TieLineMinute", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTieLineMinute);
                this.columnTieLineDistance = new global::System.Data.DataColumn("TieLineDistance", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTieLineDistance);
                this.columnOriginalCheckedBy = new global::System.Data.DataColumn("OriginalCheckedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOriginalCheckedBy);
                this.columnOriginalCheckedDate = new global::System.Data.DataColumn("OriginalCheckedDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOriginalCheckedDate);
                this.columnOriginalCompletedBy = new global::System.Data.DataColumn("OriginalCompletedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOriginalCompletedBy);
                this.columnOriginalCompletedDate = new global::System.Data.DataColumn("OriginalCompletedDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOriginalCompletedDate);
                this.columnDuplicateCheckedBy = new global::System.Data.DataColumn("DuplicateCheckedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDuplicateCheckedBy);
                this.columnDuplicateCheckedDate = new global::System.Data.DataColumn("DuplicateCheckedDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDuplicateCheckedDate);
                this.columnFinalVerifiedBy = new global::System.Data.DataColumn("FinalVerifiedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFinalVerifiedBy);
                this.columnFinalCheckedBy1 = new global::System.Data.DataColumn("FinalCheckedBy1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFinalCheckedBy1);
                this.columnFinalCheckedBy2 = new global::System.Data.DataColumn("FinalCheckedBy2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFinalCheckedBy2);
                this.columnRemarks = new global::System.Data.DataColumn("Remarks", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemarks);
                this.columnLRCNo = new global::System.Data.DataColumn("LRCNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLRCNo);
                this.columnGEName = new global::System.Data.DataColumn("GEName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGEName);
                this.columnSurveyMonthFrom = new global::System.Data.DataColumn("SurveyMonthFrom", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSurveyMonthFrom);
                this.columnSurveyDayFrom = new global::System.Data.DataColumn("SurveyDayFrom", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSurveyDayFrom);
                this.columnSurveyYearFrom = new global::System.Data.DataColumn("SurveyYearFrom", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSurveyYearFrom);
                this.columnSurveyMonthTo = new global::System.Data.DataColumn("SurveyMonthTo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSurveyMonthTo);
                this.columnSurveyDayTo = new global::System.Data.DataColumn("SurveyDayTo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSurveyDayTo);
                this.columnSurveyYearTo = new global::System.Data.DataColumn("SurveyYearTo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSurveyYearTo);
                this.columnDuplicateCompletedBy = new global::System.Data.DataColumn("DuplicateCompletedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDuplicateCompletedBy);
                this.columnDuplicateCompletedDate = new global::System.Data.DataColumn("DuplicateCompletedDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDuplicateCompletedDate);
                this.columnUserName = new global::System.Data.DataColumn("UserName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserName);
                this.columnDateAdded = new global::System.Data.DataColumn("DateAdded", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateAdded);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCadSurveyNo,
                                this.columnMunicipalityPsgc,
                                this.columnCadCaseNo,
                                this.columnBarangayPsgc,
                                this.columnQuadrangle,
                                this.columnSectionId,
                                this.columnLotNo}, true));
                this.columnCadSurveyNo.AllowDBNull = false;
                this.columnCadSurveyNo.MaxLength = 20;
                this.columnMunicipalityPsgc.AllowDBNull = false;
                this.columnMunicipalityPsgc.MaxLength = 9;
                this.columnCadCaseNo.AllowDBNull = false;
                this.columnCadCaseNo.MaxLength = 20;
                this.columnBarangayPsgc.AllowDBNull = false;
                this.columnBarangayPsgc.MaxLength = 9;
                this.columnQuadrangle.AllowDBNull = false;
                this.columnQuadrangle.MaxLength = 20;
                this.columnSectionId.AllowDBNull = false;
                this.columnSectionId.MaxLength = 50;
                this.columnLotNo.AllowDBNull = false;
                this.columnLotNo.MaxLength = 50;
                this.columnClaimantName.MaxLength = 200;
                this.columnClaimantAddress.MaxLength = 200;
                this.columnReferencePoint.MaxLength = 20;
                this.columnTieLineNS.MaxLength = 1;
                this.columnTieLineEW.MaxLength = 1;
                this.columnOriginalCheckedBy.MaxLength = 50;
                this.columnOriginalCheckedDate.MaxLength = 20;
                this.columnOriginalCompletedBy.MaxLength = 50;
                this.columnOriginalCompletedDate.MaxLength = 20;
                this.columnDuplicateCheckedBy.MaxLength = 50;
                this.columnDuplicateCheckedDate.MaxLength = 20;
                this.columnFinalVerifiedBy.MaxLength = 50;
                this.columnFinalCheckedBy1.MaxLength = 50;
                this.columnFinalCheckedBy2.MaxLength = 50;
                this.columnRemarks.MaxLength = 500;
                this.columnLRCNo.MaxLength = 50;
                this.columnGEName.MaxLength = 200;
                this.columnSurveyMonthFrom.MaxLength = 2;
                this.columnSurveyDayFrom.MaxLength = 2;
                this.columnSurveyYearFrom.MaxLength = 4;
                this.columnSurveyMonthTo.MaxLength = 2;
                this.columnSurveyDayTo.MaxLength = 2;
                this.columnSurveyYearTo.MaxLength = 4;
                this.columnDuplicateCompletedBy.MaxLength = 50;
                this.columnDuplicateCompletedDate.MaxLength = 20;
                this.columnUserName.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LotRow NewLotRow() {
                return ((LotRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LotRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LotRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LotRowChanged != null)) {
                    this.LotRowChanged(this, new LotRowChangeEvent(((LotRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LotRowChanging != null)) {
                    this.LotRowChanging(this, new LotRowChangeEvent(((LotRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LotRowDeleted != null)) {
                    this.LotRowDeleted(this, new LotRowChangeEvent(((LotRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LotRowDeleting != null)) {
                    this.LotRowDeleting(this, new LotRowChangeEvent(((LotRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLotRow(LotRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                lsdmsDataSet ds = new lsdmsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LotDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LotDataDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCadSurveyNo;
            
            private global::System.Data.DataColumn columnMunicipalityPsgc;
            
            private global::System.Data.DataColumn columnCadCaseNo;
            
            private global::System.Data.DataColumn columnBarangayPsgc;
            
            private global::System.Data.DataColumn columnQuadrangle;
            
            private global::System.Data.DataColumn columnSectionId;
            
            private global::System.Data.DataColumn columnLotNo;
            
            private global::System.Data.DataColumn columnSequence;
            
            private global::System.Data.DataColumn columnLocalX;
            
            private global::System.Data.DataColumn columnLocalY;
            
            private global::System.Data.DataColumn columnPtmX;
            
            private global::System.Data.DataColumn columnPtmY;
            
            private global::System.Data.DataColumn columnWgsX;
            
            private global::System.Data.DataColumn columnWgsY;
            
            private global::System.Data.DataColumn columnPrsX;
            
            private global::System.Data.DataColumn columnPrsY;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LotDataDataTable() {
                this.TableName = "LotData";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LotDataDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LotDataDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CadSurveyNoColumn {
                get {
                    return this.columnCadSurveyNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MunicipalityPsgcColumn {
                get {
                    return this.columnMunicipalityPsgc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CadCaseNoColumn {
                get {
                    return this.columnCadCaseNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BarangayPsgcColumn {
                get {
                    return this.columnBarangayPsgc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuadrangleColumn {
                get {
                    return this.columnQuadrangle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionIdColumn {
                get {
                    return this.columnSectionId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LotNoColumn {
                get {
                    return this.columnLotNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SequenceColumn {
                get {
                    return this.columnSequence;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocalXColumn {
                get {
                    return this.columnLocalX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocalYColumn {
                get {
                    return this.columnLocalY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PtmXColumn {
                get {
                    return this.columnPtmX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PtmYColumn {
                get {
                    return this.columnPtmY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WgsXColumn {
                get {
                    return this.columnWgsX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WgsYColumn {
                get {
                    return this.columnWgsY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PrsXColumn {
                get {
                    return this.columnPrsX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PrsYColumn {
                get {
                    return this.columnPrsY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LotDataRow this[int index] {
                get {
                    return ((LotDataRow)(this.Rows[index]));
                }
            }
            
            public event LotDataRowChangeEventHandler LotDataRowChanging;
            
            public event LotDataRowChangeEventHandler LotDataRowChanged;
            
            public event LotDataRowChangeEventHandler LotDataRowDeleting;
            
            public event LotDataRowChangeEventHandler LotDataRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLotDataRow(LotDataRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LotDataRow AddLotDataRow(
                        string CadSurveyNo, 
                        string MunicipalityPsgc, 
                        string CadCaseNo, 
                        string BarangayPsgc, 
                        string Quadrangle, 
                        string SectionId, 
                        string LotNo, 
                        short Sequence, 
                        string LocalX, 
                        string LocalY, 
                        string PtmX, 
                        string PtmY, 
                        string WgsX, 
                        string WgsY, 
                        string PrsX, 
                        string PrsY) {
                LotDataRow rowLotDataRow = ((LotDataRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CadSurveyNo,
                        MunicipalityPsgc,
                        CadCaseNo,
                        BarangayPsgc,
                        Quadrangle,
                        SectionId,
                        LotNo,
                        Sequence,
                        LocalX,
                        LocalY,
                        PtmX,
                        PtmY,
                        WgsX,
                        WgsY,
                        PrsX,
                        PrsY};
                rowLotDataRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLotDataRow);
                return rowLotDataRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LotDataRow FindByCadSurveyNoMunicipalityPsgcCadCaseNoBarangayPsgcQuadrangleSectionIdLotNoSequence(string CadSurveyNo, string MunicipalityPsgc, string CadCaseNo, string BarangayPsgc, string Quadrangle, string SectionId, string LotNo, short Sequence) {
                return ((LotDataRow)(this.Rows.Find(new object[] {
                            CadSurveyNo,
                            MunicipalityPsgc,
                            CadCaseNo,
                            BarangayPsgc,
                            Quadrangle,
                            SectionId,
                            LotNo,
                            Sequence})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LotDataDataTable cln = ((LotDataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LotDataDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCadSurveyNo = base.Columns["CadSurveyNo"];
                this.columnMunicipalityPsgc = base.Columns["MunicipalityPsgc"];
                this.columnCadCaseNo = base.Columns["CadCaseNo"];
                this.columnBarangayPsgc = base.Columns["BarangayPsgc"];
                this.columnQuadrangle = base.Columns["Quadrangle"];
                this.columnSectionId = base.Columns["SectionId"];
                this.columnLotNo = base.Columns["LotNo"];
                this.columnSequence = base.Columns["Sequence"];
                this.columnLocalX = base.Columns["LocalX"];
                this.columnLocalY = base.Columns["LocalY"];
                this.columnPtmX = base.Columns["PtmX"];
                this.columnPtmY = base.Columns["PtmY"];
                this.columnWgsX = base.Columns["WgsX"];
                this.columnWgsY = base.Columns["WgsY"];
                this.columnPrsX = base.Columns["PrsX"];
                this.columnPrsY = base.Columns["PrsY"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCadSurveyNo = new global::System.Data.DataColumn("CadSurveyNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCadSurveyNo);
                this.columnMunicipalityPsgc = new global::System.Data.DataColumn("MunicipalityPsgc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMunicipalityPsgc);
                this.columnCadCaseNo = new global::System.Data.DataColumn("CadCaseNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCadCaseNo);
                this.columnBarangayPsgc = new global::System.Data.DataColumn("BarangayPsgc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBarangayPsgc);
                this.columnQuadrangle = new global::System.Data.DataColumn("Quadrangle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuadrangle);
                this.columnSectionId = new global::System.Data.DataColumn("SectionId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionId);
                this.columnLotNo = new global::System.Data.DataColumn("LotNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLotNo);
                this.columnSequence = new global::System.Data.DataColumn("Sequence", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSequence);
                this.columnLocalX = new global::System.Data.DataColumn("LocalX", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocalX);
                this.columnLocalY = new global::System.Data.DataColumn("LocalY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocalY);
                this.columnPtmX = new global::System.Data.DataColumn("PtmX", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPtmX);
                this.columnPtmY = new global::System.Data.DataColumn("PtmY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPtmY);
                this.columnWgsX = new global::System.Data.DataColumn("WgsX", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWgsX);
                this.columnWgsY = new global::System.Data.DataColumn("WgsY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWgsY);
                this.columnPrsX = new global::System.Data.DataColumn("PrsX", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrsX);
                this.columnPrsY = new global::System.Data.DataColumn("PrsY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrsY);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCadSurveyNo,
                                this.columnMunicipalityPsgc,
                                this.columnCadCaseNo,
                                this.columnBarangayPsgc,
                                this.columnQuadrangle,
                                this.columnSectionId,
                                this.columnLotNo,
                                this.columnSequence}, true));
                this.columnCadSurveyNo.AllowDBNull = false;
                this.columnCadSurveyNo.MaxLength = 20;
                this.columnMunicipalityPsgc.AllowDBNull = false;
                this.columnMunicipalityPsgc.MaxLength = 9;
                this.columnCadCaseNo.AllowDBNull = false;
                this.columnCadCaseNo.MaxLength = 20;
                this.columnBarangayPsgc.AllowDBNull = false;
                this.columnBarangayPsgc.MaxLength = 9;
                this.columnQuadrangle.AllowDBNull = false;
                this.columnQuadrangle.MaxLength = 20;
                this.columnSectionId.AllowDBNull = false;
                this.columnSectionId.MaxLength = 50;
                this.columnLotNo.AllowDBNull = false;
                this.columnLotNo.MaxLength = 50;
                this.columnSequence.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LotDataRow NewLotDataRow() {
                return ((LotDataRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LotDataRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LotDataRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LotDataRowChanged != null)) {
                    this.LotDataRowChanged(this, new LotDataRowChangeEvent(((LotDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LotDataRowChanging != null)) {
                    this.LotDataRowChanging(this, new LotDataRowChangeEvent(((LotDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LotDataRowDeleted != null)) {
                    this.LotDataRowDeleted(this, new LotDataRowChangeEvent(((LotDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LotDataRowDeleting != null)) {
                    this.LotDataRowDeleting(this, new LotDataRowChangeEvent(((LotDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLotDataRow(LotDataRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                lsdmsDataSet ds = new lsdmsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LotDataDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MunicipalityDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCadSurveyNo;
            
            private global::System.Data.DataColumn columnMunicipalityPsgc;
            
            private global::System.Data.DataColumn columnGEOG_NM;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MunicipalityDataTable() {
                this.TableName = "Municipality";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MunicipalityDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MunicipalityDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CadSurveyNoColumn {
                get {
                    return this.columnCadSurveyNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MunicipalityPsgcColumn {
                get {
                    return this.columnMunicipalityPsgc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GEOG_NMColumn {
                get {
                    return this.columnGEOG_NM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MunicipalityRow this[int index] {
                get {
                    return ((MunicipalityRow)(this.Rows[index]));
                }
            }
            
            public event MunicipalityRowChangeEventHandler MunicipalityRowChanging;
            
            public event MunicipalityRowChangeEventHandler MunicipalityRowChanged;
            
            public event MunicipalityRowChangeEventHandler MunicipalityRowDeleting;
            
            public event MunicipalityRowChangeEventHandler MunicipalityRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMunicipalityRow(MunicipalityRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MunicipalityRow AddMunicipalityRow(CadSurveyRow parentCadSurveyRowByFK_CadSurveyMunicipality_CadSurvey, string MunicipalityPsgc, string GEOG_NM) {
                MunicipalityRow rowMunicipalityRow = ((MunicipalityRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        MunicipalityPsgc,
                        GEOG_NM};
                if ((parentCadSurveyRowByFK_CadSurveyMunicipality_CadSurvey != null)) {
                    columnValuesArray[0] = parentCadSurveyRowByFK_CadSurveyMunicipality_CadSurvey[0];
                }
                rowMunicipalityRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMunicipalityRow);
                return rowMunicipalityRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MunicipalityRow FindByCadSurveyNoMunicipalityPsgc(string CadSurveyNo, string MunicipalityPsgc) {
                return ((MunicipalityRow)(this.Rows.Find(new object[] {
                            CadSurveyNo,
                            MunicipalityPsgc})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MunicipalityDataTable cln = ((MunicipalityDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MunicipalityDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCadSurveyNo = base.Columns["CadSurveyNo"];
                this.columnMunicipalityPsgc = base.Columns["MunicipalityPsgc"];
                this.columnGEOG_NM = base.Columns["GEOG_NM"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCadSurveyNo = new global::System.Data.DataColumn("CadSurveyNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCadSurveyNo);
                this.columnMunicipalityPsgc = new global::System.Data.DataColumn("MunicipalityPsgc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMunicipalityPsgc);
                this.columnGEOG_NM = new global::System.Data.DataColumn("GEOG_NM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGEOG_NM);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCadSurveyNo,
                                this.columnMunicipalityPsgc}, true));
                this.columnCadSurveyNo.AllowDBNull = false;
                this.columnCadSurveyNo.MaxLength = 20;
                this.columnMunicipalityPsgc.AllowDBNull = false;
                this.columnMunicipalityPsgc.MaxLength = 9;
                this.columnGEOG_NM.MaxLength = 60;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MunicipalityRow NewMunicipalityRow() {
                return ((MunicipalityRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MunicipalityRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MunicipalityRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MunicipalityRowChanged != null)) {
                    this.MunicipalityRowChanged(this, new MunicipalityRowChangeEvent(((MunicipalityRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MunicipalityRowChanging != null)) {
                    this.MunicipalityRowChanging(this, new MunicipalityRowChangeEvent(((MunicipalityRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MunicipalityRowDeleted != null)) {
                    this.MunicipalityRowDeleted(this, new MunicipalityRowChangeEvent(((MunicipalityRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MunicipalityRowDeleting != null)) {
                    this.MunicipalityRowDeleting(this, new MunicipalityRowChangeEvent(((MunicipalityRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMunicipalityRow(MunicipalityRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                lsdmsDataSet ds = new lsdmsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MunicipalityDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProjectsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnProject_No;
            
            private global::System.Data.DataColumn columnRegion;
            
            private global::System.Data.DataColumn columnProvince;
            
            private global::System.Data.DataColumn columnMunicipality;
            
            private global::System.Data.DataColumn columnRef_Type;
            
            private global::System.Data.DataColumn columnLatitude;
            
            private global::System.Data.DataColumn columnLongitude;
            
            private global::System.Data.DataColumn columnEncoder;
            
            private global::System.Data.DataColumn columnDate_Last_Updated;
            
            private global::System.Data.DataColumn columnValidation_Status;
            
            private global::System.Data.DataColumn columnValidated_By;
            
            private global::System.Data.DataColumn columnValidation_Date;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectsDataTable() {
                this.TableName = "Projects";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProjectsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Project_NoColumn {
                get {
                    return this.columnProject_No;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegionColumn {
                get {
                    return this.columnRegion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProvinceColumn {
                get {
                    return this.columnProvince;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MunicipalityColumn {
                get {
                    return this.columnMunicipality;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Ref_TypeColumn {
                get {
                    return this.columnRef_Type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LatitudeColumn {
                get {
                    return this.columnLatitude;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LongitudeColumn {
                get {
                    return this.columnLongitude;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EncoderColumn {
                get {
                    return this.columnEncoder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Date_Last_UpdatedColumn {
                get {
                    return this.columnDate_Last_Updated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Validation_StatusColumn {
                get {
                    return this.columnValidation_Status;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Validated_ByColumn {
                get {
                    return this.columnValidated_By;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Validation_DateColumn {
                get {
                    return this.columnValidation_Date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectsRow this[int index] {
                get {
                    return ((ProjectsRow)(this.Rows[index]));
                }
            }
            
            public event ProjectsRowChangeEventHandler ProjectsRowChanging;
            
            public event ProjectsRowChangeEventHandler ProjectsRowChanged;
            
            public event ProjectsRowChangeEventHandler ProjectsRowDeleting;
            
            public event ProjectsRowChangeEventHandler ProjectsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProjectsRow(ProjectsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectsRow AddProjectsRow(string Project_No, string Region, string Province, string Municipality, string Ref_Type, string Latitude, string Longitude, string Encoder, System.DateTime Date_Last_Updated, string Validation_Status, string Validated_By, System.DateTime Validation_Date) {
                ProjectsRow rowProjectsRow = ((ProjectsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Project_No,
                        Region,
                        Province,
                        Municipality,
                        Ref_Type,
                        Latitude,
                        Longitude,
                        Encoder,
                        Date_Last_Updated,
                        Validation_Status,
                        Validated_By,
                        Validation_Date};
                rowProjectsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProjectsRow);
                return rowProjectsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectsRow FindByProject_No(string Project_No) {
                return ((ProjectsRow)(this.Rows.Find(new object[] {
                            Project_No})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProjectsDataTable cln = ((ProjectsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProjectsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProject_No = base.Columns["Project_No"];
                this.columnRegion = base.Columns["Region"];
                this.columnProvince = base.Columns["Province"];
                this.columnMunicipality = base.Columns["Municipality"];
                this.columnRef_Type = base.Columns["Ref_Type"];
                this.columnLatitude = base.Columns["Latitude"];
                this.columnLongitude = base.Columns["Longitude"];
                this.columnEncoder = base.Columns["Encoder"];
                this.columnDate_Last_Updated = base.Columns["Date_Last_Updated"];
                this.columnValidation_Status = base.Columns["Validation_Status"];
                this.columnValidated_By = base.Columns["Validated_By"];
                this.columnValidation_Date = base.Columns["Validation_Date"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProject_No = new global::System.Data.DataColumn("Project_No", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProject_No);
                this.columnRegion = new global::System.Data.DataColumn("Region", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegion);
                this.columnProvince = new global::System.Data.DataColumn("Province", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProvince);
                this.columnMunicipality = new global::System.Data.DataColumn("Municipality", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMunicipality);
                this.columnRef_Type = new global::System.Data.DataColumn("Ref_Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRef_Type);
                this.columnLatitude = new global::System.Data.DataColumn("Latitude", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLatitude);
                this.columnLongitude = new global::System.Data.DataColumn("Longitude", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLongitude);
                this.columnEncoder = new global::System.Data.DataColumn("Encoder", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEncoder);
                this.columnDate_Last_Updated = new global::System.Data.DataColumn("Date_Last_Updated", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate_Last_Updated);
                this.columnValidation_Status = new global::System.Data.DataColumn("Validation_Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValidation_Status);
                this.columnValidated_By = new global::System.Data.DataColumn("Validated_By", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValidated_By);
                this.columnValidation_Date = new global::System.Data.DataColumn("Validation_Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValidation_Date);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnProject_No}, true));
                this.columnProject_No.AllowDBNull = false;
                this.columnProject_No.Unique = true;
                this.columnProject_No.MaxLength = 50;
                this.columnRegion.MaxLength = 50;
                this.columnProvince.MaxLength = 50;
                this.columnMunicipality.MaxLength = 50;
                this.columnRef_Type.MaxLength = 50;
                this.columnLatitude.MaxLength = 50;
                this.columnLongitude.MaxLength = 50;
                this.columnEncoder.MaxLength = 50;
                this.columnValidation_Status.MaxLength = 50;
                this.columnValidated_By.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectsRow NewProjectsRow() {
                return ((ProjectsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProjectsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProjectsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProjectsRowChanged != null)) {
                    this.ProjectsRowChanged(this, new ProjectsRowChangeEvent(((ProjectsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProjectsRowChanging != null)) {
                    this.ProjectsRowChanging(this, new ProjectsRowChangeEvent(((ProjectsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProjectsRowDeleted != null)) {
                    this.ProjectsRowDeleted(this, new ProjectsRowChangeEvent(((ProjectsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProjectsRowDeleting != null)) {
                    this.ProjectsRowDeleting(this, new ProjectsRowChangeEvent(((ProjectsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProjectsRow(ProjectsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                lsdmsDataSet ds = new lsdmsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProjectsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PsgcDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnPSGC;
            
            private global::System.Data.DataColumn columnGEOG_NM;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PsgcDataTable() {
                this.TableName = "Psgc";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PsgcDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PsgcDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PSGCColumn {
                get {
                    return this.columnPSGC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GEOG_NMColumn {
                get {
                    return this.columnGEOG_NM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PsgcRow this[int index] {
                get {
                    return ((PsgcRow)(this.Rows[index]));
                }
            }
            
            public event PsgcRowChangeEventHandler PsgcRowChanging;
            
            public event PsgcRowChangeEventHandler PsgcRowChanged;
            
            public event PsgcRowChangeEventHandler PsgcRowDeleting;
            
            public event PsgcRowChangeEventHandler PsgcRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPsgcRow(PsgcRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PsgcRow AddPsgcRow(string PSGC, string GEOG_NM) {
                PsgcRow rowPsgcRow = ((PsgcRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PSGC,
                        GEOG_NM};
                rowPsgcRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPsgcRow);
                return rowPsgcRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PsgcRow FindByPSGC(string PSGC) {
                return ((PsgcRow)(this.Rows.Find(new object[] {
                            PSGC})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PsgcDataTable cln = ((PsgcDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PsgcDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPSGC = base.Columns["PSGC"];
                this.columnGEOG_NM = base.Columns["GEOG_NM"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPSGC = new global::System.Data.DataColumn("PSGC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPSGC);
                this.columnGEOG_NM = new global::System.Data.DataColumn("GEOG_NM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGEOG_NM);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPSGC}, true));
                this.columnPSGC.AllowDBNull = false;
                this.columnPSGC.Unique = true;
                this.columnPSGC.MaxLength = 9;
                this.columnGEOG_NM.MaxLength = 60;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PsgcRow NewPsgcRow() {
                return ((PsgcRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PsgcRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PsgcRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PsgcRowChanged != null)) {
                    this.PsgcRowChanged(this, new PsgcRowChangeEvent(((PsgcRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PsgcRowChanging != null)) {
                    this.PsgcRowChanging(this, new PsgcRowChangeEvent(((PsgcRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PsgcRowDeleted != null)) {
                    this.PsgcRowDeleted(this, new PsgcRowChangeEvent(((PsgcRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PsgcRowDeleting != null)) {
                    this.PsgcRowDeleting(this, new PsgcRowChangeEvent(((PsgcRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePsgcRow(PsgcRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                lsdmsDataSet ds = new lsdmsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PsgcDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Ref_Type_TableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnRef_Type;
            
            private global::System.Data.DataColumn columnRef_Type_No;
            
            private global::System.Data.DataColumn columnProject_No;
            
            private global::System.Data.DataColumn columnFalse_Northing;
            
            private global::System.Data.DataColumn columnFalse_Easting;
            
            private global::System.Data.DataColumn columnTrue_Northing;
            
            private global::System.Data.DataColumn columnTrue_Easting;
            
            private global::System.Data.DataColumn columnLatitude;
            
            private global::System.Data.DataColumn columnLongitude;
            
            private global::System.Data.DataColumn columnPRSLong;
            
            private global::System.Data.DataColumn columnPRSLat;
            
            private global::System.Data.DataColumn columnPRSEllipsoidalHt;
            
            private global::System.Data.DataColumn columnWGSLong;
            
            private global::System.Data.DataColumn columnWGSLat;
            
            private global::System.Data.DataColumn columnWGSEllipsoidalHt;
            
            private global::System.Data.DataColumn columnSketch;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnRemarks;
            
            private global::System.Data.DataColumn columnReferencePoint;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ref_Type_TableDataTable() {
                this.TableName = "Ref_Type_Table";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Ref_Type_TableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Ref_Type_TableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Ref_TypeColumn {
                get {
                    return this.columnRef_Type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Ref_Type_NoColumn {
                get {
                    return this.columnRef_Type_No;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Project_NoColumn {
                get {
                    return this.columnProject_No;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn False_NorthingColumn {
                get {
                    return this.columnFalse_Northing;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn False_EastingColumn {
                get {
                    return this.columnFalse_Easting;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn True_NorthingColumn {
                get {
                    return this.columnTrue_Northing;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn True_EastingColumn {
                get {
                    return this.columnTrue_Easting;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LatitudeColumn {
                get {
                    return this.columnLatitude;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LongitudeColumn {
                get {
                    return this.columnLongitude;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRSLongColumn {
                get {
                    return this.columnPRSLong;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRSLatColumn {
                get {
                    return this.columnPRSLat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRSEllipsoidalHtColumn {
                get {
                    return this.columnPRSEllipsoidalHt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WGSLongColumn {
                get {
                    return this.columnWGSLong;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WGSLatColumn {
                get {
                    return this.columnWGSLat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WGSEllipsoidalHtColumn {
                get {
                    return this.columnWGSEllipsoidalHt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SketchColumn {
                get {
                    return this.columnSketch;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemarksColumn {
                get {
                    return this.columnRemarks;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReferencePointColumn {
                get {
                    return this.columnReferencePoint;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ref_Type_TableRow this[int index] {
                get {
                    return ((Ref_Type_TableRow)(this.Rows[index]));
                }
            }
            
            public event Ref_Type_TableRowChangeEventHandler Ref_Type_TableRowChanging;
            
            public event Ref_Type_TableRowChangeEventHandler Ref_Type_TableRowChanged;
            
            public event Ref_Type_TableRowChangeEventHandler Ref_Type_TableRowDeleting;
            
            public event Ref_Type_TableRowChangeEventHandler Ref_Type_TableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRef_Type_TableRow(Ref_Type_TableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ref_Type_TableRow AddRef_Type_TableRow(
                        string Ref_Type, 
                        string Ref_Type_No, 
                        string Project_No, 
                        double False_Northing, 
                        double False_Easting, 
                        double True_Northing, 
                        double True_Easting, 
                        string Latitude, 
                        string Longitude, 
                        string PRSLong, 
                        string PRSLat, 
                        string PRSEllipsoidalHt, 
                        string WGSLong, 
                        string WGSLat, 
                        string WGSEllipsoidalHt, 
                        string Sketch, 
                        string Description, 
                        string Remarks, 
                        string ReferencePoint) {
                Ref_Type_TableRow rowRef_Type_TableRow = ((Ref_Type_TableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Ref_Type,
                        Ref_Type_No,
                        Project_No,
                        False_Northing,
                        False_Easting,
                        True_Northing,
                        True_Easting,
                        Latitude,
                        Longitude,
                        PRSLong,
                        PRSLat,
                        PRSEllipsoidalHt,
                        WGSLong,
                        WGSLat,
                        WGSEllipsoidalHt,
                        Sketch,
                        Description,
                        Remarks,
                        ReferencePoint};
                rowRef_Type_TableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRef_Type_TableRow);
                return rowRef_Type_TableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Ref_Type_TableDataTable cln = ((Ref_Type_TableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Ref_Type_TableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRef_Type = base.Columns["Ref_Type"];
                this.columnRef_Type_No = base.Columns["Ref_Type_No"];
                this.columnProject_No = base.Columns["Project_No"];
                this.columnFalse_Northing = base.Columns["False_Northing"];
                this.columnFalse_Easting = base.Columns["False_Easting"];
                this.columnTrue_Northing = base.Columns["True_Northing"];
                this.columnTrue_Easting = base.Columns["True_Easting"];
                this.columnLatitude = base.Columns["Latitude"];
                this.columnLongitude = base.Columns["Longitude"];
                this.columnPRSLong = base.Columns["PRSLong"];
                this.columnPRSLat = base.Columns["PRSLat"];
                this.columnPRSEllipsoidalHt = base.Columns["PRSEllipsoidalHt"];
                this.columnWGSLong = base.Columns["WGSLong"];
                this.columnWGSLat = base.Columns["WGSLat"];
                this.columnWGSEllipsoidalHt = base.Columns["WGSEllipsoidalHt"];
                this.columnSketch = base.Columns["Sketch"];
                this.columnDescription = base.Columns["Description"];
                this.columnRemarks = base.Columns["Remarks"];
                this.columnReferencePoint = base.Columns["ReferencePoint"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRef_Type = new global::System.Data.DataColumn("Ref_Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRef_Type);
                this.columnRef_Type_No = new global::System.Data.DataColumn("Ref_Type_No", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRef_Type_No);
                this.columnProject_No = new global::System.Data.DataColumn("Project_No", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProject_No);
                this.columnFalse_Northing = new global::System.Data.DataColumn("False_Northing", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFalse_Northing);
                this.columnFalse_Easting = new global::System.Data.DataColumn("False_Easting", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFalse_Easting);
                this.columnTrue_Northing = new global::System.Data.DataColumn("True_Northing", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrue_Northing);
                this.columnTrue_Easting = new global::System.Data.DataColumn("True_Easting", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrue_Easting);
                this.columnLatitude = new global::System.Data.DataColumn("Latitude", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLatitude);
                this.columnLongitude = new global::System.Data.DataColumn("Longitude", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLongitude);
                this.columnPRSLong = new global::System.Data.DataColumn("PRSLong", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRSLong);
                this.columnPRSLat = new global::System.Data.DataColumn("PRSLat", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRSLat);
                this.columnPRSEllipsoidalHt = new global::System.Data.DataColumn("PRSEllipsoidalHt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRSEllipsoidalHt);
                this.columnWGSLong = new global::System.Data.DataColumn("WGSLong", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWGSLong);
                this.columnWGSLat = new global::System.Data.DataColumn("WGSLat", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWGSLat);
                this.columnWGSEllipsoidalHt = new global::System.Data.DataColumn("WGSEllipsoidalHt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWGSEllipsoidalHt);
                this.columnSketch = new global::System.Data.DataColumn("Sketch", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSketch);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnRemarks = new global::System.Data.DataColumn("Remarks", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemarks);
                this.columnReferencePoint = new global::System.Data.DataColumn("ReferencePoint", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReferencePoint);
                this.columnProject_No.MaxLength = 50;
                this.columnLatitude.MaxLength = 255;
                this.columnLongitude.MaxLength = 255;
                this.columnPRSLong.MaxLength = 50;
                this.columnPRSLat.MaxLength = 50;
                this.columnPRSEllipsoidalHt.MaxLength = 50;
                this.columnWGSLong.MaxLength = 50;
                this.columnWGSLat.MaxLength = 50;
                this.columnWGSEllipsoidalHt.MaxLength = 50;
                this.columnSketch.MaxLength = 250;
                this.columnDescription.MaxLength = 1073741823;
                this.columnRemarks.MaxLength = 255;
                this.columnReferencePoint.ReadOnly = true;
                this.columnReferencePoint.MaxLength = 21;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ref_Type_TableRow NewRef_Type_TableRow() {
                return ((Ref_Type_TableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Ref_Type_TableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Ref_Type_TableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Ref_Type_TableRowChanged != null)) {
                    this.Ref_Type_TableRowChanged(this, new Ref_Type_TableRowChangeEvent(((Ref_Type_TableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Ref_Type_TableRowChanging != null)) {
                    this.Ref_Type_TableRowChanging(this, new Ref_Type_TableRowChangeEvent(((Ref_Type_TableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Ref_Type_TableRowDeleted != null)) {
                    this.Ref_Type_TableRowDeleted(this, new Ref_Type_TableRowChangeEvent(((Ref_Type_TableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Ref_Type_TableRowDeleting != null)) {
                    this.Ref_Type_TableRowDeleting(this, new Ref_Type_TableRowChangeEvent(((Ref_Type_TableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRef_Type_TableRow(Ref_Type_TableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                lsdmsDataSet ds = new lsdmsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Ref_Type_TableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SectionDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCadSurveyNo;
            
            private global::System.Data.DataColumn columnMunicipalityPsgc;
            
            private global::System.Data.DataColumn columnCadCaseNo;
            
            private global::System.Data.DataColumn columnBarangayPsgc;
            
            private global::System.Data.DataColumn columnSectionId;
            
            private global::System.Data.DataColumn columnQuadrangle;
            
            private global::System.Data.DataColumn columnScale;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SectionDataTable() {
                this.TableName = "Section";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SectionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SectionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CadSurveyNoColumn {
                get {
                    return this.columnCadSurveyNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MunicipalityPsgcColumn {
                get {
                    return this.columnMunicipalityPsgc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CadCaseNoColumn {
                get {
                    return this.columnCadCaseNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BarangayPsgcColumn {
                get {
                    return this.columnBarangayPsgc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionIdColumn {
                get {
                    return this.columnSectionId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuadrangleColumn {
                get {
                    return this.columnQuadrangle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScaleColumn {
                get {
                    return this.columnScale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SectionRow this[int index] {
                get {
                    return ((SectionRow)(this.Rows[index]));
                }
            }
            
            public event SectionRowChangeEventHandler SectionRowChanging;
            
            public event SectionRowChangeEventHandler SectionRowChanged;
            
            public event SectionRowChangeEventHandler SectionRowDeleting;
            
            public event SectionRowChangeEventHandler SectionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSectionRow(SectionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SectionRow AddSectionRow(string CadSurveyNo, string MunicipalityPsgc, string CadCaseNo, string BarangayPsgc, string SectionId, string Quadrangle, int Scale) {
                SectionRow rowSectionRow = ((SectionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CadSurveyNo,
                        MunicipalityPsgc,
                        CadCaseNo,
                        BarangayPsgc,
                        SectionId,
                        Quadrangle,
                        Scale};
                rowSectionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSectionRow);
                return rowSectionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SectionRow FindByQuadrangleSectionIdBarangayPsgcCadCaseNoMunicipalityPsgcCadSurveyNo(string Quadrangle, string SectionId, string BarangayPsgc, string CadCaseNo, string MunicipalityPsgc, string CadSurveyNo) {
                return ((SectionRow)(this.Rows.Find(new object[] {
                            Quadrangle,
                            SectionId,
                            BarangayPsgc,
                            CadCaseNo,
                            MunicipalityPsgc,
                            CadSurveyNo})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SectionDataTable cln = ((SectionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SectionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCadSurveyNo = base.Columns["CadSurveyNo"];
                this.columnMunicipalityPsgc = base.Columns["MunicipalityPsgc"];
                this.columnCadCaseNo = base.Columns["CadCaseNo"];
                this.columnBarangayPsgc = base.Columns["BarangayPsgc"];
                this.columnSectionId = base.Columns["SectionId"];
                this.columnQuadrangle = base.Columns["Quadrangle"];
                this.columnScale = base.Columns["Scale"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCadSurveyNo = new global::System.Data.DataColumn("CadSurveyNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCadSurveyNo);
                this.columnMunicipalityPsgc = new global::System.Data.DataColumn("MunicipalityPsgc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMunicipalityPsgc);
                this.columnCadCaseNo = new global::System.Data.DataColumn("CadCaseNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCadCaseNo);
                this.columnBarangayPsgc = new global::System.Data.DataColumn("BarangayPsgc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBarangayPsgc);
                this.columnSectionId = new global::System.Data.DataColumn("SectionId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionId);
                this.columnQuadrangle = new global::System.Data.DataColumn("Quadrangle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuadrangle);
                this.columnScale = new global::System.Data.DataColumn("Scale", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScale);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnQuadrangle,
                                this.columnSectionId,
                                this.columnBarangayPsgc,
                                this.columnCadCaseNo,
                                this.columnMunicipalityPsgc,
                                this.columnCadSurveyNo}, true));
                this.columnCadSurveyNo.AllowDBNull = false;
                this.columnCadSurveyNo.MaxLength = 20;
                this.columnMunicipalityPsgc.AllowDBNull = false;
                this.columnMunicipalityPsgc.MaxLength = 9;
                this.columnCadCaseNo.AllowDBNull = false;
                this.columnCadCaseNo.MaxLength = 20;
                this.columnBarangayPsgc.AllowDBNull = false;
                this.columnBarangayPsgc.MaxLength = 9;
                this.columnSectionId.AllowDBNull = false;
                this.columnSectionId.MaxLength = 50;
                this.columnQuadrangle.AllowDBNull = false;
                this.columnQuadrangle.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SectionRow NewSectionRow() {
                return ((SectionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SectionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SectionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SectionRowChanged != null)) {
                    this.SectionRowChanged(this, new SectionRowChangeEvent(((SectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SectionRowChanging != null)) {
                    this.SectionRowChanging(this, new SectionRowChangeEvent(((SectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SectionRowDeleted != null)) {
                    this.SectionRowDeleted(this, new SectionRowChangeEvent(((SectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SectionRowDeleting != null)) {
                    this.SectionRowDeleting(this, new SectionRowChangeEvent(((SectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSectionRow(SectionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                lsdmsDataSet ds = new lsdmsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SectionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TechDescDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCadSurveyNo;
            
            private global::System.Data.DataColumn columnMunicipalityPsgc;
            
            private global::System.Data.DataColumn columnCadCaseNo;
            
            private global::System.Data.DataColumn columnBarangayPsgc;
            
            private global::System.Data.DataColumn columnQuadrangle;
            
            private global::System.Data.DataColumn columnSectionId;
            
            private global::System.Data.DataColumn columnLotNo;
            
            private global::System.Data.DataColumn columnFromCorner;
            
            private global::System.Data.DataColumn columnToCorner;
            
            private global::System.Data.DataColumn columnDistance;
            
            private global::System.Data.DataColumn columnNS;
            
            private global::System.Data.DataColumn columnDegree;
            
            private global::System.Data.DataColumn columnMinute;
            
            private global::System.Data.DataColumn columnEW;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TechDescDataTable() {
                this.TableName = "TechDesc";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TechDescDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TechDescDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CadSurveyNoColumn {
                get {
                    return this.columnCadSurveyNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MunicipalityPsgcColumn {
                get {
                    return this.columnMunicipalityPsgc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CadCaseNoColumn {
                get {
                    return this.columnCadCaseNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BarangayPsgcColumn {
                get {
                    return this.columnBarangayPsgc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuadrangleColumn {
                get {
                    return this.columnQuadrangle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionIdColumn {
                get {
                    return this.columnSectionId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LotNoColumn {
                get {
                    return this.columnLotNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromCornerColumn {
                get {
                    return this.columnFromCorner;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToCornerColumn {
                get {
                    return this.columnToCorner;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistanceColumn {
                get {
                    return this.columnDistance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NSColumn {
                get {
                    return this.columnNS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DegreeColumn {
                get {
                    return this.columnDegree;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinuteColumn {
                get {
                    return this.columnMinute;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EWColumn {
                get {
                    return this.columnEW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TechDescRow this[int index] {
                get {
                    return ((TechDescRow)(this.Rows[index]));
                }
            }
            
            public event TechDescRowChangeEventHandler TechDescRowChanging;
            
            public event TechDescRowChangeEventHandler TechDescRowChanged;
            
            public event TechDescRowChangeEventHandler TechDescRowDeleting;
            
            public event TechDescRowChangeEventHandler TechDescRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTechDescRow(TechDescRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TechDescRow AddTechDescRow(string CadSurveyNo, string MunicipalityPsgc, string CadCaseNo, string BarangayPsgc, string Quadrangle, string SectionId, string LotNo, short FromCorner, short ToCorner, decimal Distance, string NS, int Degree, int Minute, string EW) {
                TechDescRow rowTechDescRow = ((TechDescRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CadSurveyNo,
                        MunicipalityPsgc,
                        CadCaseNo,
                        BarangayPsgc,
                        Quadrangle,
                        SectionId,
                        LotNo,
                        FromCorner,
                        ToCorner,
                        Distance,
                        NS,
                        Degree,
                        Minute,
                        EW};
                rowTechDescRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTechDescRow);
                return rowTechDescRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TechDescRow FindByCadSurveyNoMunicipalityPsgcCadCaseNoBarangayPsgcQuadrangleSectionIdLotNoFromCorner(string CadSurveyNo, string MunicipalityPsgc, string CadCaseNo, string BarangayPsgc, string Quadrangle, string SectionId, string LotNo, short FromCorner) {
                return ((TechDescRow)(this.Rows.Find(new object[] {
                            CadSurveyNo,
                            MunicipalityPsgc,
                            CadCaseNo,
                            BarangayPsgc,
                            Quadrangle,
                            SectionId,
                            LotNo,
                            FromCorner})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TechDescDataTable cln = ((TechDescDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TechDescDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCadSurveyNo = base.Columns["CadSurveyNo"];
                this.columnMunicipalityPsgc = base.Columns["MunicipalityPsgc"];
                this.columnCadCaseNo = base.Columns["CadCaseNo"];
                this.columnBarangayPsgc = base.Columns["BarangayPsgc"];
                this.columnQuadrangle = base.Columns["Quadrangle"];
                this.columnSectionId = base.Columns["SectionId"];
                this.columnLotNo = base.Columns["LotNo"];
                this.columnFromCorner = base.Columns["FromCorner"];
                this.columnToCorner = base.Columns["ToCorner"];
                this.columnDistance = base.Columns["Distance"];
                this.columnNS = base.Columns["NS"];
                this.columnDegree = base.Columns["Degree"];
                this.columnMinute = base.Columns["Minute"];
                this.columnEW = base.Columns["EW"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCadSurveyNo = new global::System.Data.DataColumn("CadSurveyNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCadSurveyNo);
                this.columnMunicipalityPsgc = new global::System.Data.DataColumn("MunicipalityPsgc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMunicipalityPsgc);
                this.columnCadCaseNo = new global::System.Data.DataColumn("CadCaseNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCadCaseNo);
                this.columnBarangayPsgc = new global::System.Data.DataColumn("BarangayPsgc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBarangayPsgc);
                this.columnQuadrangle = new global::System.Data.DataColumn("Quadrangle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuadrangle);
                this.columnSectionId = new global::System.Data.DataColumn("SectionId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionId);
                this.columnLotNo = new global::System.Data.DataColumn("LotNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLotNo);
                this.columnFromCorner = new global::System.Data.DataColumn("FromCorner", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromCorner);
                this.columnToCorner = new global::System.Data.DataColumn("ToCorner", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToCorner);
                this.columnDistance = new global::System.Data.DataColumn("Distance", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistance);
                this.columnNS = new global::System.Data.DataColumn("NS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNS);
                this.columnDegree = new global::System.Data.DataColumn("Degree", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDegree);
                this.columnMinute = new global::System.Data.DataColumn("Minute", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinute);
                this.columnEW = new global::System.Data.DataColumn("EW", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEW);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCadSurveyNo,
                                this.columnMunicipalityPsgc,
                                this.columnCadCaseNo,
                                this.columnBarangayPsgc,
                                this.columnQuadrangle,
                                this.columnSectionId,
                                this.columnLotNo,
                                this.columnFromCorner}, true));
                this.columnCadSurveyNo.AllowDBNull = false;
                this.columnCadSurveyNo.MaxLength = 20;
                this.columnMunicipalityPsgc.AllowDBNull = false;
                this.columnMunicipalityPsgc.MaxLength = 9;
                this.columnCadCaseNo.AllowDBNull = false;
                this.columnCadCaseNo.MaxLength = 20;
                this.columnBarangayPsgc.AllowDBNull = false;
                this.columnBarangayPsgc.MaxLength = 9;
                this.columnQuadrangle.AllowDBNull = false;
                this.columnQuadrangle.MaxLength = 20;
                this.columnSectionId.AllowDBNull = false;
                this.columnSectionId.MaxLength = 50;
                this.columnLotNo.AllowDBNull = false;
                this.columnLotNo.MaxLength = 10;
                this.columnFromCorner.AllowDBNull = false;
                this.columnNS.MaxLength = 2;
                this.columnEW.MaxLength = 2;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TechDescRow NewTechDescRow() {
                return ((TechDescRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TechDescRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TechDescRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TechDescRowChanged != null)) {
                    this.TechDescRowChanged(this, new TechDescRowChangeEvent(((TechDescRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TechDescRowChanging != null)) {
                    this.TechDescRowChanging(this, new TechDescRowChangeEvent(((TechDescRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TechDescRowDeleted != null)) {
                    this.TechDescRowDeleted(this, new TechDescRowChangeEvent(((TechDescRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TechDescRowDeleting != null)) {
                    this.TechDescRowDeleting(this, new TechDescRowChangeEvent(((TechDescRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTechDescRow(TechDescRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                lsdmsDataSet ds = new lsdmsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TechDescDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UsersDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnUsername;
            
            private global::System.Data.DataColumn columnPassword;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersDataTable() {
                this.TableName = "Users";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UsersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UsersDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UsernameColumn {
                get {
                    return this.columnUsername;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PasswordColumn {
                get {
                    return this.columnPassword;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow this[int index] {
                get {
                    return ((UsersRow)(this.Rows[index]));
                }
            }
            
            public event UsersRowChangeEventHandler UsersRowChanging;
            
            public event UsersRowChangeEventHandler UsersRowChanged;
            
            public event UsersRowChangeEventHandler UsersRowDeleting;
            
            public event UsersRowChangeEventHandler UsersRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUsersRow(UsersRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow AddUsersRow(string Username, string Password) {
                UsersRow rowUsersRow = ((UsersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Username,
                        Password};
                rowUsersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUsersRow);
                return rowUsersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow FindByUsername(string Username) {
                return ((UsersRow)(this.Rows.Find(new object[] {
                            Username})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UsersDataTable cln = ((UsersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UsersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUsername = base.Columns["Username"];
                this.columnPassword = base.Columns["Password"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUsername = new global::System.Data.DataColumn("Username", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUsername);
                this.columnPassword = new global::System.Data.DataColumn("Password", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassword);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnUsername}, true));
                this.columnUsername.AllowDBNull = false;
                this.columnUsername.Unique = true;
                this.columnUsername.MaxLength = 20;
                this.columnPassword.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow NewUsersRow() {
                return ((UsersRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UsersRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UsersRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UsersRowChanged != null)) {
                    this.UsersRowChanged(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UsersRowChanging != null)) {
                    this.UsersRowChanging(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UsersRowDeleted != null)) {
                    this.UsersRowDeleted(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UsersRowDeleting != null)) {
                    this.UsersRowDeleting(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUsersRow(UsersRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                lsdmsDataSet ds = new lsdmsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UsersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class QuadrangleDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCadSurveyNo;
            
            private global::System.Data.DataColumn columnMunicipalityPsgc;
            
            private global::System.Data.DataColumn columnCadCaseNo;
            
            private global::System.Data.DataColumn columnBarangayPsgc;
            
            private global::System.Data.DataColumn columnQuadrangle;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuadrangleDataTable() {
                this.TableName = "Quadrangle";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal QuadrangleDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected QuadrangleDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CadSurveyNoColumn {
                get {
                    return this.columnCadSurveyNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MunicipalityPsgcColumn {
                get {
                    return this.columnMunicipalityPsgc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CadCaseNoColumn {
                get {
                    return this.columnCadCaseNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BarangayPsgcColumn {
                get {
                    return this.columnBarangayPsgc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuadrangleColumn {
                get {
                    return this.columnQuadrangle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuadrangleRow this[int index] {
                get {
                    return ((QuadrangleRow)(this.Rows[index]));
                }
            }
            
            public event QuadrangleRowChangeEventHandler QuadrangleRowChanging;
            
            public event QuadrangleRowChangeEventHandler QuadrangleRowChanged;
            
            public event QuadrangleRowChangeEventHandler QuadrangleRowDeleting;
            
            public event QuadrangleRowChangeEventHandler QuadrangleRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddQuadrangleRow(QuadrangleRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuadrangleRow AddQuadrangleRow(string CadSurveyNo, string MunicipalityPsgc, string CadCaseNo, string BarangayPsgc, string Quadrangle) {
                QuadrangleRow rowQuadrangleRow = ((QuadrangleRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CadSurveyNo,
                        MunicipalityPsgc,
                        CadCaseNo,
                        BarangayPsgc,
                        Quadrangle};
                rowQuadrangleRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowQuadrangleRow);
                return rowQuadrangleRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuadrangleRow FindByCadSurveyNoMunicipalityPsgcCadCaseNoBarangayPsgcQuadrangle(string CadSurveyNo, string MunicipalityPsgc, string CadCaseNo, string BarangayPsgc, string Quadrangle) {
                return ((QuadrangleRow)(this.Rows.Find(new object[] {
                            CadSurveyNo,
                            MunicipalityPsgc,
                            CadCaseNo,
                            BarangayPsgc,
                            Quadrangle})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                QuadrangleDataTable cln = ((QuadrangleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new QuadrangleDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCadSurveyNo = base.Columns["CadSurveyNo"];
                this.columnMunicipalityPsgc = base.Columns["MunicipalityPsgc"];
                this.columnCadCaseNo = base.Columns["CadCaseNo"];
                this.columnBarangayPsgc = base.Columns["BarangayPsgc"];
                this.columnQuadrangle = base.Columns["Quadrangle"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCadSurveyNo = new global::System.Data.DataColumn("CadSurveyNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCadSurveyNo);
                this.columnMunicipalityPsgc = new global::System.Data.DataColumn("MunicipalityPsgc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMunicipalityPsgc);
                this.columnCadCaseNo = new global::System.Data.DataColumn("CadCaseNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCadCaseNo);
                this.columnBarangayPsgc = new global::System.Data.DataColumn("BarangayPsgc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBarangayPsgc);
                this.columnQuadrangle = new global::System.Data.DataColumn("Quadrangle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuadrangle);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCadSurveyNo,
                                this.columnMunicipalityPsgc,
                                this.columnCadCaseNo,
                                this.columnBarangayPsgc,
                                this.columnQuadrangle}, true));
                this.columnCadSurveyNo.AllowDBNull = false;
                this.columnCadSurveyNo.MaxLength = 20;
                this.columnMunicipalityPsgc.AllowDBNull = false;
                this.columnMunicipalityPsgc.MaxLength = 9;
                this.columnCadCaseNo.AllowDBNull = false;
                this.columnCadCaseNo.MaxLength = 20;
                this.columnBarangayPsgc.AllowDBNull = false;
                this.columnBarangayPsgc.MaxLength = 9;
                this.columnQuadrangle.AllowDBNull = false;
                this.columnQuadrangle.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuadrangleRow NewQuadrangleRow() {
                return ((QuadrangleRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new QuadrangleRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(QuadrangleRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.QuadrangleRowChanged != null)) {
                    this.QuadrangleRowChanged(this, new QuadrangleRowChangeEvent(((QuadrangleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.QuadrangleRowChanging != null)) {
                    this.QuadrangleRowChanging(this, new QuadrangleRowChangeEvent(((QuadrangleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.QuadrangleRowDeleted != null)) {
                    this.QuadrangleRowDeleted(this, new QuadrangleRowChangeEvent(((QuadrangleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.QuadrangleRowDeleting != null)) {
                    this.QuadrangleRowDeleting(this, new QuadrangleRowChangeEvent(((QuadrangleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveQuadrangleRow(QuadrangleRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                lsdmsDataSet ds = new lsdmsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "QuadrangleDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Ref_Type_Table2DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnRef_Type;
            
            private global::System.Data.DataColumn columnRef_Type_No;
            
            private global::System.Data.DataColumn columnProject_No;
            
            private global::System.Data.DataColumn columnFalse_Northing;
            
            private global::System.Data.DataColumn columnFalse_Easting;
            
            private global::System.Data.DataColumn columnTrue_Northing;
            
            private global::System.Data.DataColumn columnTrue_Easting;
            
            private global::System.Data.DataColumn columnPTM_PRS92_Northing;
            
            private global::System.Data.DataColumn columnPTM_PRS92_Easting;
            
            private global::System.Data.DataColumn columnLatitude;
            
            private global::System.Data.DataColumn columnLongitude;
            
            private global::System.Data.DataColumn columnPRSLong;
            
            private global::System.Data.DataColumn columnPRSLat;
            
            private global::System.Data.DataColumn columnPRSEllipsoidalHt;
            
            private global::System.Data.DataColumn columnWGSLong;
            
            private global::System.Data.DataColumn columnWGSLat;
            
            private global::System.Data.DataColumn columnWGSEllipsoidalHt;
            
            private global::System.Data.DataColumn columnSketch;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnRemarks;
            
            private global::System.Data.DataColumn columnStatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ref_Type_Table2DataTable() {
                this.TableName = "Ref_Type_Table2";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Ref_Type_Table2DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Ref_Type_Table2DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Ref_TypeColumn {
                get {
                    return this.columnRef_Type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Ref_Type_NoColumn {
                get {
                    return this.columnRef_Type_No;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Project_NoColumn {
                get {
                    return this.columnProject_No;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn False_NorthingColumn {
                get {
                    return this.columnFalse_Northing;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn False_EastingColumn {
                get {
                    return this.columnFalse_Easting;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn True_NorthingColumn {
                get {
                    return this.columnTrue_Northing;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn True_EastingColumn {
                get {
                    return this.columnTrue_Easting;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PTM_PRS92_NorthingColumn {
                get {
                    return this.columnPTM_PRS92_Northing;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PTM_PRS92_EastingColumn {
                get {
                    return this.columnPTM_PRS92_Easting;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LatitudeColumn {
                get {
                    return this.columnLatitude;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LongitudeColumn {
                get {
                    return this.columnLongitude;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRSLongColumn {
                get {
                    return this.columnPRSLong;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRSLatColumn {
                get {
                    return this.columnPRSLat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRSEllipsoidalHtColumn {
                get {
                    return this.columnPRSEllipsoidalHt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WGSLongColumn {
                get {
                    return this.columnWGSLong;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WGSLatColumn {
                get {
                    return this.columnWGSLat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WGSEllipsoidalHtColumn {
                get {
                    return this.columnWGSEllipsoidalHt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SketchColumn {
                get {
                    return this.columnSketch;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemarksColumn {
                get {
                    return this.columnRemarks;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ref_Type_Table2Row this[int index] {
                get {
                    return ((Ref_Type_Table2Row)(this.Rows[index]));
                }
            }
            
            public event Ref_Type_Table2RowChangeEventHandler Ref_Type_Table2RowChanging;
            
            public event Ref_Type_Table2RowChangeEventHandler Ref_Type_Table2RowChanged;
            
            public event Ref_Type_Table2RowChangeEventHandler Ref_Type_Table2RowDeleting;
            
            public event Ref_Type_Table2RowChangeEventHandler Ref_Type_Table2RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRef_Type_Table2Row(Ref_Type_Table2Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ref_Type_Table2Row AddRef_Type_Table2Row(
                        string Ref_Type, 
                        string Ref_Type_No, 
                        string Project_No, 
                        double False_Northing, 
                        double False_Easting, 
                        double True_Northing, 
                        double True_Easting, 
                        decimal PTM_PRS92_Northing, 
                        decimal PTM_PRS92_Easting, 
                        string Latitude, 
                        string Longitude, 
                        string PRSLong, 
                        string PRSLat, 
                        double PRSEllipsoidalHt, 
                        string WGSLong, 
                        string WGSLat, 
                        double WGSEllipsoidalHt, 
                        byte[] Sketch, 
                        string Description, 
                        string Remarks, 
                        string Status) {
                Ref_Type_Table2Row rowRef_Type_Table2Row = ((Ref_Type_Table2Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Ref_Type,
                        Ref_Type_No,
                        Project_No,
                        False_Northing,
                        False_Easting,
                        True_Northing,
                        True_Easting,
                        PTM_PRS92_Northing,
                        PTM_PRS92_Easting,
                        Latitude,
                        Longitude,
                        PRSLong,
                        PRSLat,
                        PRSEllipsoidalHt,
                        WGSLong,
                        WGSLat,
                        WGSEllipsoidalHt,
                        Sketch,
                        Description,
                        Remarks,
                        Status};
                rowRef_Type_Table2Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowRef_Type_Table2Row);
                return rowRef_Type_Table2Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Ref_Type_Table2DataTable cln = ((Ref_Type_Table2DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Ref_Type_Table2DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRef_Type = base.Columns["Ref_Type"];
                this.columnRef_Type_No = base.Columns["Ref_Type_No"];
                this.columnProject_No = base.Columns["Project_No"];
                this.columnFalse_Northing = base.Columns["False_Northing"];
                this.columnFalse_Easting = base.Columns["False_Easting"];
                this.columnTrue_Northing = base.Columns["True_Northing"];
                this.columnTrue_Easting = base.Columns["True_Easting"];
                this.columnPTM_PRS92_Northing = base.Columns["PTM_PRS92_Northing"];
                this.columnPTM_PRS92_Easting = base.Columns["PTM_PRS92_Easting"];
                this.columnLatitude = base.Columns["Latitude"];
                this.columnLongitude = base.Columns["Longitude"];
                this.columnPRSLong = base.Columns["PRSLong"];
                this.columnPRSLat = base.Columns["PRSLat"];
                this.columnPRSEllipsoidalHt = base.Columns["PRSEllipsoidalHt"];
                this.columnWGSLong = base.Columns["WGSLong"];
                this.columnWGSLat = base.Columns["WGSLat"];
                this.columnWGSEllipsoidalHt = base.Columns["WGSEllipsoidalHt"];
                this.columnSketch = base.Columns["Sketch"];
                this.columnDescription = base.Columns["Description"];
                this.columnRemarks = base.Columns["Remarks"];
                this.columnStatus = base.Columns["Status"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRef_Type = new global::System.Data.DataColumn("Ref_Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRef_Type);
                this.columnRef_Type_No = new global::System.Data.DataColumn("Ref_Type_No", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRef_Type_No);
                this.columnProject_No = new global::System.Data.DataColumn("Project_No", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProject_No);
                this.columnFalse_Northing = new global::System.Data.DataColumn("False_Northing", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFalse_Northing);
                this.columnFalse_Easting = new global::System.Data.DataColumn("False_Easting", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFalse_Easting);
                this.columnTrue_Northing = new global::System.Data.DataColumn("True_Northing", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrue_Northing);
                this.columnTrue_Easting = new global::System.Data.DataColumn("True_Easting", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrue_Easting);
                this.columnPTM_PRS92_Northing = new global::System.Data.DataColumn("PTM_PRS92_Northing", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPTM_PRS92_Northing);
                this.columnPTM_PRS92_Easting = new global::System.Data.DataColumn("PTM_PRS92_Easting", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPTM_PRS92_Easting);
                this.columnLatitude = new global::System.Data.DataColumn("Latitude", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLatitude);
                this.columnLongitude = new global::System.Data.DataColumn("Longitude", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLongitude);
                this.columnPRSLong = new global::System.Data.DataColumn("PRSLong", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRSLong);
                this.columnPRSLat = new global::System.Data.DataColumn("PRSLat", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRSLat);
                this.columnPRSEllipsoidalHt = new global::System.Data.DataColumn("PRSEllipsoidalHt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRSEllipsoidalHt);
                this.columnWGSLong = new global::System.Data.DataColumn("WGSLong", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWGSLong);
                this.columnWGSLat = new global::System.Data.DataColumn("WGSLat", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWGSLat);
                this.columnWGSEllipsoidalHt = new global::System.Data.DataColumn("WGSEllipsoidalHt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWGSEllipsoidalHt);
                this.columnSketch = new global::System.Data.DataColumn("Sketch", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSketch);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnRemarks = new global::System.Data.DataColumn("Remarks", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemarks);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnRef_Type.MaxLength = 50;
                this.columnRef_Type_No.MaxLength = 50;
                this.columnProject_No.MaxLength = 50;
                this.columnLatitude.MaxLength = 50;
                this.columnLongitude.MaxLength = 50;
                this.columnPRSLong.MaxLength = 50;
                this.columnPRSLat.MaxLength = 50;
                this.columnWGSLong.MaxLength = 50;
                this.columnWGSLat.MaxLength = 50;
                this.columnDescription.MaxLength = 1073741823;
                this.columnRemarks.MaxLength = 255;
                this.columnStatus.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ref_Type_Table2Row NewRef_Type_Table2Row() {
                return ((Ref_Type_Table2Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Ref_Type_Table2Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Ref_Type_Table2Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Ref_Type_Table2RowChanged != null)) {
                    this.Ref_Type_Table2RowChanged(this, new Ref_Type_Table2RowChangeEvent(((Ref_Type_Table2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Ref_Type_Table2RowChanging != null)) {
                    this.Ref_Type_Table2RowChanging(this, new Ref_Type_Table2RowChangeEvent(((Ref_Type_Table2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Ref_Type_Table2RowDeleted != null)) {
                    this.Ref_Type_Table2RowDeleted(this, new Ref_Type_Table2RowChangeEvent(((Ref_Type_Table2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Ref_Type_Table2RowDeleting != null)) {
                    this.Ref_Type_Table2RowDeleting(this, new Ref_Type_Table2RowChangeEvent(((Ref_Type_Table2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRef_Type_Table2Row(Ref_Type_Table2Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                lsdmsDataSet ds = new lsdmsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Ref_Type_Table2DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BarangayRow : global::System.Data.DataRow {
            
            private BarangayDataTable tableBarangay;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BarangayRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBarangay = ((BarangayDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CadSurveyNo {
                get {
                    return ((string)(this[this.tableBarangay.CadSurveyNoColumn]));
                }
                set {
                    this[this.tableBarangay.CadSurveyNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MunicipalityPsgc {
                get {
                    return ((string)(this[this.tableBarangay.MunicipalityPsgcColumn]));
                }
                set {
                    this[this.tableBarangay.MunicipalityPsgcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CadCaseNo {
                get {
                    return ((string)(this[this.tableBarangay.CadCaseNoColumn]));
                }
                set {
                    this[this.tableBarangay.CadCaseNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BarangayPsgc {
                get {
                    return ((string)(this[this.tableBarangay.BarangayPsgcColumn]));
                }
                set {
                    this[this.tableBarangay.BarangayPsgcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GEOG_NM {
                get {
                    try {
                        return ((string)(this[this.tableBarangay.GEOG_NMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GEOG_NM\' in table \'Barangay\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBarangay.GEOG_NMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CaseRow CaseRowParent {
                get {
                    return ((CaseRow)(this.GetParentRow(this.Table.ParentRelations["FK_CadSurveyMunicipalityCaseBarangay_CadSurveyMunicipalityCase"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_CadSurveyMunicipalityCaseBarangay_CadSurveyMunicipalityCase"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGEOG_NMNull() {
                return this.IsNull(this.tableBarangay.GEOG_NMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGEOG_NMNull() {
                this[this.tableBarangay.GEOG_NMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuadrangleRow[] GetQuadrangleRows() {
                if ((this.Table.ChildRelations["Barangay_Quadrangle"] == null)) {
                    return new QuadrangleRow[0];
                }
                else {
                    return ((QuadrangleRow[])(base.GetChildRows(this.Table.ChildRelations["Barangay_Quadrangle"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CadSurveyRow : global::System.Data.DataRow {
            
            private CadSurveyDataTable tableCadSurvey;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CadSurveyRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCadSurvey = ((CadSurveyDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CadSurveyNo {
                get {
                    return ((string)(this[this.tableCadSurvey.CadSurveyNoColumn]));
                }
                set {
                    this[this.tableCadSurvey.CadSurveyNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Island {
                get {
                    try {
                        return ((string)(this[this.tableCadSurvey.IslandColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Island\' in table \'CadSurvey\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCadSurvey.IslandColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RegionPsgc {
                get {
                    try {
                        return ((string)(this[this.tableCadSurvey.RegionPsgcColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RegionPsgc\' in table \'CadSurvey\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCadSurvey.RegionPsgcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProvincePsgc {
                get {
                    try {
                        return ((string)(this[this.tableCadSurvey.ProvincePsgcColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProvincePsgc\' in table \'CadSurvey\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCadSurvey.ProvincePsgcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CoordinateSystem {
                get {
                    try {
                        return ((string)(this[this.tableCadSurvey.CoordinateSystemColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CoordinateSystem\' in table \'CadSurvey\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCadSurvey.CoordinateSystemColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SurveySymbolNo {
                get {
                    try {
                        return ((int)(this[this.tableCadSurvey.SurveySymbolNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SurveySymbolNo\' in table \'CadSurvey\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCadSurvey.SurveySymbolNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PreviousSurveyNo {
                get {
                    try {
                        return ((string)(this[this.tableCadSurvey.PreviousSurveyNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PreviousSurveyNo\' in table \'CadSurvey\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCadSurvey.PreviousSurveyNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ApprovedTotalMunicipality {
                get {
                    try {
                        return ((int)(this[this.tableCadSurvey.ApprovedTotalMunicipalityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ApprovedTotalMunicipality\' in table \'CadSurvey\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCadSurvey.ApprovedTotalMunicipalityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ApprovedTotalCity {
                get {
                    try {
                        return ((int)(this[this.tableCadSurvey.ApprovedTotalCityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ApprovedTotalCity\' in table \'CadSurvey\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCadSurvey.ApprovedTotalCityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ApprovedTotalBarangay {
                get {
                    try {
                        return ((int)(this[this.tableCadSurvey.ApprovedTotalBarangayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ApprovedTotalBarangay\' in table \'CadSurvey\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCadSurvey.ApprovedTotalBarangayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ApprovedTotalLot {
                get {
                    try {
                        return ((int)(this[this.tableCadSurvey.ApprovedTotalLotColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ApprovedTotalLot\' in table \'CadSurvey\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCadSurvey.ApprovedTotalLotColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ApprovedTotalAreaHectares {
                get {
                    try {
                        return ((decimal)(this[this.tableCadSurvey.ApprovedTotalAreaHectaresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ApprovedTotalAreaHectares\' in table \'CadSurvey\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCadSurvey.ApprovedTotalAreaHectaresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ApprovalRemarks {
                get {
                    try {
                        return ((string)(this[this.tableCadSurvey.ApprovalRemarksColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ApprovalRemarks\' in table \'CadSurvey\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCadSurvey.ApprovalRemarksColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIslandNull() {
                return this.IsNull(this.tableCadSurvey.IslandColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIslandNull() {
                this[this.tableCadSurvey.IslandColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRegionPsgcNull() {
                return this.IsNull(this.tableCadSurvey.RegionPsgcColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRegionPsgcNull() {
                this[this.tableCadSurvey.RegionPsgcColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProvincePsgcNull() {
                return this.IsNull(this.tableCadSurvey.ProvincePsgcColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProvincePsgcNull() {
                this[this.tableCadSurvey.ProvincePsgcColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCoordinateSystemNull() {
                return this.IsNull(this.tableCadSurvey.CoordinateSystemColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCoordinateSystemNull() {
                this[this.tableCadSurvey.CoordinateSystemColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSurveySymbolNoNull() {
                return this.IsNull(this.tableCadSurvey.SurveySymbolNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSurveySymbolNoNull() {
                this[this.tableCadSurvey.SurveySymbolNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPreviousSurveyNoNull() {
                return this.IsNull(this.tableCadSurvey.PreviousSurveyNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPreviousSurveyNoNull() {
                this[this.tableCadSurvey.PreviousSurveyNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApprovedTotalMunicipalityNull() {
                return this.IsNull(this.tableCadSurvey.ApprovedTotalMunicipalityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApprovedTotalMunicipalityNull() {
                this[this.tableCadSurvey.ApprovedTotalMunicipalityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApprovedTotalCityNull() {
                return this.IsNull(this.tableCadSurvey.ApprovedTotalCityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApprovedTotalCityNull() {
                this[this.tableCadSurvey.ApprovedTotalCityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApprovedTotalBarangayNull() {
                return this.IsNull(this.tableCadSurvey.ApprovedTotalBarangayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApprovedTotalBarangayNull() {
                this[this.tableCadSurvey.ApprovedTotalBarangayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApprovedTotalLotNull() {
                return this.IsNull(this.tableCadSurvey.ApprovedTotalLotColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApprovedTotalLotNull() {
                this[this.tableCadSurvey.ApprovedTotalLotColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApprovedTotalAreaHectaresNull() {
                return this.IsNull(this.tableCadSurvey.ApprovedTotalAreaHectaresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApprovedTotalAreaHectaresNull() {
                this[this.tableCadSurvey.ApprovedTotalAreaHectaresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApprovalRemarksNull() {
                return this.IsNull(this.tableCadSurvey.ApprovalRemarksColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApprovalRemarksNull() {
                this[this.tableCadSurvey.ApprovalRemarksColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MunicipalityRow[] GetMunicipalityRows() {
                if ((this.Table.ChildRelations["FK_CadSurveyMunicipality_CadSurvey"] == null)) {
                    return new MunicipalityRow[0];
                }
                else {
                    return ((MunicipalityRow[])(base.GetChildRows(this.Table.ChildRelations["FK_CadSurveyMunicipality_CadSurvey"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CaseRow : global::System.Data.DataRow {
            
            private CaseDataTable tableCase;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CaseRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCase = ((CaseDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CadSurveyNo {
                get {
                    return ((string)(this[this.tableCase.CadSurveyNoColumn]));
                }
                set {
                    this[this.tableCase.CadSurveyNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MunicipalityPsgc {
                get {
                    return ((string)(this[this.tableCase.MunicipalityPsgcColumn]));
                }
                set {
                    this[this.tableCase.MunicipalityPsgcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CadCaseNo {
                get {
                    return ((string)(this[this.tableCase.CadCaseNoColumn]));
                }
                set {
                    this[this.tableCase.CadCaseNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ModuleNo {
                get {
                    try {
                        return ((string)(this[this.tableCase.ModuleNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModuleNo\' in table \'Case\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCase.ModuleNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MunicipalityRow MunicipalityRowParent {
                get {
                    return ((MunicipalityRow)(this.GetParentRow(this.Table.ParentRelations["FK_CadSurveyMunicipalityCase_CadSurveyMunicipality"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_CadSurveyMunicipalityCase_CadSurveyMunicipality"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModuleNoNull() {
                return this.IsNull(this.tableCase.ModuleNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModuleNoNull() {
                this[this.tableCase.ModuleNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BarangayRow[] GetBarangayRows() {
                if ((this.Table.ChildRelations["FK_CadSurveyMunicipalityCaseBarangay_CadSurveyMunicipalityCase"] == null)) {
                    return new BarangayRow[0];
                }
                else {
                    return ((BarangayRow[])(base.GetChildRows(this.Table.ChildRelations["FK_CadSurveyMunicipalityCaseBarangay_CadSurveyMunicipalityCase"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LotRow : global::System.Data.DataRow {
            
            private LotDataTable tableLot;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LotRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLot = ((LotDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CadSurveyNo {
                get {
                    return ((string)(this[this.tableLot.CadSurveyNoColumn]));
                }
                set {
                    this[this.tableLot.CadSurveyNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MunicipalityPsgc {
                get {
                    return ((string)(this[this.tableLot.MunicipalityPsgcColumn]));
                }
                set {
                    this[this.tableLot.MunicipalityPsgcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CadCaseNo {
                get {
                    return ((string)(this[this.tableLot.CadCaseNoColumn]));
                }
                set {
                    this[this.tableLot.CadCaseNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BarangayPsgc {
                get {
                    return ((string)(this[this.tableLot.BarangayPsgcColumn]));
                }
                set {
                    this[this.tableLot.BarangayPsgcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Quadrangle {
                get {
                    return ((string)(this[this.tableLot.QuadrangleColumn]));
                }
                set {
                    this[this.tableLot.QuadrangleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionId {
                get {
                    return ((string)(this[this.tableLot.SectionIdColumn]));
                }
                set {
                    this[this.tableLot.SectionIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LotNo {
                get {
                    return ((string)(this[this.tableLot.LotNoColumn]));
                }
                set {
                    this[this.tableLot.LotNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClaimantName {
                get {
                    try {
                        return ((string)(this[this.tableLot.ClaimantNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClaimantName\' in table \'Lot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLot.ClaimantNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClaimantAddress {
                get {
                    try {
                        return ((string)(this[this.tableLot.ClaimantAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClaimantAddress\' in table \'Lot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLot.ClaimantAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DeclaredArea {
                get {
                    try {
                        return ((decimal)(this[this.tableLot.DeclaredAreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeclaredArea\' in table \'Lot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLot.DeclaredAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ComputedArea {
                get {
                    try {
                        return ((decimal)(this[this.tableLot.ComputedAreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ComputedArea\' in table \'Lot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLot.ComputedAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReferencePoint {
                get {
                    try {
                        return ((string)(this[this.tableLot.ReferencePointColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReferencePoint\' in table \'Lot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLot.ReferencePointColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TieLineNS {
                get {
                    try {
                        return ((string)(this[this.tableLot.TieLineNSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TieLineNS\' in table \'Lot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLot.TieLineNSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TieLineEW {
                get {
                    try {
                        return ((string)(this[this.tableLot.TieLineEWColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TieLineEW\' in table \'Lot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLot.TieLineEWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TieLineDegree {
                get {
                    try {
                        return ((int)(this[this.tableLot.TieLineDegreeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TieLineDegree\' in table \'Lot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLot.TieLineDegreeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TieLineMinute {
                get {
                    try {
                        return ((int)(this[this.tableLot.TieLineMinuteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TieLineMinute\' in table \'Lot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLot.TieLineMinuteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TieLineDistance {
                get {
                    try {
                        return ((decimal)(this[this.tableLot.TieLineDistanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TieLineDistance\' in table \'Lot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLot.TieLineDistanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OriginalCheckedBy {
                get {
                    try {
                        return ((string)(this[this.tableLot.OriginalCheckedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OriginalCheckedBy\' in table \'Lot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLot.OriginalCheckedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OriginalCheckedDate {
                get {
                    try {
                        return ((string)(this[this.tableLot.OriginalCheckedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OriginalCheckedDate\' in table \'Lot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLot.OriginalCheckedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OriginalCompletedBy {
                get {
                    try {
                        return ((string)(this[this.tableLot.OriginalCompletedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OriginalCompletedBy\' in table \'Lot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLot.OriginalCompletedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OriginalCompletedDate {
                get {
                    try {
                        return ((string)(this[this.tableLot.OriginalCompletedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OriginalCompletedDate\' in table \'Lot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLot.OriginalCompletedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DuplicateCheckedBy {
                get {
                    try {
                        return ((string)(this[this.tableLot.DuplicateCheckedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DuplicateCheckedBy\' in table \'Lot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLot.DuplicateCheckedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DuplicateCheckedDate {
                get {
                    try {
                        return ((string)(this[this.tableLot.DuplicateCheckedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DuplicateCheckedDate\' in table \'Lot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLot.DuplicateCheckedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FinalVerifiedBy {
                get {
                    try {
                        return ((string)(this[this.tableLot.FinalVerifiedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FinalVerifiedBy\' in table \'Lot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLot.FinalVerifiedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FinalCheckedBy1 {
                get {
                    try {
                        return ((string)(this[this.tableLot.FinalCheckedBy1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FinalCheckedBy1\' in table \'Lot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLot.FinalCheckedBy1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FinalCheckedBy2 {
                get {
                    try {
                        return ((string)(this[this.tableLot.FinalCheckedBy2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FinalCheckedBy2\' in table \'Lot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLot.FinalCheckedBy2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remarks {
                get {
                    try {
                        return ((string)(this[this.tableLot.RemarksColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Remarks\' in table \'Lot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLot.RemarksColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LRCNo {
                get {
                    try {
                        return ((string)(this[this.tableLot.LRCNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LRCNo\' in table \'Lot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLot.LRCNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GEName {
                get {
                    try {
                        return ((string)(this[this.tableLot.GENameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GEName\' in table \'Lot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLot.GENameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SurveyMonthFrom {
                get {
                    try {
                        return ((string)(this[this.tableLot.SurveyMonthFromColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SurveyMonthFrom\' in table \'Lot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLot.SurveyMonthFromColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SurveyDayFrom {
                get {
                    try {
                        return ((string)(this[this.tableLot.SurveyDayFromColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SurveyDayFrom\' in table \'Lot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLot.SurveyDayFromColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SurveyYearFrom {
                get {
                    try {
                        return ((string)(this[this.tableLot.SurveyYearFromColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SurveyYearFrom\' in table \'Lot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLot.SurveyYearFromColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SurveyMonthTo {
                get {
                    try {
                        return ((string)(this[this.tableLot.SurveyMonthToColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SurveyMonthTo\' in table \'Lot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLot.SurveyMonthToColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SurveyDayTo {
                get {
                    try {
                        return ((string)(this[this.tableLot.SurveyDayToColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SurveyDayTo\' in table \'Lot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLot.SurveyDayToColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SurveyYearTo {
                get {
                    try {
                        return ((string)(this[this.tableLot.SurveyYearToColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SurveyYearTo\' in table \'Lot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLot.SurveyYearToColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DuplicateCompletedBy {
                get {
                    try {
                        return ((string)(this[this.tableLot.DuplicateCompletedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DuplicateCompletedBy\' in table \'Lot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLot.DuplicateCompletedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DuplicateCompletedDate {
                get {
                    try {
                        return ((string)(this[this.tableLot.DuplicateCompletedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DuplicateCompletedDate\' in table \'Lot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLot.DuplicateCompletedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserName {
                get {
                    try {
                        return ((string)(this[this.tableLot.UserNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserName\' in table \'Lot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLot.UserNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateAdded {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLot.DateAddedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateAdded\' in table \'Lot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLot.DateAddedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SectionRow SectionRowParentByFK_Lot_Section {
                get {
                    return ((SectionRow)(this.GetParentRow(this.Table.ParentRelations["FK_Lot_Section"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Lot_Section"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClaimantNameNull() {
                return this.IsNull(this.tableLot.ClaimantNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClaimantNameNull() {
                this[this.tableLot.ClaimantNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClaimantAddressNull() {
                return this.IsNull(this.tableLot.ClaimantAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClaimantAddressNull() {
                this[this.tableLot.ClaimantAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeclaredAreaNull() {
                return this.IsNull(this.tableLot.DeclaredAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeclaredAreaNull() {
                this[this.tableLot.DeclaredAreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsComputedAreaNull() {
                return this.IsNull(this.tableLot.ComputedAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetComputedAreaNull() {
                this[this.tableLot.ComputedAreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReferencePointNull() {
                return this.IsNull(this.tableLot.ReferencePointColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReferencePointNull() {
                this[this.tableLot.ReferencePointColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTieLineNSNull() {
                return this.IsNull(this.tableLot.TieLineNSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTieLineNSNull() {
                this[this.tableLot.TieLineNSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTieLineEWNull() {
                return this.IsNull(this.tableLot.TieLineEWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTieLineEWNull() {
                this[this.tableLot.TieLineEWColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTieLineDegreeNull() {
                return this.IsNull(this.tableLot.TieLineDegreeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTieLineDegreeNull() {
                this[this.tableLot.TieLineDegreeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTieLineMinuteNull() {
                return this.IsNull(this.tableLot.TieLineMinuteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTieLineMinuteNull() {
                this[this.tableLot.TieLineMinuteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTieLineDistanceNull() {
                return this.IsNull(this.tableLot.TieLineDistanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTieLineDistanceNull() {
                this[this.tableLot.TieLineDistanceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOriginalCheckedByNull() {
                return this.IsNull(this.tableLot.OriginalCheckedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOriginalCheckedByNull() {
                this[this.tableLot.OriginalCheckedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOriginalCheckedDateNull() {
                return this.IsNull(this.tableLot.OriginalCheckedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOriginalCheckedDateNull() {
                this[this.tableLot.OriginalCheckedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOriginalCompletedByNull() {
                return this.IsNull(this.tableLot.OriginalCompletedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOriginalCompletedByNull() {
                this[this.tableLot.OriginalCompletedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOriginalCompletedDateNull() {
                return this.IsNull(this.tableLot.OriginalCompletedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOriginalCompletedDateNull() {
                this[this.tableLot.OriginalCompletedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDuplicateCheckedByNull() {
                return this.IsNull(this.tableLot.DuplicateCheckedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDuplicateCheckedByNull() {
                this[this.tableLot.DuplicateCheckedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDuplicateCheckedDateNull() {
                return this.IsNull(this.tableLot.DuplicateCheckedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDuplicateCheckedDateNull() {
                this[this.tableLot.DuplicateCheckedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFinalVerifiedByNull() {
                return this.IsNull(this.tableLot.FinalVerifiedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFinalVerifiedByNull() {
                this[this.tableLot.FinalVerifiedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFinalCheckedBy1Null() {
                return this.IsNull(this.tableLot.FinalCheckedBy1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFinalCheckedBy1Null() {
                this[this.tableLot.FinalCheckedBy1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFinalCheckedBy2Null() {
                return this.IsNull(this.tableLot.FinalCheckedBy2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFinalCheckedBy2Null() {
                this[this.tableLot.FinalCheckedBy2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemarksNull() {
                return this.IsNull(this.tableLot.RemarksColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemarksNull() {
                this[this.tableLot.RemarksColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLRCNoNull() {
                return this.IsNull(this.tableLot.LRCNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLRCNoNull() {
                this[this.tableLot.LRCNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGENameNull() {
                return this.IsNull(this.tableLot.GENameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGENameNull() {
                this[this.tableLot.GENameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSurveyMonthFromNull() {
                return this.IsNull(this.tableLot.SurveyMonthFromColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSurveyMonthFromNull() {
                this[this.tableLot.SurveyMonthFromColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSurveyDayFromNull() {
                return this.IsNull(this.tableLot.SurveyDayFromColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSurveyDayFromNull() {
                this[this.tableLot.SurveyDayFromColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSurveyYearFromNull() {
                return this.IsNull(this.tableLot.SurveyYearFromColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSurveyYearFromNull() {
                this[this.tableLot.SurveyYearFromColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSurveyMonthToNull() {
                return this.IsNull(this.tableLot.SurveyMonthToColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSurveyMonthToNull() {
                this[this.tableLot.SurveyMonthToColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSurveyDayToNull() {
                return this.IsNull(this.tableLot.SurveyDayToColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSurveyDayToNull() {
                this[this.tableLot.SurveyDayToColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSurveyYearToNull() {
                return this.IsNull(this.tableLot.SurveyYearToColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSurveyYearToNull() {
                this[this.tableLot.SurveyYearToColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDuplicateCompletedByNull() {
                return this.IsNull(this.tableLot.DuplicateCompletedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDuplicateCompletedByNull() {
                this[this.tableLot.DuplicateCompletedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDuplicateCompletedDateNull() {
                return this.IsNull(this.tableLot.DuplicateCompletedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDuplicateCompletedDateNull() {
                this[this.tableLot.DuplicateCompletedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserNameNull() {
                return this.IsNull(this.tableLot.UserNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserNameNull() {
                this[this.tableLot.UserNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateAddedNull() {
                return this.IsNull(this.tableLot.DateAddedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateAddedNull() {
                this[this.tableLot.DateAddedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TechDescRow[] GetTechDescRowsByFK_TechDesc_Lot() {
                if ((this.Table.ChildRelations["FK_TechDesc_Lot"] == null)) {
                    return new TechDescRow[0];
                }
                else {
                    return ((TechDescRow[])(base.GetChildRows(this.Table.ChildRelations["FK_TechDesc_Lot"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LotDataRow[] GetLotDataRowsByFK_LotData_Lot() {
                if ((this.Table.ChildRelations["FK_LotData_Lot"] == null)) {
                    return new LotDataRow[0];
                }
                else {
                    return ((LotDataRow[])(base.GetChildRows(this.Table.ChildRelations["FK_LotData_Lot"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LotDataRow : global::System.Data.DataRow {
            
            private LotDataDataTable tableLotData;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LotDataRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLotData = ((LotDataDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CadSurveyNo {
                get {
                    return ((string)(this[this.tableLotData.CadSurveyNoColumn]));
                }
                set {
                    this[this.tableLotData.CadSurveyNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MunicipalityPsgc {
                get {
                    return ((string)(this[this.tableLotData.MunicipalityPsgcColumn]));
                }
                set {
                    this[this.tableLotData.MunicipalityPsgcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CadCaseNo {
                get {
                    return ((string)(this[this.tableLotData.CadCaseNoColumn]));
                }
                set {
                    this[this.tableLotData.CadCaseNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BarangayPsgc {
                get {
                    return ((string)(this[this.tableLotData.BarangayPsgcColumn]));
                }
                set {
                    this[this.tableLotData.BarangayPsgcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Quadrangle {
                get {
                    return ((string)(this[this.tableLotData.QuadrangleColumn]));
                }
                set {
                    this[this.tableLotData.QuadrangleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionId {
                get {
                    return ((string)(this[this.tableLotData.SectionIdColumn]));
                }
                set {
                    this[this.tableLotData.SectionIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LotNo {
                get {
                    return ((string)(this[this.tableLotData.LotNoColumn]));
                }
                set {
                    this[this.tableLotData.LotNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short Sequence {
                get {
                    return ((short)(this[this.tableLotData.SequenceColumn]));
                }
                set {
                    this[this.tableLotData.SequenceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LocalX {
                get {
                    try {
                        return ((string)(this[this.tableLotData.LocalXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocalX\' in table \'LotData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLotData.LocalXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LocalY {
                get {
                    try {
                        return ((string)(this[this.tableLotData.LocalYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocalY\' in table \'LotData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLotData.LocalYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PtmX {
                get {
                    try {
                        return ((string)(this[this.tableLotData.PtmXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PtmX\' in table \'LotData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLotData.PtmXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PtmY {
                get {
                    try {
                        return ((string)(this[this.tableLotData.PtmYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PtmY\' in table \'LotData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLotData.PtmYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WgsX {
                get {
                    try {
                        return ((string)(this[this.tableLotData.WgsXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WgsX\' in table \'LotData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLotData.WgsXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WgsY {
                get {
                    try {
                        return ((string)(this[this.tableLotData.WgsYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WgsY\' in table \'LotData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLotData.WgsYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PrsX {
                get {
                    try {
                        return ((string)(this[this.tableLotData.PrsXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PrsX\' in table \'LotData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLotData.PrsXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PrsY {
                get {
                    try {
                        return ((string)(this[this.tableLotData.PrsYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PrsY\' in table \'LotData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLotData.PrsYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LotRow LotRowParentByFK_LotData_Lot {
                get {
                    return ((LotRow)(this.GetParentRow(this.Table.ParentRelations["FK_LotData_Lot"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_LotData_Lot"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocalXNull() {
                return this.IsNull(this.tableLotData.LocalXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocalXNull() {
                this[this.tableLotData.LocalXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocalYNull() {
                return this.IsNull(this.tableLotData.LocalYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocalYNull() {
                this[this.tableLotData.LocalYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPtmXNull() {
                return this.IsNull(this.tableLotData.PtmXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPtmXNull() {
                this[this.tableLotData.PtmXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPtmYNull() {
                return this.IsNull(this.tableLotData.PtmYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPtmYNull() {
                this[this.tableLotData.PtmYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWgsXNull() {
                return this.IsNull(this.tableLotData.WgsXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWgsXNull() {
                this[this.tableLotData.WgsXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWgsYNull() {
                return this.IsNull(this.tableLotData.WgsYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWgsYNull() {
                this[this.tableLotData.WgsYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrsXNull() {
                return this.IsNull(this.tableLotData.PrsXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrsXNull() {
                this[this.tableLotData.PrsXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrsYNull() {
                return this.IsNull(this.tableLotData.PrsYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrsYNull() {
                this[this.tableLotData.PrsYColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MunicipalityRow : global::System.Data.DataRow {
            
            private MunicipalityDataTable tableMunicipality;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MunicipalityRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMunicipality = ((MunicipalityDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CadSurveyNo {
                get {
                    return ((string)(this[this.tableMunicipality.CadSurveyNoColumn]));
                }
                set {
                    this[this.tableMunicipality.CadSurveyNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MunicipalityPsgc {
                get {
                    return ((string)(this[this.tableMunicipality.MunicipalityPsgcColumn]));
                }
                set {
                    this[this.tableMunicipality.MunicipalityPsgcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GEOG_NM {
                get {
                    try {
                        return ((string)(this[this.tableMunicipality.GEOG_NMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GEOG_NM\' in table \'Municipality\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMunicipality.GEOG_NMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CadSurveyRow CadSurveyRow {
                get {
                    return ((CadSurveyRow)(this.GetParentRow(this.Table.ParentRelations["FK_CadSurveyMunicipality_CadSurvey"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_CadSurveyMunicipality_CadSurvey"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGEOG_NMNull() {
                return this.IsNull(this.tableMunicipality.GEOG_NMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGEOG_NMNull() {
                this[this.tableMunicipality.GEOG_NMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CaseRow[] GetCaseRows() {
                if ((this.Table.ChildRelations["FK_CadSurveyMunicipalityCase_CadSurveyMunicipality"] == null)) {
                    return new CaseRow[0];
                }
                else {
                    return ((CaseRow[])(base.GetChildRows(this.Table.ChildRelations["FK_CadSurveyMunicipalityCase_CadSurveyMunicipality"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProjectsRow : global::System.Data.DataRow {
            
            private ProjectsDataTable tableProjects;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProjects = ((ProjectsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Project_No {
                get {
                    return ((string)(this[this.tableProjects.Project_NoColumn]));
                }
                set {
                    this[this.tableProjects.Project_NoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Region {
                get {
                    try {
                        return ((string)(this[this.tableProjects.RegionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Region\' in table \'Projects\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjects.RegionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Province {
                get {
                    try {
                        return ((string)(this[this.tableProjects.ProvinceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Province\' in table \'Projects\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjects.ProvinceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Municipality {
                get {
                    try {
                        return ((string)(this[this.tableProjects.MunicipalityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Municipality\' in table \'Projects\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjects.MunicipalityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Ref_Type {
                get {
                    try {
                        return ((string)(this[this.tableProjects.Ref_TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Ref_Type\' in table \'Projects\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjects.Ref_TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Latitude {
                get {
                    try {
                        return ((string)(this[this.tableProjects.LatitudeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Latitude\' in table \'Projects\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjects.LatitudeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Longitude {
                get {
                    try {
                        return ((string)(this[this.tableProjects.LongitudeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Longitude\' in table \'Projects\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjects.LongitudeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Encoder {
                get {
                    try {
                        return ((string)(this[this.tableProjects.EncoderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Encoder\' in table \'Projects\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjects.EncoderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date_Last_Updated {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableProjects.Date_Last_UpdatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date_Last_Updated\' in table \'Projects\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjects.Date_Last_UpdatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Validation_Status {
                get {
                    try {
                        return ((string)(this[this.tableProjects.Validation_StatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Validation_Status\' in table \'Projects\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjects.Validation_StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Validated_By {
                get {
                    try {
                        return ((string)(this[this.tableProjects.Validated_ByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Validated_By\' in table \'Projects\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjects.Validated_ByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Validation_Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableProjects.Validation_DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Validation_Date\' in table \'Projects\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjects.Validation_DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRegionNull() {
                return this.IsNull(this.tableProjects.RegionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRegionNull() {
                this[this.tableProjects.RegionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProvinceNull() {
                return this.IsNull(this.tableProjects.ProvinceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProvinceNull() {
                this[this.tableProjects.ProvinceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMunicipalityNull() {
                return this.IsNull(this.tableProjects.MunicipalityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMunicipalityNull() {
                this[this.tableProjects.MunicipalityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRef_TypeNull() {
                return this.IsNull(this.tableProjects.Ref_TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRef_TypeNull() {
                this[this.tableProjects.Ref_TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLatitudeNull() {
                return this.IsNull(this.tableProjects.LatitudeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLatitudeNull() {
                this[this.tableProjects.LatitudeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLongitudeNull() {
                return this.IsNull(this.tableProjects.LongitudeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLongitudeNull() {
                this[this.tableProjects.LongitudeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEncoderNull() {
                return this.IsNull(this.tableProjects.EncoderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEncoderNull() {
                this[this.tableProjects.EncoderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDate_Last_UpdatedNull() {
                return this.IsNull(this.tableProjects.Date_Last_UpdatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDate_Last_UpdatedNull() {
                this[this.tableProjects.Date_Last_UpdatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValidation_StatusNull() {
                return this.IsNull(this.tableProjects.Validation_StatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValidation_StatusNull() {
                this[this.tableProjects.Validation_StatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValidated_ByNull() {
                return this.IsNull(this.tableProjects.Validated_ByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValidated_ByNull() {
                this[this.tableProjects.Validated_ByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValidation_DateNull() {
                return this.IsNull(this.tableProjects.Validation_DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValidation_DateNull() {
                this[this.tableProjects.Validation_DateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PsgcRow : global::System.Data.DataRow {
            
            private PsgcDataTable tablePsgc;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PsgcRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePsgc = ((PsgcDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PSGC {
                get {
                    return ((string)(this[this.tablePsgc.PSGCColumn]));
                }
                set {
                    this[this.tablePsgc.PSGCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GEOG_NM {
                get {
                    try {
                        return ((string)(this[this.tablePsgc.GEOG_NMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GEOG_NM\' in table \'Psgc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePsgc.GEOG_NMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGEOG_NMNull() {
                return this.IsNull(this.tablePsgc.GEOG_NMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGEOG_NMNull() {
                this[this.tablePsgc.GEOG_NMColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Ref_Type_TableRow : global::System.Data.DataRow {
            
            private Ref_Type_TableDataTable tableRef_Type_Table;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Ref_Type_TableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRef_Type_Table = ((Ref_Type_TableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Ref_Type {
                get {
                    try {
                        return ((string)(this[this.tableRef_Type_Table.Ref_TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Ref_Type\' in table \'Ref_Type_Table\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRef_Type_Table.Ref_TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Ref_Type_No {
                get {
                    try {
                        return ((string)(this[this.tableRef_Type_Table.Ref_Type_NoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Ref_Type_No\' in table \'Ref_Type_Table\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRef_Type_Table.Ref_Type_NoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Project_No {
                get {
                    try {
                        return ((string)(this[this.tableRef_Type_Table.Project_NoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Project_No\' in table \'Ref_Type_Table\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRef_Type_Table.Project_NoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double False_Northing {
                get {
                    try {
                        return ((double)(this[this.tableRef_Type_Table.False_NorthingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'False_Northing\' in table \'Ref_Type_Table\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRef_Type_Table.False_NorthingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double False_Easting {
                get {
                    try {
                        return ((double)(this[this.tableRef_Type_Table.False_EastingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'False_Easting\' in table \'Ref_Type_Table\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRef_Type_Table.False_EastingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double True_Northing {
                get {
                    try {
                        return ((double)(this[this.tableRef_Type_Table.True_NorthingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'True_Northing\' in table \'Ref_Type_Table\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRef_Type_Table.True_NorthingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double True_Easting {
                get {
                    try {
                        return ((double)(this[this.tableRef_Type_Table.True_EastingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'True_Easting\' in table \'Ref_Type_Table\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRef_Type_Table.True_EastingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Latitude {
                get {
                    try {
                        return ((string)(this[this.tableRef_Type_Table.LatitudeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Latitude\' in table \'Ref_Type_Table\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRef_Type_Table.LatitudeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Longitude {
                get {
                    try {
                        return ((string)(this[this.tableRef_Type_Table.LongitudeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Longitude\' in table \'Ref_Type_Table\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRef_Type_Table.LongitudeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRSLong {
                get {
                    try {
                        return ((string)(this[this.tableRef_Type_Table.PRSLongColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRSLong\' in table \'Ref_Type_Table\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRef_Type_Table.PRSLongColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRSLat {
                get {
                    try {
                        return ((string)(this[this.tableRef_Type_Table.PRSLatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRSLat\' in table \'Ref_Type_Table\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRef_Type_Table.PRSLatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRSEllipsoidalHt {
                get {
                    try {
                        return ((string)(this[this.tableRef_Type_Table.PRSEllipsoidalHtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRSEllipsoidalHt\' in table \'Ref_Type_Table\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRef_Type_Table.PRSEllipsoidalHtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WGSLong {
                get {
                    try {
                        return ((string)(this[this.tableRef_Type_Table.WGSLongColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WGSLong\' in table \'Ref_Type_Table\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRef_Type_Table.WGSLongColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WGSLat {
                get {
                    try {
                        return ((string)(this[this.tableRef_Type_Table.WGSLatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WGSLat\' in table \'Ref_Type_Table\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRef_Type_Table.WGSLatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WGSEllipsoidalHt {
                get {
                    try {
                        return ((string)(this[this.tableRef_Type_Table.WGSEllipsoidalHtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WGSEllipsoidalHt\' in table \'Ref_Type_Table\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRef_Type_Table.WGSEllipsoidalHtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sketch {
                get {
                    try {
                        return ((string)(this[this.tableRef_Type_Table.SketchColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sketch\' in table \'Ref_Type_Table\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRef_Type_Table.SketchColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableRef_Type_Table.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'Ref_Type_Table\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRef_Type_Table.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remarks {
                get {
                    try {
                        return ((string)(this[this.tableRef_Type_Table.RemarksColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Remarks\' in table \'Ref_Type_Table\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRef_Type_Table.RemarksColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReferencePoint {
                get {
                    try {
                        return ((string)(this[this.tableRef_Type_Table.ReferencePointColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReferencePoint\' in table \'Ref_Type_Table\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRef_Type_Table.ReferencePointColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRef_TypeNull() {
                return this.IsNull(this.tableRef_Type_Table.Ref_TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRef_TypeNull() {
                this[this.tableRef_Type_Table.Ref_TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRef_Type_NoNull() {
                return this.IsNull(this.tableRef_Type_Table.Ref_Type_NoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRef_Type_NoNull() {
                this[this.tableRef_Type_Table.Ref_Type_NoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProject_NoNull() {
                return this.IsNull(this.tableRef_Type_Table.Project_NoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProject_NoNull() {
                this[this.tableRef_Type_Table.Project_NoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFalse_NorthingNull() {
                return this.IsNull(this.tableRef_Type_Table.False_NorthingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFalse_NorthingNull() {
                this[this.tableRef_Type_Table.False_NorthingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFalse_EastingNull() {
                return this.IsNull(this.tableRef_Type_Table.False_EastingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFalse_EastingNull() {
                this[this.tableRef_Type_Table.False_EastingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTrue_NorthingNull() {
                return this.IsNull(this.tableRef_Type_Table.True_NorthingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTrue_NorthingNull() {
                this[this.tableRef_Type_Table.True_NorthingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTrue_EastingNull() {
                return this.IsNull(this.tableRef_Type_Table.True_EastingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTrue_EastingNull() {
                this[this.tableRef_Type_Table.True_EastingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLatitudeNull() {
                return this.IsNull(this.tableRef_Type_Table.LatitudeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLatitudeNull() {
                this[this.tableRef_Type_Table.LatitudeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLongitudeNull() {
                return this.IsNull(this.tableRef_Type_Table.LongitudeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLongitudeNull() {
                this[this.tableRef_Type_Table.LongitudeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRSLongNull() {
                return this.IsNull(this.tableRef_Type_Table.PRSLongColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRSLongNull() {
                this[this.tableRef_Type_Table.PRSLongColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRSLatNull() {
                return this.IsNull(this.tableRef_Type_Table.PRSLatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRSLatNull() {
                this[this.tableRef_Type_Table.PRSLatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRSEllipsoidalHtNull() {
                return this.IsNull(this.tableRef_Type_Table.PRSEllipsoidalHtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRSEllipsoidalHtNull() {
                this[this.tableRef_Type_Table.PRSEllipsoidalHtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWGSLongNull() {
                return this.IsNull(this.tableRef_Type_Table.WGSLongColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWGSLongNull() {
                this[this.tableRef_Type_Table.WGSLongColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWGSLatNull() {
                return this.IsNull(this.tableRef_Type_Table.WGSLatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWGSLatNull() {
                this[this.tableRef_Type_Table.WGSLatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWGSEllipsoidalHtNull() {
                return this.IsNull(this.tableRef_Type_Table.WGSEllipsoidalHtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWGSEllipsoidalHtNull() {
                this[this.tableRef_Type_Table.WGSEllipsoidalHtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSketchNull() {
                return this.IsNull(this.tableRef_Type_Table.SketchColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSketchNull() {
                this[this.tableRef_Type_Table.SketchColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableRef_Type_Table.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableRef_Type_Table.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemarksNull() {
                return this.IsNull(this.tableRef_Type_Table.RemarksColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemarksNull() {
                this[this.tableRef_Type_Table.RemarksColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReferencePointNull() {
                return this.IsNull(this.tableRef_Type_Table.ReferencePointColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReferencePointNull() {
                this[this.tableRef_Type_Table.ReferencePointColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SectionRow : global::System.Data.DataRow {
            
            private SectionDataTable tableSection;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SectionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSection = ((SectionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CadSurveyNo {
                get {
                    return ((string)(this[this.tableSection.CadSurveyNoColumn]));
                }
                set {
                    this[this.tableSection.CadSurveyNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MunicipalityPsgc {
                get {
                    return ((string)(this[this.tableSection.MunicipalityPsgcColumn]));
                }
                set {
                    this[this.tableSection.MunicipalityPsgcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CadCaseNo {
                get {
                    return ((string)(this[this.tableSection.CadCaseNoColumn]));
                }
                set {
                    this[this.tableSection.CadCaseNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BarangayPsgc {
                get {
                    return ((string)(this[this.tableSection.BarangayPsgcColumn]));
                }
                set {
                    this[this.tableSection.BarangayPsgcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionId {
                get {
                    return ((string)(this[this.tableSection.SectionIdColumn]));
                }
                set {
                    this[this.tableSection.SectionIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Quadrangle {
                get {
                    return ((string)(this[this.tableSection.QuadrangleColumn]));
                }
                set {
                    this[this.tableSection.QuadrangleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Scale {
                get {
                    try {
                        return ((int)(this[this.tableSection.ScaleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Scale\' in table \'Section\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSection.ScaleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuadrangleRow QuadrangleRowParent {
                get {
                    return ((QuadrangleRow)(this.GetParentRow(this.Table.ParentRelations["FK_Section_Quadrangle"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Section_Quadrangle"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScaleNull() {
                return this.IsNull(this.tableSection.ScaleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScaleNull() {
                this[this.tableSection.ScaleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LotRow[] GetLotRowsByFK_Lot_Section() {
                if ((this.Table.ChildRelations["FK_Lot_Section"] == null)) {
                    return new LotRow[0];
                }
                else {
                    return ((LotRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Lot_Section"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TechDescRow : global::System.Data.DataRow {
            
            private TechDescDataTable tableTechDesc;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TechDescRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTechDesc = ((TechDescDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CadSurveyNo {
                get {
                    return ((string)(this[this.tableTechDesc.CadSurveyNoColumn]));
                }
                set {
                    this[this.tableTechDesc.CadSurveyNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MunicipalityPsgc {
                get {
                    return ((string)(this[this.tableTechDesc.MunicipalityPsgcColumn]));
                }
                set {
                    this[this.tableTechDesc.MunicipalityPsgcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CadCaseNo {
                get {
                    return ((string)(this[this.tableTechDesc.CadCaseNoColumn]));
                }
                set {
                    this[this.tableTechDesc.CadCaseNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BarangayPsgc {
                get {
                    return ((string)(this[this.tableTechDesc.BarangayPsgcColumn]));
                }
                set {
                    this[this.tableTechDesc.BarangayPsgcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Quadrangle {
                get {
                    return ((string)(this[this.tableTechDesc.QuadrangleColumn]));
                }
                set {
                    this[this.tableTechDesc.QuadrangleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionId {
                get {
                    return ((string)(this[this.tableTechDesc.SectionIdColumn]));
                }
                set {
                    this[this.tableTechDesc.SectionIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LotNo {
                get {
                    return ((string)(this[this.tableTechDesc.LotNoColumn]));
                }
                set {
                    this[this.tableTechDesc.LotNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short FromCorner {
                get {
                    return ((short)(this[this.tableTechDesc.FromCornerColumn]));
                }
                set {
                    this[this.tableTechDesc.FromCornerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ToCorner {
                get {
                    try {
                        return ((short)(this[this.tableTechDesc.ToCornerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToCorner\' in table \'TechDesc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTechDesc.ToCornerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Distance {
                get {
                    try {
                        return ((decimal)(this[this.tableTechDesc.DistanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Distance\' in table \'TechDesc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTechDesc.DistanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NS {
                get {
                    try {
                        return ((string)(this[this.tableTechDesc.NSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NS\' in table \'TechDesc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTechDesc.NSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Degree {
                get {
                    try {
                        return ((int)(this[this.tableTechDesc.DegreeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Degree\' in table \'TechDesc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTechDesc.DegreeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Minute {
                get {
                    try {
                        return ((int)(this[this.tableTechDesc.MinuteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Minute\' in table \'TechDesc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTechDesc.MinuteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EW {
                get {
                    try {
                        return ((string)(this[this.tableTechDesc.EWColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EW\' in table \'TechDesc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTechDesc.EWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LotRow LotRowParentByFK_TechDesc_Lot {
                get {
                    return ((LotRow)(this.GetParentRow(this.Table.ParentRelations["FK_TechDesc_Lot"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_TechDesc_Lot"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToCornerNull() {
                return this.IsNull(this.tableTechDesc.ToCornerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToCornerNull() {
                this[this.tableTechDesc.ToCornerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistanceNull() {
                return this.IsNull(this.tableTechDesc.DistanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistanceNull() {
                this[this.tableTechDesc.DistanceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNSNull() {
                return this.IsNull(this.tableTechDesc.NSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNSNull() {
                this[this.tableTechDesc.NSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDegreeNull() {
                return this.IsNull(this.tableTechDesc.DegreeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDegreeNull() {
                this[this.tableTechDesc.DegreeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinuteNull() {
                return this.IsNull(this.tableTechDesc.MinuteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinuteNull() {
                this[this.tableTechDesc.MinuteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEWNull() {
                return this.IsNull(this.tableTechDesc.EWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEWNull() {
                this[this.tableTechDesc.EWColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UsersRow : global::System.Data.DataRow {
            
            private UsersDataTable tableUsers;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UsersRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUsers = ((UsersDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Username {
                get {
                    return ((string)(this[this.tableUsers.UsernameColumn]));
                }
                set {
                    this[this.tableUsers.UsernameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Password {
                get {
                    try {
                        return ((string)(this[this.tableUsers.PasswordColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Password\' in table \'Users\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsers.PasswordColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPasswordNull() {
                return this.IsNull(this.tableUsers.PasswordColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPasswordNull() {
                this[this.tableUsers.PasswordColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class QuadrangleRow : global::System.Data.DataRow {
            
            private QuadrangleDataTable tableQuadrangle;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal QuadrangleRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableQuadrangle = ((QuadrangleDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CadSurveyNo {
                get {
                    return ((string)(this[this.tableQuadrangle.CadSurveyNoColumn]));
                }
                set {
                    this[this.tableQuadrangle.CadSurveyNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MunicipalityPsgc {
                get {
                    return ((string)(this[this.tableQuadrangle.MunicipalityPsgcColumn]));
                }
                set {
                    this[this.tableQuadrangle.MunicipalityPsgcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CadCaseNo {
                get {
                    return ((string)(this[this.tableQuadrangle.CadCaseNoColumn]));
                }
                set {
                    this[this.tableQuadrangle.CadCaseNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BarangayPsgc {
                get {
                    return ((string)(this[this.tableQuadrangle.BarangayPsgcColumn]));
                }
                set {
                    this[this.tableQuadrangle.BarangayPsgcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Quadrangle {
                get {
                    return ((string)(this[this.tableQuadrangle.QuadrangleColumn]));
                }
                set {
                    this[this.tableQuadrangle.QuadrangleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BarangayRow BarangayRowParent {
                get {
                    return ((BarangayRow)(this.GetParentRow(this.Table.ParentRelations["Barangay_Quadrangle"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Barangay_Quadrangle"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SectionRow[] GetSectionRows() {
                if ((this.Table.ChildRelations["FK_Section_Quadrangle"] == null)) {
                    return new SectionRow[0];
                }
                else {
                    return ((SectionRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Section_Quadrangle"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Ref_Type_Table2Row : global::System.Data.DataRow {
            
            private Ref_Type_Table2DataTable tableRef_Type_Table2;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Ref_Type_Table2Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRef_Type_Table2 = ((Ref_Type_Table2DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Ref_Type {
                get {
                    try {
                        return ((string)(this[this.tableRef_Type_Table2.Ref_TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Ref_Type\' in table \'Ref_Type_Table2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRef_Type_Table2.Ref_TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Ref_Type_No {
                get {
                    try {
                        return ((string)(this[this.tableRef_Type_Table2.Ref_Type_NoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Ref_Type_No\' in table \'Ref_Type_Table2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRef_Type_Table2.Ref_Type_NoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Project_No {
                get {
                    try {
                        return ((string)(this[this.tableRef_Type_Table2.Project_NoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Project_No\' in table \'Ref_Type_Table2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRef_Type_Table2.Project_NoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double False_Northing {
                get {
                    try {
                        return ((double)(this[this.tableRef_Type_Table2.False_NorthingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'False_Northing\' in table \'Ref_Type_Table2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRef_Type_Table2.False_NorthingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double False_Easting {
                get {
                    try {
                        return ((double)(this[this.tableRef_Type_Table2.False_EastingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'False_Easting\' in table \'Ref_Type_Table2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRef_Type_Table2.False_EastingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double True_Northing {
                get {
                    try {
                        return ((double)(this[this.tableRef_Type_Table2.True_NorthingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'True_Northing\' in table \'Ref_Type_Table2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRef_Type_Table2.True_NorthingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double True_Easting {
                get {
                    try {
                        return ((double)(this[this.tableRef_Type_Table2.True_EastingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'True_Easting\' in table \'Ref_Type_Table2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRef_Type_Table2.True_EastingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PTM_PRS92_Northing {
                get {
                    try {
                        return ((decimal)(this[this.tableRef_Type_Table2.PTM_PRS92_NorthingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PTM_PRS92_Northing\' in table \'Ref_Type_Table2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRef_Type_Table2.PTM_PRS92_NorthingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PTM_PRS92_Easting {
                get {
                    try {
                        return ((decimal)(this[this.tableRef_Type_Table2.PTM_PRS92_EastingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PTM_PRS92_Easting\' in table \'Ref_Type_Table2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRef_Type_Table2.PTM_PRS92_EastingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Latitude {
                get {
                    try {
                        return ((string)(this[this.tableRef_Type_Table2.LatitudeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Latitude\' in table \'Ref_Type_Table2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRef_Type_Table2.LatitudeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Longitude {
                get {
                    try {
                        return ((string)(this[this.tableRef_Type_Table2.LongitudeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Longitude\' in table \'Ref_Type_Table2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRef_Type_Table2.LongitudeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRSLong {
                get {
                    try {
                        return ((string)(this[this.tableRef_Type_Table2.PRSLongColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRSLong\' in table \'Ref_Type_Table2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRef_Type_Table2.PRSLongColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRSLat {
                get {
                    try {
                        return ((string)(this[this.tableRef_Type_Table2.PRSLatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRSLat\' in table \'Ref_Type_Table2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRef_Type_Table2.PRSLatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PRSEllipsoidalHt {
                get {
                    try {
                        return ((double)(this[this.tableRef_Type_Table2.PRSEllipsoidalHtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRSEllipsoidalHt\' in table \'Ref_Type_Table2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRef_Type_Table2.PRSEllipsoidalHtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WGSLong {
                get {
                    try {
                        return ((string)(this[this.tableRef_Type_Table2.WGSLongColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WGSLong\' in table \'Ref_Type_Table2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRef_Type_Table2.WGSLongColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WGSLat {
                get {
                    try {
                        return ((string)(this[this.tableRef_Type_Table2.WGSLatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WGSLat\' in table \'Ref_Type_Table2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRef_Type_Table2.WGSLatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double WGSEllipsoidalHt {
                get {
                    try {
                        return ((double)(this[this.tableRef_Type_Table2.WGSEllipsoidalHtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WGSEllipsoidalHt\' in table \'Ref_Type_Table2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRef_Type_Table2.WGSEllipsoidalHtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] Sketch {
                get {
                    try {
                        return ((byte[])(this[this.tableRef_Type_Table2.SketchColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sketch\' in table \'Ref_Type_Table2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRef_Type_Table2.SketchColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableRef_Type_Table2.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'Ref_Type_Table2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRef_Type_Table2.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remarks {
                get {
                    try {
                        return ((string)(this[this.tableRef_Type_Table2.RemarksColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Remarks\' in table \'Ref_Type_Table2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRef_Type_Table2.RemarksColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableRef_Type_Table2.StatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'Ref_Type_Table2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRef_Type_Table2.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRef_TypeNull() {
                return this.IsNull(this.tableRef_Type_Table2.Ref_TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRef_TypeNull() {
                this[this.tableRef_Type_Table2.Ref_TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRef_Type_NoNull() {
                return this.IsNull(this.tableRef_Type_Table2.Ref_Type_NoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRef_Type_NoNull() {
                this[this.tableRef_Type_Table2.Ref_Type_NoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProject_NoNull() {
                return this.IsNull(this.tableRef_Type_Table2.Project_NoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProject_NoNull() {
                this[this.tableRef_Type_Table2.Project_NoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFalse_NorthingNull() {
                return this.IsNull(this.tableRef_Type_Table2.False_NorthingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFalse_NorthingNull() {
                this[this.tableRef_Type_Table2.False_NorthingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFalse_EastingNull() {
                return this.IsNull(this.tableRef_Type_Table2.False_EastingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFalse_EastingNull() {
                this[this.tableRef_Type_Table2.False_EastingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTrue_NorthingNull() {
                return this.IsNull(this.tableRef_Type_Table2.True_NorthingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTrue_NorthingNull() {
                this[this.tableRef_Type_Table2.True_NorthingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTrue_EastingNull() {
                return this.IsNull(this.tableRef_Type_Table2.True_EastingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTrue_EastingNull() {
                this[this.tableRef_Type_Table2.True_EastingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPTM_PRS92_NorthingNull() {
                return this.IsNull(this.tableRef_Type_Table2.PTM_PRS92_NorthingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPTM_PRS92_NorthingNull() {
                this[this.tableRef_Type_Table2.PTM_PRS92_NorthingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPTM_PRS92_EastingNull() {
                return this.IsNull(this.tableRef_Type_Table2.PTM_PRS92_EastingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPTM_PRS92_EastingNull() {
                this[this.tableRef_Type_Table2.PTM_PRS92_EastingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLatitudeNull() {
                return this.IsNull(this.tableRef_Type_Table2.LatitudeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLatitudeNull() {
                this[this.tableRef_Type_Table2.LatitudeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLongitudeNull() {
                return this.IsNull(this.tableRef_Type_Table2.LongitudeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLongitudeNull() {
                this[this.tableRef_Type_Table2.LongitudeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRSLongNull() {
                return this.IsNull(this.tableRef_Type_Table2.PRSLongColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRSLongNull() {
                this[this.tableRef_Type_Table2.PRSLongColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRSLatNull() {
                return this.IsNull(this.tableRef_Type_Table2.PRSLatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRSLatNull() {
                this[this.tableRef_Type_Table2.PRSLatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRSEllipsoidalHtNull() {
                return this.IsNull(this.tableRef_Type_Table2.PRSEllipsoidalHtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRSEllipsoidalHtNull() {
                this[this.tableRef_Type_Table2.PRSEllipsoidalHtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWGSLongNull() {
                return this.IsNull(this.tableRef_Type_Table2.WGSLongColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWGSLongNull() {
                this[this.tableRef_Type_Table2.WGSLongColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWGSLatNull() {
                return this.IsNull(this.tableRef_Type_Table2.WGSLatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWGSLatNull() {
                this[this.tableRef_Type_Table2.WGSLatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWGSEllipsoidalHtNull() {
                return this.IsNull(this.tableRef_Type_Table2.WGSEllipsoidalHtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWGSEllipsoidalHtNull() {
                this[this.tableRef_Type_Table2.WGSEllipsoidalHtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSketchNull() {
                return this.IsNull(this.tableRef_Type_Table2.SketchColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSketchNull() {
                this[this.tableRef_Type_Table2.SketchColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableRef_Type_Table2.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableRef_Type_Table2.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemarksNull() {
                return this.IsNull(this.tableRef_Type_Table2.RemarksColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemarksNull() {
                this[this.tableRef_Type_Table2.RemarksColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableRef_Type_Table2.StatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableRef_Type_Table2.StatusColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BarangayRowChangeEvent : global::System.EventArgs {
            
            private BarangayRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BarangayRowChangeEvent(BarangayRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BarangayRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CadSurveyRowChangeEvent : global::System.EventArgs {
            
            private CadSurveyRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CadSurveyRowChangeEvent(CadSurveyRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CadSurveyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CaseRowChangeEvent : global::System.EventArgs {
            
            private CaseRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CaseRowChangeEvent(CaseRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CaseRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LotRowChangeEvent : global::System.EventArgs {
            
            private LotRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LotRowChangeEvent(LotRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LotRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LotDataRowChangeEvent : global::System.EventArgs {
            
            private LotDataRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LotDataRowChangeEvent(LotDataRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LotDataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MunicipalityRowChangeEvent : global::System.EventArgs {
            
            private MunicipalityRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MunicipalityRowChangeEvent(MunicipalityRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MunicipalityRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProjectsRowChangeEvent : global::System.EventArgs {
            
            private ProjectsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectsRowChangeEvent(ProjectsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PsgcRowChangeEvent : global::System.EventArgs {
            
            private PsgcRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PsgcRowChangeEvent(PsgcRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PsgcRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Ref_Type_TableRowChangeEvent : global::System.EventArgs {
            
            private Ref_Type_TableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ref_Type_TableRowChangeEvent(Ref_Type_TableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ref_Type_TableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SectionRowChangeEvent : global::System.EventArgs {
            
            private SectionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SectionRowChangeEvent(SectionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SectionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TechDescRowChangeEvent : global::System.EventArgs {
            
            private TechDescRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TechDescRowChangeEvent(TechDescRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TechDescRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UsersRowChangeEvent : global::System.EventArgs {
            
            private UsersRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRowChangeEvent(UsersRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class QuadrangleRowChangeEvent : global::System.EventArgs {
            
            private QuadrangleRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuadrangleRowChangeEvent(QuadrangleRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuadrangleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Ref_Type_Table2RowChangeEvent : global::System.EventArgs {
            
            private Ref_Type_Table2Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ref_Type_Table2RowChangeEvent(Ref_Type_Table2Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ref_Type_Table2Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace LSDMS.lsdmsDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class BarangayTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BarangayTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Barangay";
            tableMapping.ColumnMappings.Add("CadSurveyNo", "CadSurveyNo");
            tableMapping.ColumnMappings.Add("MunicipalityPsgc", "MunicipalityPsgc");
            tableMapping.ColumnMappings.Add("CadCaseNo", "CadCaseNo");
            tableMapping.ColumnMappings.Add("BarangayPsgc", "BarangayPsgc");
            tableMapping.ColumnMappings.Add("GEOG_NM", "GEOG_NM");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Barangay] WHERE (([CadSurveyNo] = @Original_CadSurveyNo) AND (" +
                "[MunicipalityPsgc] = @Original_MunicipalityPsgc) AND ([CadCaseNo] = @Original_Ca" +
                "dCaseNo) AND ([BarangayPsgc] = @Original_BarangayPsgc))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CadSurveyNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MunicipalityPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MunicipalityPsgc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CadCaseNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadCaseNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BarangayPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BarangayPsgc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Barangay] ([CadSurveyNo], [MunicipalityPsgc], [CadCaseNo], [BarangayPsgc]) VALUES (@CadSurveyNo, @MunicipalityPsgc, @CadCaseNo, @BarangayPsgc);
SELECT CadSurveyNo, MunicipalityPsgc, CadCaseNo, BarangayPsgc FROM Barangay WHERE (BarangayPsgc = @BarangayPsgc) AND (CadCaseNo = @CadCaseNo) AND (CadSurveyNo = @CadSurveyNo) AND (MunicipalityPsgc = @MunicipalityPsgc)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadSurveyNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MunicipalityPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MunicipalityPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadCaseNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadCaseNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BarangayPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BarangayPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Barangay] SET [CadSurveyNo] = @CadSurveyNo, [MunicipalityPsgc] = @MunicipalityPsgc, [CadCaseNo] = @CadCaseNo, [BarangayPsgc] = @BarangayPsgc WHERE (([CadSurveyNo] = @Original_CadSurveyNo) AND ([MunicipalityPsgc] = @Original_MunicipalityPsgc) AND ([CadCaseNo] = @Original_CadCaseNo) AND ([BarangayPsgc] = @Original_BarangayPsgc));
SELECT CadSurveyNo, MunicipalityPsgc, CadCaseNo, BarangayPsgc FROM Barangay WHERE (BarangayPsgc = @BarangayPsgc) AND (CadCaseNo = @CadCaseNo) AND (CadSurveyNo = @CadSurveyNo) AND (MunicipalityPsgc = @MunicipalityPsgc)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadSurveyNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MunicipalityPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MunicipalityPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadCaseNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadCaseNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BarangayPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BarangayPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CadSurveyNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MunicipalityPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MunicipalityPsgc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CadCaseNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadCaseNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BarangayPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BarangayPsgc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LSDMS.Properties.Settings.Default.lsdmsConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        Barangay.CadSurveyNo, Barangay.MunicipalityPsgc, Barangay.CadCaseNo" +
                ", Barangay.BarangayPsgc, psgc.name AS GEOG_NM\r\nFROM            Barangay INNER JO" +
                "IN\r\n                         psgc ON Barangay.BarangayPsgc = psgc.psgc_cd";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT      Barangay.CadSurveyNo, Barangay.MunicipalityPsgc, Barangay.CadCaseNo, Barangay.BarangayPsgc, CASE WHEN psgc.name IS NULL 
                        THEN '<Unknown>' ELSE psgc.name END AS GEOG_NM
FROM          Barangay LEFT OUTER JOIN
                        psgc ON Barangay.BarangayPsgc = psgc.psgc_cd
WHERE      (Barangay.CadSurveyNo = @CadSurveyNo) AND (Barangay.MunicipalityPsgc = @MunicipalityPsgc) AND (Barangay.CadCaseNo = @CadCaseNo)
ORDER BY GEOG_NM";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadSurveyNo", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MunicipalityPsgc", global::System.Data.SqlDbType.NChar, 9, global::System.Data.ParameterDirection.Input, 0, 0, "MunicipalityPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadCaseNo", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "CadCaseNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(lsdmsDataSet.BarangayDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual lsdmsDataSet.BarangayDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            lsdmsDataSet.BarangayDataTable dataTable = new lsdmsDataSet.BarangayDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByCaseNo(lsdmsDataSet.BarangayDataTable dataTable, string CadSurveyNo, string MunicipalityPsgc, string CadCaseNo) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((CadSurveyNo == null)) {
                throw new global::System.ArgumentNullException("CadSurveyNo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(CadSurveyNo));
            }
            if ((MunicipalityPsgc == null)) {
                throw new global::System.ArgumentNullException("MunicipalityPsgc");
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(MunicipalityPsgc));
            }
            if ((CadCaseNo == null)) {
                throw new global::System.ArgumentNullException("CadCaseNo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(CadCaseNo));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual lsdmsDataSet.BarangayDataTable GetDataByCaseNo(string CadSurveyNo, string MunicipalityPsgc, string CadCaseNo) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((CadSurveyNo == null)) {
                throw new global::System.ArgumentNullException("CadSurveyNo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(CadSurveyNo));
            }
            if ((MunicipalityPsgc == null)) {
                throw new global::System.ArgumentNullException("MunicipalityPsgc");
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(MunicipalityPsgc));
            }
            if ((CadCaseNo == null)) {
                throw new global::System.ArgumentNullException("CadCaseNo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(CadCaseNo));
            }
            lsdmsDataSet.BarangayDataTable dataTable = new lsdmsDataSet.BarangayDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(lsdmsDataSet.BarangayDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(lsdmsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Barangay");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_CadSurveyNo, string Original_MunicipalityPsgc, string Original_CadCaseNo, string Original_BarangayPsgc) {
            if ((Original_CadSurveyNo == null)) {
                throw new global::System.ArgumentNullException("Original_CadSurveyNo");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_CadSurveyNo));
            }
            if ((Original_MunicipalityPsgc == null)) {
                throw new global::System.ArgumentNullException("Original_MunicipalityPsgc");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_MunicipalityPsgc));
            }
            if ((Original_CadCaseNo == null)) {
                throw new global::System.ArgumentNullException("Original_CadCaseNo");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_CadCaseNo));
            }
            if ((Original_BarangayPsgc == null)) {
                throw new global::System.ArgumentNullException("Original_BarangayPsgc");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_BarangayPsgc));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string CadSurveyNo, string MunicipalityPsgc, string CadCaseNo, string BarangayPsgc) {
            if ((CadSurveyNo == null)) {
                throw new global::System.ArgumentNullException("CadSurveyNo");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(CadSurveyNo));
            }
            if ((MunicipalityPsgc == null)) {
                throw new global::System.ArgumentNullException("MunicipalityPsgc");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(MunicipalityPsgc));
            }
            if ((CadCaseNo == null)) {
                throw new global::System.ArgumentNullException("CadCaseNo");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(CadCaseNo));
            }
            if ((BarangayPsgc == null)) {
                throw new global::System.ArgumentNullException("BarangayPsgc");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(BarangayPsgc));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string CadSurveyNo, string MunicipalityPsgc, string CadCaseNo, string BarangayPsgc, string Original_CadSurveyNo, string Original_MunicipalityPsgc, string Original_CadCaseNo, string Original_BarangayPsgc) {
            if ((CadSurveyNo == null)) {
                throw new global::System.ArgumentNullException("CadSurveyNo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(CadSurveyNo));
            }
            if ((MunicipalityPsgc == null)) {
                throw new global::System.ArgumentNullException("MunicipalityPsgc");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(MunicipalityPsgc));
            }
            if ((CadCaseNo == null)) {
                throw new global::System.ArgumentNullException("CadCaseNo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(CadCaseNo));
            }
            if ((BarangayPsgc == null)) {
                throw new global::System.ArgumentNullException("BarangayPsgc");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(BarangayPsgc));
            }
            if ((Original_CadSurveyNo == null)) {
                throw new global::System.ArgumentNullException("Original_CadSurveyNo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_CadSurveyNo));
            }
            if ((Original_MunicipalityPsgc == null)) {
                throw new global::System.ArgumentNullException("Original_MunicipalityPsgc");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_MunicipalityPsgc));
            }
            if ((Original_CadCaseNo == null)) {
                throw new global::System.ArgumentNullException("Original_CadCaseNo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_CadCaseNo));
            }
            if ((Original_BarangayPsgc == null)) {
                throw new global::System.ArgumentNullException("Original_BarangayPsgc");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_BarangayPsgc));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Original_CadSurveyNo, string Original_MunicipalityPsgc, string Original_CadCaseNo, string Original_BarangayPsgc) {
            return this.Update(Original_CadSurveyNo, Original_MunicipalityPsgc, Original_CadCaseNo, Original_BarangayPsgc, Original_CadSurveyNo, Original_MunicipalityPsgc, Original_CadCaseNo, Original_BarangayPsgc);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CadSurveyTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CadSurveyTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CadSurvey";
            tableMapping.ColumnMappings.Add("CadSurveyNo", "CadSurveyNo");
            tableMapping.ColumnMappings.Add("Island", "Island");
            tableMapping.ColumnMappings.Add("RegionPsgc", "RegionPsgc");
            tableMapping.ColumnMappings.Add("ProvincePsgc", "ProvincePsgc");
            tableMapping.ColumnMappings.Add("CoordinateSystem", "CoordinateSystem");
            tableMapping.ColumnMappings.Add("SurveySymbolNo", "SurveySymbolNo");
            tableMapping.ColumnMappings.Add("PreviousSurveyNo", "PreviousSurveyNo");
            tableMapping.ColumnMappings.Add("ApprovedTotalMunicipality", "ApprovedTotalMunicipality");
            tableMapping.ColumnMappings.Add("ApprovedTotalCity", "ApprovedTotalCity");
            tableMapping.ColumnMappings.Add("ApprovedTotalBarangay", "ApprovedTotalBarangay");
            tableMapping.ColumnMappings.Add("ApprovedTotalLot", "ApprovedTotalLot");
            tableMapping.ColumnMappings.Add("ApprovedTotalAreaHectares", "ApprovedTotalAreaHectares");
            tableMapping.ColumnMappings.Add("ApprovalRemarks", "ApprovalRemarks");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [CadSurvey] WHERE (([CadSurveyNo] = @Original_CadSurveyNo) AND ((@IsNull_Island = 1 AND [Island] IS NULL) OR ([Island] = @Original_Island)) AND ((@IsNull_RegionPsgc = 1 AND [RegionPsgc] IS NULL) OR ([RegionPsgc] = @Original_RegionPsgc)) AND ((@IsNull_ProvincePsgc = 1 AND [ProvincePsgc] IS NULL) OR ([ProvincePsgc] = @Original_ProvincePsgc)) AND ((@IsNull_CoordinateSystem = 1 AND [CoordinateSystem] IS NULL) OR ([CoordinateSystem] = @Original_CoordinateSystem)) AND ((@IsNull_SurveySymbolNo = 1 AND [SurveySymbolNo] IS NULL) OR ([SurveySymbolNo] = @Original_SurveySymbolNo)) AND ((@IsNull_PreviousSurveyNo = 1 AND [PreviousSurveyNo] IS NULL) OR ([PreviousSurveyNo] = @Original_PreviousSurveyNo)) AND ((@IsNull_ApprovedTotalMunicipality = 1 AND [ApprovedTotalMunicipality] IS NULL) OR ([ApprovedTotalMunicipality] = @Original_ApprovedTotalMunicipality)) AND ((@IsNull_ApprovedTotalCity = 1 AND [ApprovedTotalCity] IS NULL) OR ([ApprovedTotalCity] = @Original_ApprovedTotalCity)) AND ((@IsNull_ApprovedTotalBarangay = 1 AND [ApprovedTotalBarangay] IS NULL) OR ([ApprovedTotalBarangay] = @Original_ApprovedTotalBarangay)) AND ((@IsNull_ApprovedTotalLot = 1 AND [ApprovedTotalLot] IS NULL) OR ([ApprovedTotalLot] = @Original_ApprovedTotalLot)) AND ((@IsNull_ApprovedTotalAreaHectares = 1 AND [ApprovedTotalAreaHectares] IS NULL) OR ([ApprovedTotalAreaHectares] = @Original_ApprovedTotalAreaHectares)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CadSurveyNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Island", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Island", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Island", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Island", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RegionPsgc", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RegionPsgc", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RegionPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RegionPsgc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ProvincePsgc", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProvincePsgc", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProvincePsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProvincePsgc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CoordinateSystem", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CoordinateSystem", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CoordinateSystem", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CoordinateSystem", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SurveySymbolNo", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SurveySymbolNo", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SurveySymbolNo", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SurveySymbolNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PreviousSurveyNo", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PreviousSurveyNo", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PreviousSurveyNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PreviousSurveyNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ApprovedTotalMunicipality", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedTotalMunicipality", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ApprovedTotalMunicipality", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedTotalMunicipality", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ApprovedTotalCity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedTotalCity", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ApprovedTotalCity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedTotalCity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ApprovedTotalBarangay", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedTotalBarangay", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ApprovedTotalBarangay", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedTotalBarangay", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ApprovedTotalLot", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedTotalLot", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ApprovedTotalLot", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedTotalLot", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ApprovedTotalAreaHectares", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedTotalAreaHectares", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ApprovedTotalAreaHectares", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 8, 2, "ApprovedTotalAreaHectares", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [CadSurvey] ([CadSurveyNo], [Island], [RegionPsgc], [ProvincePsgc], [CoordinateSystem], [SurveySymbolNo], [PreviousSurveyNo], [ApprovedTotalMunicipality], [ApprovedTotalCity], [ApprovedTotalBarangay], [ApprovedTotalLot], [ApprovedTotalAreaHectares], [ApprovalRemarks]) VALUES (@CadSurveyNo, @Island, @RegionPsgc, @ProvincePsgc, @CoordinateSystem, @SurveySymbolNo, @PreviousSurveyNo, @ApprovedTotalMunicipality, @ApprovedTotalCity, @ApprovedTotalBarangay, @ApprovedTotalLot, @ApprovedTotalAreaHectares, @ApprovalRemarks);
SELECT CadSurveyNo, Island, RegionPsgc, ProvincePsgc, CoordinateSystem, SurveySymbolNo, PreviousSurveyNo, ApprovedTotalMunicipality, ApprovedTotalCity, ApprovedTotalBarangay, ApprovedTotalLot, ApprovedTotalAreaHectares, ApprovalRemarks FROM CadSurvey WHERE (CadSurveyNo = @CadSurveyNo)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadSurveyNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Island", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Island", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RegionPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RegionPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProvincePsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProvincePsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CoordinateSystem", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CoordinateSystem", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SurveySymbolNo", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SurveySymbolNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PreviousSurveyNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PreviousSurveyNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ApprovedTotalMunicipality", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedTotalMunicipality", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ApprovedTotalCity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedTotalCity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ApprovedTotalBarangay", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedTotalBarangay", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ApprovedTotalLot", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedTotalLot", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ApprovedTotalAreaHectares", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 8, 2, "ApprovedTotalAreaHectares", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ApprovalRemarks", global::System.Data.SqlDbType.Text, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovalRemarks", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [CadSurvey] SET [CadSurveyNo] = @CadSurveyNo, [Island] = @Island, [RegionP" +
                "sgc] = @RegionPsgc, [ProvincePsgc] = @ProvincePsgc, [CoordinateSystem] = @Coordi" +
                "nateSystem, [SurveySymbolNo] = @SurveySymbolNo, [PreviousSurveyNo] = @PreviousSu" +
                "rveyNo, [ApprovedTotalMunicipality] = @ApprovedTotalMunicipality, [ApprovedTotal" +
                "City] = @ApprovedTotalCity, [ApprovedTotalBarangay] = @ApprovedTotalBarangay, [A" +
                "pprovedTotalLot] = @ApprovedTotalLot, [ApprovedTotalAreaHectares] = @ApprovedTot" +
                "alAreaHectares, [ApprovalRemarks] = @ApprovalRemarks WHERE (([CadSurveyNo] = @Or" +
                "iginal_CadSurveyNo) AND ((@IsNull_Island = 1 AND [Island] IS NULL) OR ([Island] " +
                "= @Original_Island)) AND ((@IsNull_RegionPsgc = 1 AND [RegionPsgc] IS NULL) OR (" +
                "[RegionPsgc] = @Original_RegionPsgc)) AND ((@IsNull_ProvincePsgc = 1 AND [Provin" +
                "cePsgc] IS NULL) OR ([ProvincePsgc] = @Original_ProvincePsgc)) AND ((@IsNull_Coo" +
                "rdinateSystem = 1 AND [CoordinateSystem] IS NULL) OR ([CoordinateSystem] = @Orig" +
                "inal_CoordinateSystem)) AND ((@IsNull_SurveySymbolNo = 1 AND [SurveySymbolNo] IS" +
                " NULL) OR ([SurveySymbolNo] = @Original_SurveySymbolNo)) AND ((@IsNull_PreviousS" +
                "urveyNo = 1 AND [PreviousSurveyNo] IS NULL) OR ([PreviousSurveyNo] = @Original_P" +
                "reviousSurveyNo)) AND ((@IsNull_ApprovedTotalMunicipality = 1 AND [ApprovedTotal" +
                "Municipality] IS NULL) OR ([ApprovedTotalMunicipality] = @Original_ApprovedTotal" +
                "Municipality)) AND ((@IsNull_ApprovedTotalCity = 1 AND [ApprovedTotalCity] IS NU" +
                "LL) OR ([ApprovedTotalCity] = @Original_ApprovedTotalCity)) AND ((@IsNull_Approv" +
                "edTotalBarangay = 1 AND [ApprovedTotalBarangay] IS NULL) OR ([ApprovedTotalBaran" +
                "gay] = @Original_ApprovedTotalBarangay)) AND ((@IsNull_ApprovedTotalLot = 1 AND " +
                "[ApprovedTotalLot] IS NULL) OR ([ApprovedTotalLot] = @Original_ApprovedTotalLot)" +
                ") AND ((@IsNull_ApprovedTotalAreaHectares = 1 AND [ApprovedTotalAreaHectares] IS" +
                " NULL) OR ([ApprovedTotalAreaHectares] = @Original_ApprovedTotalAreaHectares)));" +
                "\r\nSELECT CadSurveyNo, Island, RegionPsgc, ProvincePsgc, CoordinateSystem, Survey" +
                "SymbolNo, PreviousSurveyNo, ApprovedTotalMunicipality, ApprovedTotalCity, Approv" +
                "edTotalBarangay, ApprovedTotalLot, ApprovedTotalAreaHectares, ApprovalRemarks FR" +
                "OM CadSurvey WHERE (CadSurveyNo = @CadSurveyNo)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadSurveyNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Island", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Island", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RegionPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RegionPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProvincePsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProvincePsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CoordinateSystem", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CoordinateSystem", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SurveySymbolNo", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SurveySymbolNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PreviousSurveyNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PreviousSurveyNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ApprovedTotalMunicipality", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedTotalMunicipality", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ApprovedTotalCity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedTotalCity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ApprovedTotalBarangay", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedTotalBarangay", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ApprovedTotalLot", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedTotalLot", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ApprovedTotalAreaHectares", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 8, 2, "ApprovedTotalAreaHectares", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ApprovalRemarks", global::System.Data.SqlDbType.Text, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovalRemarks", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CadSurveyNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Island", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Island", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Island", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Island", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RegionPsgc", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RegionPsgc", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RegionPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RegionPsgc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ProvincePsgc", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProvincePsgc", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProvincePsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProvincePsgc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CoordinateSystem", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CoordinateSystem", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CoordinateSystem", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CoordinateSystem", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SurveySymbolNo", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SurveySymbolNo", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SurveySymbolNo", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SurveySymbolNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PreviousSurveyNo", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PreviousSurveyNo", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PreviousSurveyNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PreviousSurveyNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ApprovedTotalMunicipality", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedTotalMunicipality", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ApprovedTotalMunicipality", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedTotalMunicipality", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ApprovedTotalCity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedTotalCity", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ApprovedTotalCity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedTotalCity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ApprovedTotalBarangay", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedTotalBarangay", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ApprovedTotalBarangay", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedTotalBarangay", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ApprovedTotalLot", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedTotalLot", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ApprovedTotalLot", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedTotalLot", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ApprovedTotalAreaHectares", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedTotalAreaHectares", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ApprovedTotalAreaHectares", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 8, 2, "ApprovedTotalAreaHectares", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LSDMS.Properties.Settings.Default.lsdmsConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT      CadSurvey.*\r\nFROM          CadSurvey";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(lsdmsDataSet.CadSurveyDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual lsdmsDataSet.CadSurveyDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            lsdmsDataSet.CadSurveyDataTable dataTable = new lsdmsDataSet.CadSurveyDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(lsdmsDataSet.CadSurveyDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(lsdmsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "CadSurvey");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_CadSurveyNo, string Original_Island, string Original_RegionPsgc, string Original_ProvincePsgc, string Original_CoordinateSystem, global::System.Nullable<int> Original_SurveySymbolNo, string Original_PreviousSurveyNo, global::System.Nullable<int> Original_ApprovedTotalMunicipality, global::System.Nullable<int> Original_ApprovedTotalCity, global::System.Nullable<int> Original_ApprovedTotalBarangay, global::System.Nullable<int> Original_ApprovedTotalLot, global::System.Nullable<decimal> Original_ApprovedTotalAreaHectares) {
            if ((Original_CadSurveyNo == null)) {
                throw new global::System.ArgumentNullException("Original_CadSurveyNo");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_CadSurveyNo));
            }
            if ((Original_Island == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Island));
            }
            if ((Original_RegionPsgc == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_RegionPsgc));
            }
            if ((Original_ProvincePsgc == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_ProvincePsgc));
            }
            if ((Original_CoordinateSystem == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_CoordinateSystem));
            }
            if ((Original_SurveySymbolNo.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((int)(Original_SurveySymbolNo.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_PreviousSurveyNo == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_PreviousSurveyNo));
            }
            if ((Original_ApprovedTotalMunicipality.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((int)(Original_ApprovedTotalMunicipality.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_ApprovedTotalCity.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((int)(Original_ApprovedTotalCity.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_ApprovedTotalBarangay.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((int)(Original_ApprovedTotalBarangay.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Original_ApprovedTotalLot.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((int)(Original_ApprovedTotalLot.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_ApprovedTotalAreaHectares.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((decimal)(Original_ApprovedTotalAreaHectares.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string CadSurveyNo, string Island, string RegionPsgc, string ProvincePsgc, string CoordinateSystem, global::System.Nullable<int> SurveySymbolNo, string PreviousSurveyNo, global::System.Nullable<int> ApprovedTotalMunicipality, global::System.Nullable<int> ApprovedTotalCity, global::System.Nullable<int> ApprovedTotalBarangay, global::System.Nullable<int> ApprovedTotalLot, global::System.Nullable<decimal> ApprovedTotalAreaHectares, string ApprovalRemarks) {
            if ((CadSurveyNo == null)) {
                throw new global::System.ArgumentNullException("CadSurveyNo");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(CadSurveyNo));
            }
            if ((Island == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Island));
            }
            if ((RegionPsgc == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(RegionPsgc));
            }
            if ((ProvincePsgc == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(ProvincePsgc));
            }
            if ((CoordinateSystem == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(CoordinateSystem));
            }
            if ((SurveySymbolNo.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(SurveySymbolNo.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((PreviousSurveyNo == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(PreviousSurveyNo));
            }
            if ((ApprovedTotalMunicipality.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(ApprovedTotalMunicipality.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((ApprovedTotalCity.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(ApprovedTotalCity.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((ApprovedTotalBarangay.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((int)(ApprovedTotalBarangay.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((ApprovedTotalLot.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((int)(ApprovedTotalLot.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((ApprovedTotalAreaHectares.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((decimal)(ApprovedTotalAreaHectares.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((ApprovalRemarks == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(ApprovalRemarks));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string CadSurveyNo, 
                    string Island, 
                    string RegionPsgc, 
                    string ProvincePsgc, 
                    string CoordinateSystem, 
                    global::System.Nullable<int> SurveySymbolNo, 
                    string PreviousSurveyNo, 
                    global::System.Nullable<int> ApprovedTotalMunicipality, 
                    global::System.Nullable<int> ApprovedTotalCity, 
                    global::System.Nullable<int> ApprovedTotalBarangay, 
                    global::System.Nullable<int> ApprovedTotalLot, 
                    global::System.Nullable<decimal> ApprovedTotalAreaHectares, 
                    string ApprovalRemarks, 
                    string Original_CadSurveyNo, 
                    string Original_Island, 
                    string Original_RegionPsgc, 
                    string Original_ProvincePsgc, 
                    string Original_CoordinateSystem, 
                    global::System.Nullable<int> Original_SurveySymbolNo, 
                    string Original_PreviousSurveyNo, 
                    global::System.Nullable<int> Original_ApprovedTotalMunicipality, 
                    global::System.Nullable<int> Original_ApprovedTotalCity, 
                    global::System.Nullable<int> Original_ApprovedTotalBarangay, 
                    global::System.Nullable<int> Original_ApprovedTotalLot, 
                    global::System.Nullable<decimal> Original_ApprovedTotalAreaHectares) {
            if ((CadSurveyNo == null)) {
                throw new global::System.ArgumentNullException("CadSurveyNo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(CadSurveyNo));
            }
            if ((Island == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Island));
            }
            if ((RegionPsgc == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(RegionPsgc));
            }
            if ((ProvincePsgc == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(ProvincePsgc));
            }
            if ((CoordinateSystem == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(CoordinateSystem));
            }
            if ((SurveySymbolNo.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(SurveySymbolNo.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((PreviousSurveyNo == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(PreviousSurveyNo));
            }
            if ((ApprovedTotalMunicipality.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(ApprovedTotalMunicipality.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((ApprovedTotalCity.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(ApprovedTotalCity.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((ApprovedTotalBarangay.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(ApprovedTotalBarangay.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((ApprovedTotalLot.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(ApprovedTotalLot.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((ApprovedTotalAreaHectares.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((decimal)(ApprovedTotalAreaHectares.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((ApprovalRemarks == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(ApprovalRemarks));
            }
            if ((Original_CadSurveyNo == null)) {
                throw new global::System.ArgumentNullException("Original_CadSurveyNo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_CadSurveyNo));
            }
            if ((Original_Island == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_Island));
            }
            if ((Original_RegionPsgc == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_RegionPsgc));
            }
            if ((Original_ProvincePsgc == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_ProvincePsgc));
            }
            if ((Original_CoordinateSystem == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_CoordinateSystem));
            }
            if ((Original_SurveySymbolNo.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((int)(Original_SurveySymbolNo.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((Original_PreviousSurveyNo == null)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Original_PreviousSurveyNo));
            }
            if ((Original_ApprovedTotalMunicipality.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[27].Value = ((int)(Original_ApprovedTotalMunicipality.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((Original_ApprovedTotalCity.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[29].Value = ((int)(Original_ApprovedTotalCity.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((Original_ApprovedTotalBarangay.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[31].Value = ((int)(Original_ApprovedTotalBarangay.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            if ((Original_ApprovedTotalLot.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[33].Value = ((int)(Original_ApprovedTotalLot.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((Original_ApprovedTotalAreaHectares.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[35].Value = ((decimal)(Original_ApprovedTotalAreaHectares.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Island, 
                    string RegionPsgc, 
                    string ProvincePsgc, 
                    string CoordinateSystem, 
                    global::System.Nullable<int> SurveySymbolNo, 
                    string PreviousSurveyNo, 
                    global::System.Nullable<int> ApprovedTotalMunicipality, 
                    global::System.Nullable<int> ApprovedTotalCity, 
                    global::System.Nullable<int> ApprovedTotalBarangay, 
                    global::System.Nullable<int> ApprovedTotalLot, 
                    global::System.Nullable<decimal> ApprovedTotalAreaHectares, 
                    string ApprovalRemarks, 
                    string Original_CadSurveyNo, 
                    string Original_Island, 
                    string Original_RegionPsgc, 
                    string Original_ProvincePsgc, 
                    string Original_CoordinateSystem, 
                    global::System.Nullable<int> Original_SurveySymbolNo, 
                    string Original_PreviousSurveyNo, 
                    global::System.Nullable<int> Original_ApprovedTotalMunicipality, 
                    global::System.Nullable<int> Original_ApprovedTotalCity, 
                    global::System.Nullable<int> Original_ApprovedTotalBarangay, 
                    global::System.Nullable<int> Original_ApprovedTotalLot, 
                    global::System.Nullable<decimal> Original_ApprovedTotalAreaHectares) {
            return this.Update(Original_CadSurveyNo, Island, RegionPsgc, ProvincePsgc, CoordinateSystem, SurveySymbolNo, PreviousSurveyNo, ApprovedTotalMunicipality, ApprovedTotalCity, ApprovedTotalBarangay, ApprovedTotalLot, ApprovedTotalAreaHectares, ApprovalRemarks, Original_CadSurveyNo, Original_Island, Original_RegionPsgc, Original_ProvincePsgc, Original_CoordinateSystem, Original_SurveySymbolNo, Original_PreviousSurveyNo, Original_ApprovedTotalMunicipality, Original_ApprovedTotalCity, Original_ApprovedTotalBarangay, Original_ApprovedTotalLot, Original_ApprovedTotalAreaHectares);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CaseTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CaseTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Case";
            tableMapping.ColumnMappings.Add("CadSurveyNo", "CadSurveyNo");
            tableMapping.ColumnMappings.Add("MunicipalityPsgc", "MunicipalityPsgc");
            tableMapping.ColumnMappings.Add("CadCaseNo", "CadCaseNo");
            tableMapping.ColumnMappings.Add("ModuleNo", "ModuleNo");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [Case] WHERE (([CadSurveyNo] = @Original_CadSurveyNo) AND ([Municipal" +
                "ityPsgc] = @Original_MunicipalityPsgc) AND ([CadCaseNo] = @Original_CadCaseNo) A" +
                "ND ((@IsNull_ModuleNo = 1 AND [ModuleNo] IS NULL) OR ([ModuleNo] = @Original_Mod" +
                "uleNo)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CadSurveyNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MunicipalityPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MunicipalityPsgc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CadCaseNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadCaseNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ModuleNo", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ModuleNo", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ModuleNo", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ModuleNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [Case] ([CadSurveyNo], [MunicipalityPsgc], [CadCaseNo], [ModuleNo]) VALUES (@CadSurveyNo, @MunicipalityPsgc, @CadCaseNo, @ModuleNo);
SELECT CadSurveyNo, MunicipalityPsgc, CadCaseNo, ModuleNo FROM [Case] WHERE (CadCaseNo = @CadCaseNo) AND (CadSurveyNo = @CadSurveyNo) AND (MunicipalityPsgc = @MunicipalityPsgc)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadSurveyNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MunicipalityPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MunicipalityPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadCaseNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadCaseNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ModuleNo", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ModuleNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [Case] SET [CadSurveyNo] = @CadSurveyNo, [MunicipalityPsgc] = @MunicipalityPsgc, [CadCaseNo] = @CadCaseNo, [ModuleNo] = @ModuleNo WHERE (([CadSurveyNo] = @Original_CadSurveyNo) AND ([MunicipalityPsgc] = @Original_MunicipalityPsgc) AND ([CadCaseNo] = @Original_CadCaseNo) AND ((@IsNull_ModuleNo = 1 AND [ModuleNo] IS NULL) OR ([ModuleNo] = @Original_ModuleNo)));
SELECT CadSurveyNo, MunicipalityPsgc, CadCaseNo, ModuleNo FROM [Case] WHERE (CadCaseNo = @CadCaseNo) AND (CadSurveyNo = @CadSurveyNo) AND (MunicipalityPsgc = @MunicipalityPsgc)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadSurveyNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MunicipalityPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MunicipalityPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadCaseNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadCaseNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ModuleNo", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ModuleNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CadSurveyNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MunicipalityPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MunicipalityPsgc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CadCaseNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadCaseNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ModuleNo", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ModuleNo", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ModuleNo", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ModuleNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LSDMS.Properties.Settings.Default.lsdmsConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT * FROM [Case]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT CadCaseNo, CadSurveyNo, ModuleNo, MunicipalityPsgc FROM [Case] WHERE (CadS" +
                "urveyNo = @CadSurveyNo) AND (MunicipalityPsgc = @MunicipalityPsgc)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadSurveyNo", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MunicipalityPsgc", global::System.Data.SqlDbType.NChar, 9, global::System.Data.ParameterDirection.Input, 0, 0, "MunicipalityPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(lsdmsDataSet.CaseDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual lsdmsDataSet.CaseDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            lsdmsDataSet.CaseDataTable dataTable = new lsdmsDataSet.CaseDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByMunicipality(lsdmsDataSet.CaseDataTable dataTable, string CadSurveyNo, string MunicipalityPsgc) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((CadSurveyNo == null)) {
                throw new global::System.ArgumentNullException("CadSurveyNo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(CadSurveyNo));
            }
            if ((MunicipalityPsgc == null)) {
                throw new global::System.ArgumentNullException("MunicipalityPsgc");
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(MunicipalityPsgc));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual lsdmsDataSet.CaseDataTable GetDataByMunicipality(string CadSurveyNo, string MunicipalityPsgc) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((CadSurveyNo == null)) {
                throw new global::System.ArgumentNullException("CadSurveyNo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(CadSurveyNo));
            }
            if ((MunicipalityPsgc == null)) {
                throw new global::System.ArgumentNullException("MunicipalityPsgc");
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(MunicipalityPsgc));
            }
            lsdmsDataSet.CaseDataTable dataTable = new lsdmsDataSet.CaseDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(lsdmsDataSet.CaseDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(lsdmsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Case");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_CadSurveyNo, string Original_MunicipalityPsgc, string Original_CadCaseNo, global::System.Nullable<int> Original_ModuleNo) {
            if ((Original_CadSurveyNo == null)) {
                throw new global::System.ArgumentNullException("Original_CadSurveyNo");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_CadSurveyNo));
            }
            if ((Original_MunicipalityPsgc == null)) {
                throw new global::System.ArgumentNullException("Original_MunicipalityPsgc");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_MunicipalityPsgc));
            }
            if ((Original_CadCaseNo == null)) {
                throw new global::System.ArgumentNullException("Original_CadCaseNo");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_CadCaseNo));
            }
            if ((Original_ModuleNo.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_ModuleNo.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string CadSurveyNo, string MunicipalityPsgc, string CadCaseNo, global::System.Nullable<int> ModuleNo) {
            if ((CadSurveyNo == null)) {
                throw new global::System.ArgumentNullException("CadSurveyNo");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(CadSurveyNo));
            }
            if ((MunicipalityPsgc == null)) {
                throw new global::System.ArgumentNullException("MunicipalityPsgc");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(MunicipalityPsgc));
            }
            if ((CadCaseNo == null)) {
                throw new global::System.ArgumentNullException("CadCaseNo");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(CadCaseNo));
            }
            if ((ModuleNo.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(ModuleNo.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string CadSurveyNo, string MunicipalityPsgc, string CadCaseNo, global::System.Nullable<int> ModuleNo, string Original_CadSurveyNo, string Original_MunicipalityPsgc, string Original_CadCaseNo, global::System.Nullable<int> Original_ModuleNo) {
            if ((CadSurveyNo == null)) {
                throw new global::System.ArgumentNullException("CadSurveyNo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(CadSurveyNo));
            }
            if ((MunicipalityPsgc == null)) {
                throw new global::System.ArgumentNullException("MunicipalityPsgc");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(MunicipalityPsgc));
            }
            if ((CadCaseNo == null)) {
                throw new global::System.ArgumentNullException("CadCaseNo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(CadCaseNo));
            }
            if ((ModuleNo.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(ModuleNo.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((Original_CadSurveyNo == null)) {
                throw new global::System.ArgumentNullException("Original_CadSurveyNo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_CadSurveyNo));
            }
            if ((Original_MunicipalityPsgc == null)) {
                throw new global::System.ArgumentNullException("Original_MunicipalityPsgc");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_MunicipalityPsgc));
            }
            if ((Original_CadCaseNo == null)) {
                throw new global::System.ArgumentNullException("Original_CadCaseNo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_CadCaseNo));
            }
            if ((Original_ModuleNo.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_ModuleNo.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<int> ModuleNo, string Original_CadSurveyNo, string Original_MunicipalityPsgc, string Original_CadCaseNo, global::System.Nullable<int> Original_ModuleNo) {
            return this.Update(Original_CadSurveyNo, Original_MunicipalityPsgc, Original_CadCaseNo, ModuleNo, Original_CadSurveyNo, Original_MunicipalityPsgc, Original_CadCaseNo, Original_ModuleNo);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LotTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LotTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Lot";
            tableMapping.ColumnMappings.Add("CadSurveyNo", "CadSurveyNo");
            tableMapping.ColumnMappings.Add("MunicipalityPsgc", "MunicipalityPsgc");
            tableMapping.ColumnMappings.Add("CadCaseNo", "CadCaseNo");
            tableMapping.ColumnMappings.Add("BarangayPsgc", "BarangayPsgc");
            tableMapping.ColumnMappings.Add("SectionId", "SectionId");
            tableMapping.ColumnMappings.Add("LotNo", "LotNo");
            tableMapping.ColumnMappings.Add("Quadrangle", "Quadrangle");
            tableMapping.ColumnMappings.Add("ClaimantName", "ClaimantName");
            tableMapping.ColumnMappings.Add("ClaimantAddress", "ClaimantAddress");
            tableMapping.ColumnMappings.Add("ComputedArea", "ComputedArea");
            tableMapping.ColumnMappings.Add("ReferencePoint", "ReferencePoint");
            tableMapping.ColumnMappings.Add("TieLineNS", "TieLineNS");
            tableMapping.ColumnMappings.Add("TieLineEW", "TieLineEW");
            tableMapping.ColumnMappings.Add("TieLineDegree", "TieLineDegree");
            tableMapping.ColumnMappings.Add("TieLineMinute", "TieLineMinute");
            tableMapping.ColumnMappings.Add("TieLineDistance", "TieLineDistance");
            tableMapping.ColumnMappings.Add("OriginalCheckedBy", "OriginalCheckedBy");
            tableMapping.ColumnMappings.Add("OriginalCheckedDate", "OriginalCheckedDate");
            tableMapping.ColumnMappings.Add("OriginalCompletedBy", "OriginalCompletedBy");
            tableMapping.ColumnMappings.Add("OriginalCompletedDate", "OriginalCompletedDate");
            tableMapping.ColumnMappings.Add("DuplicateCheckedBy", "DuplicateCheckedBy");
            tableMapping.ColumnMappings.Add("DuplicateCheckedDate", "DuplicateCheckedDate");
            tableMapping.ColumnMappings.Add("FinalVerifiedBy", "FinalVerifiedBy");
            tableMapping.ColumnMappings.Add("FinalCheckedBy1", "FinalCheckedBy1");
            tableMapping.ColumnMappings.Add("FinalCheckedBy2", "FinalCheckedBy2");
            tableMapping.ColumnMappings.Add("Remarks", "Remarks");
            tableMapping.ColumnMappings.Add("LRCNo", "LRCNo");
            tableMapping.ColumnMappings.Add("GEName", "GEName");
            tableMapping.ColumnMappings.Add("SurveyMonthFrom", "SurveyMonthFrom");
            tableMapping.ColumnMappings.Add("SurveyDayFrom", "SurveyDayFrom");
            tableMapping.ColumnMappings.Add("SurveyYearFrom", "SurveyYearFrom");
            tableMapping.ColumnMappings.Add("SurveyMonthTo", "SurveyMonthTo");
            tableMapping.ColumnMappings.Add("SurveyDayTo", "SurveyDayTo");
            tableMapping.ColumnMappings.Add("SurveyYearTo", "SurveyYearTo");
            tableMapping.ColumnMappings.Add("DuplicateCompletedBy", "DuplicateCompletedBy");
            tableMapping.ColumnMappings.Add("DuplicateCompletedDate", "DuplicateCompletedDate");
            tableMapping.ColumnMappings.Add("UserName", "UserName");
            tableMapping.ColumnMappings.Add("DateAdded", "DateAdded");
            tableMapping.ColumnMappings.Add("DeclaredArea", "DeclaredArea");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [Lot] WHERE (([CadSurveyNo] = @Original_CadSurveyNo) AND ([Municipali" +
                "tyPsgc] = @Original_MunicipalityPsgc) AND ([CadCaseNo] = @Original_CadCaseNo) AN" +
                "D ([BarangayPsgc] = @Original_BarangayPsgc) AND ([Quadrangle] = @Original_Quadra" +
                "ngle) AND ([SectionId] = @Original_SectionId) AND ([LotNo] = @Original_LotNo) AN" +
                "D ((@IsNull_ClaimantName = 1 AND [ClaimantName] IS NULL) OR ([ClaimantName] = @O" +
                "riginal_ClaimantName)) AND ((@IsNull_ClaimantAddress = 1 AND [ClaimantAddress] I" +
                "S NULL) OR ([ClaimantAddress] = @Original_ClaimantAddress)) AND ((@IsNull_Comput" +
                "edArea = 1 AND [ComputedArea] IS NULL) OR ([ComputedArea] = @Original_ComputedAr" +
                "ea)) AND ((@IsNull_ReferencePoint = 1 AND [ReferencePoint] IS NULL) OR ([Referen" +
                "cePoint] = @Original_ReferencePoint)) AND ((@IsNull_TieLineNS = 1 AND [TieLineNS" +
                "] IS NULL) OR ([TieLineNS] = @Original_TieLineNS)) AND ((@IsNull_TieLineEW = 1 A" +
                "ND [TieLineEW] IS NULL) OR ([TieLineEW] = @Original_TieLineEW)) AND ((@IsNull_Ti" +
                "eLineDegree = 1 AND [TieLineDegree] IS NULL) OR ([TieLineDegree] = @Original_Tie" +
                "LineDegree)) AND ((@IsNull_TieLineMinute = 1 AND [TieLineMinute] IS NULL) OR ([T" +
                "ieLineMinute] = @Original_TieLineMinute)) AND ((@IsNull_TieLineDistance = 1 AND " +
                "[TieLineDistance] IS NULL) OR ([TieLineDistance] = @Original_TieLineDistance)) A" +
                "ND ((@IsNull_OriginalCheckedBy = 1 AND [OriginalCheckedBy] IS NULL) OR ([Origina" +
                "lCheckedBy] = @Original_OriginalCheckedBy)) AND ((@IsNull_OriginalCheckedDate = " +
                "1 AND [OriginalCheckedDate] IS NULL) OR ([OriginalCheckedDate] = @Original_Origi" +
                "nalCheckedDate)) AND ((@IsNull_OriginalCompletedBy = 1 AND [OriginalCompletedBy]" +
                " IS NULL) OR ([OriginalCompletedBy] = @Original_OriginalCompletedBy)) AND ((@IsN" +
                "ull_OriginalCompletedDate = 1 AND [OriginalCompletedDate] IS NULL) OR ([Original" +
                "CompletedDate] = @Original_OriginalCompletedDate)) AND ((@IsNull_DuplicateChecke" +
                "dBy = 1 AND [DuplicateCheckedBy] IS NULL) OR ([DuplicateCheckedBy] = @Original_D" +
                "uplicateCheckedBy)) AND ((@IsNull_DuplicateCheckedDate = 1 AND [DuplicateChecked" +
                "Date] IS NULL) OR ([DuplicateCheckedDate] = @Original_DuplicateCheckedDate)) AND" +
                " ((@IsNull_FinalVerifiedBy = 1 AND [FinalVerifiedBy] IS NULL) OR ([FinalVerified" +
                "By] = @Original_FinalVerifiedBy)) AND ((@IsNull_FinalCheckedBy1 = 1 AND [FinalCh" +
                "eckedBy1] IS NULL) OR ([FinalCheckedBy1] = @Original_FinalCheckedBy1)) AND ((@Is" +
                "Null_FinalCheckedBy2 = 1 AND [FinalCheckedBy2] IS NULL) OR ([FinalCheckedBy2] = " +
                "@Original_FinalCheckedBy2)) AND ((@IsNull_Remarks = 1 AND [Remarks] IS NULL) OR " +
                "([Remarks] = @Original_Remarks)) AND ((@IsNull_LRCNo = 1 AND [LRCNo] IS NULL) OR" +
                " ([LRCNo] = @Original_LRCNo)) AND ((@IsNull_GEName = 1 AND [GEName] IS NULL) OR " +
                "([GEName] = @Original_GEName)) AND ((@IsNull_SurveyMonthFrom = 1 AND [SurveyMont" +
                "hFrom] IS NULL) OR ([SurveyMonthFrom] = @Original_SurveyMonthFrom)) AND ((@IsNul" +
                "l_SurveyDayFrom = 1 AND [SurveyDayFrom] IS NULL) OR ([SurveyDayFrom] = @Original" +
                "_SurveyDayFrom)) AND ((@IsNull_SurveyYearFrom = 1 AND [SurveyYearFrom] IS NULL) " +
                "OR ([SurveyYearFrom] = @Original_SurveyYearFrom)) AND ((@IsNull_SurveyMonthTo = " +
                "1 AND [SurveyMonthTo] IS NULL) OR ([SurveyMonthTo] = @Original_SurveyMonthTo)) A" +
                "ND ((@IsNull_SurveyDayTo = 1 AND [SurveyDayTo] IS NULL) OR ([SurveyDayTo] = @Ori" +
                "ginal_SurveyDayTo)) AND ((@IsNull_SurveyYearTo = 1 AND [SurveyYearTo] IS NULL) O" +
                "R ([SurveyYearTo] = @Original_SurveyYearTo)) AND ((@IsNull_DuplicateCompletedBy " +
                "= 1 AND [DuplicateCompletedBy] IS NULL) OR ([DuplicateCompletedBy] = @Original_D" +
                "uplicateCompletedBy)) AND ((@IsNull_DuplicateCompletedDate = 1 AND [DuplicateCom" +
                "pletedDate] IS NULL) OR ([DuplicateCompletedDate] = @Original_DuplicateCompleted" +
                "Date)) AND ((@IsNull_UserName = 1 AND [UserName] IS NULL) OR ([UserName] = @Orig" +
                "inal_UserName)) AND ((@IsNull_DateAdded = 1 AND [DateAdded] IS NULL) OR ([DateAd" +
                "ded] = @Original_DateAdded)) AND ((@IsNull_DeclaredArea = 1 AND [DeclaredArea] I" +
                "S NULL) OR ([DeclaredArea] = @Original_DeclaredArea)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CadSurveyNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MunicipalityPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MunicipalityPsgc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CadCaseNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadCaseNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BarangayPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BarangayPsgc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Quadrangle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Quadrangle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SectionId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SectionId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LotNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LotNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ClaimantName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClaimantName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ClaimantName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClaimantName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ClaimantAddress", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClaimantAddress", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ClaimantAddress", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClaimantAddress", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ComputedArea", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ComputedArea", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ComputedArea", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "ComputedArea", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ReferencePoint", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReferencePoint", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ReferencePoint", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReferencePoint", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TieLineNS", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TieLineNS", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TieLineNS", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TieLineNS", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TieLineEW", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TieLineEW", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TieLineEW", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TieLineEW", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TieLineDegree", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TieLineDegree", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TieLineDegree", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TieLineDegree", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TieLineMinute", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TieLineMinute", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TieLineMinute", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TieLineMinute", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TieLineDistance", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TieLineDistance", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TieLineDistance", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "TieLineDistance", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OriginalCheckedBy", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalCheckedBy", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OriginalCheckedBy", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalCheckedBy", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OriginalCheckedDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalCheckedDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OriginalCheckedDate", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalCheckedDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OriginalCompletedBy", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalCompletedBy", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OriginalCompletedBy", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalCompletedBy", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OriginalCompletedDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalCompletedDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OriginalCompletedDate", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalCompletedDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DuplicateCheckedBy", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DuplicateCheckedBy", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DuplicateCheckedBy", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DuplicateCheckedBy", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DuplicateCheckedDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DuplicateCheckedDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DuplicateCheckedDate", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DuplicateCheckedDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FinalVerifiedBy", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FinalVerifiedBy", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FinalVerifiedBy", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FinalVerifiedBy", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FinalCheckedBy1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FinalCheckedBy1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FinalCheckedBy1", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FinalCheckedBy1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FinalCheckedBy2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FinalCheckedBy2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FinalCheckedBy2", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FinalCheckedBy2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Remarks", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remarks", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Remarks", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remarks", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LRCNo", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LRCNo", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LRCNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LRCNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_GEName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GEName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GEName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GEName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SurveyMonthFrom", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SurveyMonthFrom", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SurveyMonthFrom", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SurveyMonthFrom", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SurveyDayFrom", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SurveyDayFrom", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SurveyDayFrom", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SurveyDayFrom", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SurveyYearFrom", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SurveyYearFrom", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SurveyYearFrom", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SurveyYearFrom", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SurveyMonthTo", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SurveyMonthTo", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SurveyMonthTo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SurveyMonthTo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SurveyDayTo", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SurveyDayTo", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SurveyDayTo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SurveyDayTo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SurveyYearTo", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SurveyYearTo", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SurveyYearTo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SurveyYearTo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DuplicateCompletedBy", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DuplicateCompletedBy", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DuplicateCompletedBy", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DuplicateCompletedBy", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DuplicateCompletedDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DuplicateCompletedDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DuplicateCompletedDate", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DuplicateCompletedDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_UserName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DateAdded", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateAdded", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DateAdded", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateAdded", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DeclaredArea", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DeclaredArea", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DeclaredArea", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "DeclaredArea", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [Lot] ([CadSurveyNo], [MunicipalityPsgc], [CadCaseNo], [BarangayPsgc]" +
                ", [Quadrangle], [SectionId], [LotNo], [ClaimantName], [ClaimantAddress], [Comput" +
                "edArea], [ReferencePoint], [TieLineNS], [TieLineEW], [TieLineDegree], [TieLineMi" +
                "nute], [TieLineDistance], [OriginalCheckedBy], [OriginalCheckedDate], [OriginalC" +
                "ompletedBy], [OriginalCompletedDate], [DuplicateCheckedBy], [DuplicateCheckedDat" +
                "e], [FinalVerifiedBy], [FinalCheckedBy1], [FinalCheckedBy2], [Remarks], [LRCNo]," +
                " [GEName], [SurveyMonthFrom], [SurveyDayFrom], [SurveyYearFrom], [SurveyMonthTo]" +
                ", [SurveyDayTo], [SurveyYearTo], [DuplicateCompletedBy], [DuplicateCompletedDate" +
                "], [UserName], [DateAdded], [DeclaredArea]) VALUES (@CadSurveyNo, @MunicipalityP" +
                "sgc, @CadCaseNo, @BarangayPsgc, @Quadrangle, @SectionId, @LotNo, @ClaimantName, " +
                "@ClaimantAddress, @ComputedArea, @ReferencePoint, @TieLineNS, @TieLineEW, @TieLi" +
                "neDegree, @TieLineMinute, @TieLineDistance, @OriginalCheckedBy, @OriginalChecked" +
                "Date, @OriginalCompletedBy, @OriginalCompletedDate, @DuplicateCheckedBy, @Duplic" +
                "ateCheckedDate, @FinalVerifiedBy, @FinalCheckedBy1, @FinalCheckedBy2, @Remarks, " +
                "@LRCNo, @GEName, @SurveyMonthFrom, @SurveyDayFrom, @SurveyYearFrom, @SurveyMonth" +
                "To, @SurveyDayTo, @SurveyYearTo, @DuplicateCompletedBy, @DuplicateCompletedDate," +
                " @UserName, @DateAdded, @DeclaredArea);\r\nSELECT CadSurveyNo, MunicipalityPsgc, C" +
                "adCaseNo, BarangayPsgc, Quadrangle, SectionId, LotNo, ClaimantName, ClaimantAddr" +
                "ess, ComputedArea, ReferencePoint, TieLineNS, TieLineEW, TieLineDegree, TieLineM" +
                "inute, TieLineDistance, OriginalCheckedBy, OriginalCheckedDate, OriginalComplete" +
                "dBy, OriginalCompletedDate, DuplicateCheckedBy, DuplicateCheckedDate, FinalVerif" +
                "iedBy, FinalCheckedBy1, FinalCheckedBy2, Remarks, LRCNo, GEName, SurveyMonthFrom" +
                ", SurveyDayFrom, SurveyYearFrom, SurveyMonthTo, SurveyDayTo, SurveyYearTo, Dupli" +
                "cateCompletedBy, DuplicateCompletedDate, UserName, DateAdded, DeclaredArea FROM " +
                "Lot WHERE (BarangayPsgc = @BarangayPsgc) AND (CadCaseNo = @CadCaseNo) AND (CadSu" +
                "rveyNo = @CadSurveyNo) AND (LotNo = @LotNo) AND (MunicipalityPsgc = @Municipalit" +
                "yPsgc) AND (Quadrangle = @Quadrangle) AND (SectionId = @SectionId)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadSurveyNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MunicipalityPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MunicipalityPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadCaseNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadCaseNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BarangayPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BarangayPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Quadrangle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Quadrangle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SectionId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SectionId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LotNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LotNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ClaimantName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClaimantName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ClaimantAddress", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClaimantAddress", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ComputedArea", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "ComputedArea", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReferencePoint", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReferencePoint", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TieLineNS", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TieLineNS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TieLineEW", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TieLineEW", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TieLineDegree", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TieLineDegree", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TieLineMinute", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TieLineMinute", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TieLineDistance", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "TieLineDistance", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OriginalCheckedBy", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalCheckedBy", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OriginalCheckedDate", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalCheckedDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OriginalCompletedBy", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalCompletedBy", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OriginalCompletedDate", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalCompletedDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DuplicateCheckedBy", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DuplicateCheckedBy", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DuplicateCheckedDate", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DuplicateCheckedDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FinalVerifiedBy", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FinalVerifiedBy", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FinalCheckedBy1", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FinalCheckedBy1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FinalCheckedBy2", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FinalCheckedBy2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Remarks", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remarks", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LRCNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LRCNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GEName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GEName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SurveyMonthFrom", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SurveyMonthFrom", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SurveyDayFrom", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SurveyDayFrom", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SurveyYearFrom", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SurveyYearFrom", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SurveyMonthTo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SurveyMonthTo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SurveyDayTo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SurveyDayTo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SurveyYearTo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SurveyYearTo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DuplicateCompletedBy", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DuplicateCompletedBy", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DuplicateCompletedDate", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DuplicateCompletedDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DateAdded", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateAdded", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DeclaredArea", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "DeclaredArea", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [Lot] SET [CadSurveyNo] = @CadSurveyNo, [MunicipalityPsgc] = @Municipality" +
                "Psgc, [CadCaseNo] = @CadCaseNo, [BarangayPsgc] = @BarangayPsgc, [Quadrangle] = @" +
                "Quadrangle, [SectionId] = @SectionId, [LotNo] = @LotNo, [ClaimantName] = @Claima" +
                "ntName, [ClaimantAddress] = @ClaimantAddress, [ComputedArea] = @ComputedArea, [R" +
                "eferencePoint] = @ReferencePoint, [TieLineNS] = @TieLineNS, [TieLineEW] = @TieLi" +
                "neEW, [TieLineDegree] = @TieLineDegree, [TieLineMinute] = @TieLineMinute, [TieLi" +
                "neDistance] = @TieLineDistance, [OriginalCheckedBy] = @OriginalCheckedBy, [Origi" +
                "nalCheckedDate] = @OriginalCheckedDate, [OriginalCompletedBy] = @OriginalComplet" +
                "edBy, [OriginalCompletedDate] = @OriginalCompletedDate, [DuplicateCheckedBy] = @" +
                "DuplicateCheckedBy, [DuplicateCheckedDate] = @DuplicateCheckedDate, [FinalVerifi" +
                "edBy] = @FinalVerifiedBy, [FinalCheckedBy1] = @FinalCheckedBy1, [FinalCheckedBy2" +
                "] = @FinalCheckedBy2, [Remarks] = @Remarks, [LRCNo] = @LRCNo, [GEName] = @GEName" +
                ", [SurveyMonthFrom] = @SurveyMonthFrom, [SurveyDayFrom] = @SurveyDayFrom, [Surve" +
                "yYearFrom] = @SurveyYearFrom, [SurveyMonthTo] = @SurveyMonthTo, [SurveyDayTo] = " +
                "@SurveyDayTo, [SurveyYearTo] = @SurveyYearTo, [DuplicateCompletedBy] = @Duplicat" +
                "eCompletedBy, [DuplicateCompletedDate] = @DuplicateCompletedDate, [UserName] = @" +
                "UserName, [DateAdded] = @DateAdded, [DeclaredArea] = @DeclaredArea WHERE (([CadS" +
                "urveyNo] = @Original_CadSurveyNo) AND ([MunicipalityPsgc] = @Original_Municipali" +
                "tyPsgc) AND ([CadCaseNo] = @Original_CadCaseNo) AND ([BarangayPsgc] = @Original_" +
                "BarangayPsgc) AND ([Quadrangle] = @Original_Quadrangle) AND ([SectionId] = @Orig" +
                "inal_SectionId) AND ([LotNo] = @Original_LotNo) AND ((@IsNull_ClaimantName = 1 A" +
                "ND [ClaimantName] IS NULL) OR ([ClaimantName] = @Original_ClaimantName)) AND ((@" +
                "IsNull_ClaimantAddress = 1 AND [ClaimantAddress] IS NULL) OR ([ClaimantAddress] " +
                "= @Original_ClaimantAddress)) AND ((@IsNull_ComputedArea = 1 AND [ComputedArea] " +
                "IS NULL) OR ([ComputedArea] = @Original_ComputedArea)) AND ((@IsNull_ReferencePo" +
                "int = 1 AND [ReferencePoint] IS NULL) OR ([ReferencePoint] = @Original_Reference" +
                "Point)) AND ((@IsNull_TieLineNS = 1 AND [TieLineNS] IS NULL) OR ([TieLineNS] = @" +
                "Original_TieLineNS)) AND ((@IsNull_TieLineEW = 1 AND [TieLineEW] IS NULL) OR ([T" +
                "ieLineEW] = @Original_TieLineEW)) AND ((@IsNull_TieLineDegree = 1 AND [TieLineDe" +
                "gree] IS NULL) OR ([TieLineDegree] = @Original_TieLineDegree)) AND ((@IsNull_Tie" +
                "LineMinute = 1 AND [TieLineMinute] IS NULL) OR ([TieLineMinute] = @Original_TieL" +
                "ineMinute)) AND ((@IsNull_TieLineDistance = 1 AND [TieLineDistance] IS NULL) OR " +
                "([TieLineDistance] = @Original_TieLineDistance)) AND ((@IsNull_OriginalCheckedBy" +
                " = 1 AND [OriginalCheckedBy] IS NULL) OR ([OriginalCheckedBy] = @Original_Origin" +
                "alCheckedBy)) AND ((@IsNull_OriginalCheckedDate = 1 AND [OriginalCheckedDate] IS" +
                " NULL) OR ([OriginalCheckedDate] = @Original_OriginalCheckedDate)) AND ((@IsNull" +
                "_OriginalCompletedBy = 1 AND [OriginalCompletedBy] IS NULL) OR ([OriginalComplet" +
                "edBy] = @Original_OriginalCompletedBy)) AND ((@IsNull_OriginalCompletedDate = 1 " +
                "AND [OriginalCompletedDate] IS NULL) OR ([OriginalCompletedDate] = @Original_Ori" +
                "ginalCompletedDate)) AND ((@IsNull_DuplicateCheckedBy = 1 AND [DuplicateCheckedB" +
                "y] IS NULL) OR ([DuplicateCheckedBy] = @Original_DuplicateCheckedBy)) AND ((@IsN" +
                "ull_DuplicateCheckedDate = 1 AND [DuplicateCheckedDate] IS NULL) OR ([DuplicateC" +
                "heckedDate] = @Original_DuplicateCheckedDate)) AND ((@IsNull_FinalVerifiedBy = 1" +
                " AND [FinalVerifiedBy] IS NULL) OR ([FinalVerifiedBy] = @Original_FinalVerifiedB" +
                "y)) AND ((@IsNull_FinalCheckedBy1 = 1 AND [FinalCheckedBy1] IS NULL) OR ([FinalC" +
                "heckedBy1] = @Original_FinalCheckedBy1)) AND ((@IsNull_FinalCheckedBy2 = 1 AND [" +
                "FinalCheckedBy2] IS NULL) OR ([FinalCheckedBy2] = @Original_FinalCheckedBy2)) AN" +
                "D ((@IsNull_Remarks = 1 AND [Remarks] IS NULL) OR ([Remarks] = @Original_Remarks" +
                ")) AND ((@IsNull_LRCNo = 1 AND [LRCNo] IS NULL) OR ([LRCNo] = @Original_LRCNo)) " +
                "AND ((@IsNull_GEName = 1 AND [GEName] IS NULL) OR ([GEName] = @Original_GEName))" +
                " AND ((@IsNull_SurveyMonthFrom = 1 AND [SurveyMonthFrom] IS NULL) OR ([SurveyMon" +
                "thFrom] = @Original_SurveyMonthFrom)) AND ((@IsNull_SurveyDayFrom = 1 AND [Surve" +
                "yDayFrom] IS NULL) OR ([SurveyDayFrom] = @Original_SurveyDayFrom)) AND ((@IsNull" +
                "_SurveyYearFrom = 1 AND [SurveyYearFrom] IS NULL) OR ([SurveyYearFrom] = @Origin" +
                "al_SurveyYearFrom)) AND ((@IsNull_SurveyMonthTo = 1 AND [SurveyMonthTo] IS NULL)" +
                " OR ([SurveyMonthTo] = @Original_SurveyMonthTo)) AND ((@IsNull_SurveyDayTo = 1 A" +
                "ND [SurveyDayTo] IS NULL) OR ([SurveyDayTo] = @Original_SurveyDayTo)) AND ((@IsN" +
                "ull_SurveyYearTo = 1 AND [SurveyYearTo] IS NULL) OR ([SurveyYearTo] = @Original_" +
                "SurveyYearTo)) AND ((@IsNull_DuplicateCompletedBy = 1 AND [DuplicateCompletedBy]" +
                " IS NULL) OR ([DuplicateCompletedBy] = @Original_DuplicateCompletedBy)) AND ((@I" +
                "sNull_DuplicateCompletedDate = 1 AND [DuplicateCompletedDate] IS NULL) OR ([Dupl" +
                "icateCompletedDate] = @Original_DuplicateCompletedDate)) AND ((@IsNull_UserName " +
                "= 1 AND [UserName] IS NULL) OR ([UserName] = @Original_UserName)) AND ((@IsNull_" +
                "DateAdded = 1 AND [DateAdded] IS NULL) OR ([DateAdded] = @Original_DateAdded)) A" +
                "ND ((@IsNull_DeclaredArea = 1 AND [DeclaredArea] IS NULL) OR ([DeclaredArea] = @" +
                "Original_DeclaredArea)));\r\nSELECT CadSurveyNo, MunicipalityPsgc, CadCaseNo, Bara" +
                "ngayPsgc, Quadrangle, SectionId, LotNo, ClaimantName, ClaimantAddress, ComputedA" +
                "rea, ReferencePoint, TieLineNS, TieLineEW, TieLineDegree, TieLineMinute, TieLine" +
                "Distance, OriginalCheckedBy, OriginalCheckedDate, OriginalCompletedBy, OriginalC" +
                "ompletedDate, DuplicateCheckedBy, DuplicateCheckedDate, FinalVerifiedBy, FinalCh" +
                "eckedBy1, FinalCheckedBy2, Remarks, LRCNo, GEName, SurveyMonthFrom, SurveyDayFro" +
                "m, SurveyYearFrom, SurveyMonthTo, SurveyDayTo, SurveyYearTo, DuplicateCompletedB" +
                "y, DuplicateCompletedDate, UserName, DateAdded, DeclaredArea FROM Lot WHERE (Bar" +
                "angayPsgc = @BarangayPsgc) AND (CadCaseNo = @CadCaseNo) AND (CadSurveyNo = @CadS" +
                "urveyNo) AND (LotNo = @LotNo) AND (MunicipalityPsgc = @MunicipalityPsgc) AND (Qu" +
                "adrangle = @Quadrangle) AND (SectionId = @SectionId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadSurveyNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MunicipalityPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MunicipalityPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadCaseNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadCaseNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BarangayPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BarangayPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Quadrangle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Quadrangle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SectionId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SectionId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LotNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LotNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ClaimantName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClaimantName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ClaimantAddress", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClaimantAddress", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ComputedArea", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "ComputedArea", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReferencePoint", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReferencePoint", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TieLineNS", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TieLineNS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TieLineEW", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TieLineEW", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TieLineDegree", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TieLineDegree", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TieLineMinute", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TieLineMinute", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TieLineDistance", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "TieLineDistance", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OriginalCheckedBy", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalCheckedBy", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OriginalCheckedDate", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalCheckedDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OriginalCompletedBy", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalCompletedBy", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OriginalCompletedDate", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalCompletedDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DuplicateCheckedBy", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DuplicateCheckedBy", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DuplicateCheckedDate", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DuplicateCheckedDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FinalVerifiedBy", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FinalVerifiedBy", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FinalCheckedBy1", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FinalCheckedBy1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FinalCheckedBy2", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FinalCheckedBy2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Remarks", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remarks", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LRCNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LRCNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GEName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GEName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SurveyMonthFrom", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SurveyMonthFrom", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SurveyDayFrom", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SurveyDayFrom", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SurveyYearFrom", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SurveyYearFrom", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SurveyMonthTo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SurveyMonthTo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SurveyDayTo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SurveyDayTo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SurveyYearTo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SurveyYearTo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DuplicateCompletedBy", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DuplicateCompletedBy", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DuplicateCompletedDate", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DuplicateCompletedDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DateAdded", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateAdded", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DeclaredArea", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "DeclaredArea", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CadSurveyNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MunicipalityPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MunicipalityPsgc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CadCaseNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadCaseNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BarangayPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BarangayPsgc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Quadrangle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Quadrangle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SectionId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SectionId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LotNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LotNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ClaimantName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClaimantName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ClaimantName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClaimantName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ClaimantAddress", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClaimantAddress", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ClaimantAddress", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClaimantAddress", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ComputedArea", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ComputedArea", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ComputedArea", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "ComputedArea", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ReferencePoint", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReferencePoint", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ReferencePoint", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReferencePoint", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TieLineNS", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TieLineNS", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TieLineNS", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TieLineNS", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TieLineEW", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TieLineEW", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TieLineEW", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TieLineEW", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TieLineDegree", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TieLineDegree", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TieLineDegree", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TieLineDegree", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TieLineMinute", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TieLineMinute", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TieLineMinute", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TieLineMinute", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TieLineDistance", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TieLineDistance", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TieLineDistance", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "TieLineDistance", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OriginalCheckedBy", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalCheckedBy", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OriginalCheckedBy", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalCheckedBy", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OriginalCheckedDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalCheckedDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OriginalCheckedDate", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalCheckedDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OriginalCompletedBy", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalCompletedBy", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OriginalCompletedBy", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalCompletedBy", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OriginalCompletedDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalCompletedDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OriginalCompletedDate", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalCompletedDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DuplicateCheckedBy", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DuplicateCheckedBy", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DuplicateCheckedBy", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DuplicateCheckedBy", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DuplicateCheckedDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DuplicateCheckedDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DuplicateCheckedDate", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DuplicateCheckedDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FinalVerifiedBy", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FinalVerifiedBy", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FinalVerifiedBy", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FinalVerifiedBy", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FinalCheckedBy1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FinalCheckedBy1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FinalCheckedBy1", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FinalCheckedBy1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FinalCheckedBy2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FinalCheckedBy2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FinalCheckedBy2", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FinalCheckedBy2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Remarks", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remarks", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Remarks", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remarks", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LRCNo", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LRCNo", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LRCNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LRCNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_GEName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GEName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GEName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GEName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SurveyMonthFrom", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SurveyMonthFrom", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SurveyMonthFrom", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SurveyMonthFrom", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SurveyDayFrom", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SurveyDayFrom", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SurveyDayFrom", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SurveyDayFrom", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SurveyYearFrom", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SurveyYearFrom", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SurveyYearFrom", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SurveyYearFrom", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SurveyMonthTo", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SurveyMonthTo", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SurveyMonthTo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SurveyMonthTo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SurveyDayTo", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SurveyDayTo", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SurveyDayTo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SurveyDayTo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SurveyYearTo", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SurveyYearTo", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SurveyYearTo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SurveyYearTo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DuplicateCompletedBy", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DuplicateCompletedBy", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DuplicateCompletedBy", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DuplicateCompletedBy", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DuplicateCompletedDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DuplicateCompletedDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DuplicateCompletedDate", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DuplicateCompletedDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_UserName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DateAdded", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateAdded", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DateAdded", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateAdded", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DeclaredArea", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DeclaredArea", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DeclaredArea", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "DeclaredArea", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LSDMS.Properties.Settings.Default.lsdmsConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT      CadSurveyNo, MunicipalityPsgc, CadCaseNo, BarangayPsgc, Quadrangle, SectionId, LotNo, ClaimantName, ClaimantAddress, ComputedArea, 
                        ReferencePoint, TieLineNS, TieLineEW, TieLineDegree, TieLineMinute, TieLineDistance, OriginalCheckedBy, OriginalCheckedDate, 
                        OriginalCompletedBy, OriginalCompletedDate, DuplicateCheckedBy, DuplicateCheckedDate, FinalVerifiedBy, FinalCheckedBy1, FinalCheckedBy2, 
                        Remarks, LRCNo, GEName, SurveyMonthFrom, SurveyDayFrom, SurveyYearFrom, SurveyMonthTo, SurveyDayTo, SurveyYearTo, 
                        DuplicateCompletedBy, DuplicateCompletedDate, UserName, DateAdded, DeclaredArea
FROM          Lot";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT      BarangayPsgc, CadCaseNo, CadSurveyNo, ClaimantAddress, ClaimantName, ComputedArea, DeclaredArea, DuplicateCheckedBy, 
                        DuplicateCheckedDate, DuplicateCompletedBy, DuplicateCompletedDate, FinalCheckedBy1, FinalCheckedBy2, FinalVerifiedBy, GEName, LRCNo, 
                        LotNo, MunicipalityPsgc, OriginalCheckedBy, OriginalCheckedDate, OriginalCompletedBy, OriginalCompletedDate, Quadrangle, ReferencePoint, 
                        Remarks, SectionId, SurveyDayFrom, SurveyDayTo, SurveyMonthFrom, SurveyMonthTo, SurveyYearFrom, SurveyYearTo, TieLineDegree, 
                        TieLineDistance, TieLineEW, TieLineMinute, TieLineNS, UserName, DateAdded
FROM          Lot
WHERE      (CadSurveyNo = @CadSurveyNo) AND (MunicipalityPsgc = @MunicipalityPsgc) AND (CadCaseNo = @CadCaseNo) AND 
                        (BarangayPsgc = @BarangayPsgc) AND (SectionId = @SectionId) AND (Quadrangle = @Quadrangle)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadSurveyNo", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MunicipalityPsgc", global::System.Data.SqlDbType.NChar, 9, global::System.Data.ParameterDirection.Input, 0, 0, "MunicipalityPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadCaseNo", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "CadCaseNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BarangayPsgc", global::System.Data.SqlDbType.NChar, 9, global::System.Data.ParameterDirection.Input, 0, 0, "BarangayPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SectionId", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "SectionId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Quadrangle", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "Quadrangle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = @"SELECT      BarangayPsgc, CadCaseNo, CadSurveyNo, ClaimantAddress, ClaimantName, ComputedArea, DeclaredArea, DuplicateCheckedBy, 
                        DuplicateCheckedDate, DuplicateCompletedBy, DuplicateCompletedDate, FinalCheckedBy1, FinalCheckedBy2, FinalVerifiedBy, GEName, LRCNo, 
                        LotNo, MunicipalityPsgc, OriginalCheckedBy, OriginalCheckedDate, OriginalCompletedBy, OriginalCompletedDate, Quadrangle, ReferencePoint, 
                        Remarks, SectionId, SurveyDayFrom, SurveyDayTo, SurveyMonthFrom, SurveyMonthTo, SurveyYearFrom, SurveyYearTo, TieLineDegree, 
                        TieLineDistance, TieLineEW, TieLineMinute, TieLineNS, UserName, DateAdded
FROM          Lot
WHERE      (CadSurveyNo = @CadSurveyNo) AND (MunicipalityPsgc = @MunicipalityPsgc) AND (CadCaseNo = @CadCaseNo) AND 
                        (BarangayPsgc = @BarangayPsgc) AND (SectionId = @SectionId) AND (Quadrangle = @Quadrangle) AND (UserName = @UserName OR
                        UserName IS NULL)";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadSurveyNo", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MunicipalityPsgc", global::System.Data.SqlDbType.NChar, 9, global::System.Data.ParameterDirection.Input, 0, 0, "MunicipalityPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadCaseNo", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "CadCaseNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BarangayPsgc", global::System.Data.SqlDbType.NChar, 9, global::System.Data.ParameterDirection.Input, 0, 0, "BarangayPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SectionId", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "SectionId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Quadrangle", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "Quadrangle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserName", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "UserName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(lsdmsDataSet.LotDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual lsdmsDataSet.LotDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            lsdmsDataSet.LotDataTable dataTable = new lsdmsDataSet.LotDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBySection(lsdmsDataSet.LotDataTable dataTable, string CadSurveyNo, string MunicipalityPsgc, string CadCaseNo, string BarangayPsgc, string SectionId, string Quadrangle) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((CadSurveyNo == null)) {
                throw new global::System.ArgumentNullException("CadSurveyNo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(CadSurveyNo));
            }
            if ((MunicipalityPsgc == null)) {
                throw new global::System.ArgumentNullException("MunicipalityPsgc");
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(MunicipalityPsgc));
            }
            if ((CadCaseNo == null)) {
                throw new global::System.ArgumentNullException("CadCaseNo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(CadCaseNo));
            }
            if ((BarangayPsgc == null)) {
                throw new global::System.ArgumentNullException("BarangayPsgc");
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(BarangayPsgc));
            }
            if ((SectionId == null)) {
                throw new global::System.ArgumentNullException("SectionId");
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(SectionId));
            }
            if ((Quadrangle == null)) {
                throw new global::System.ArgumentNullException("Quadrangle");
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(Quadrangle));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual lsdmsDataSet.LotDataTable GetDataBySection(string CadSurveyNo, string MunicipalityPsgc, string CadCaseNo, string BarangayPsgc, string SectionId, string Quadrangle) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((CadSurveyNo == null)) {
                throw new global::System.ArgumentNullException("CadSurveyNo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(CadSurveyNo));
            }
            if ((MunicipalityPsgc == null)) {
                throw new global::System.ArgumentNullException("MunicipalityPsgc");
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(MunicipalityPsgc));
            }
            if ((CadCaseNo == null)) {
                throw new global::System.ArgumentNullException("CadCaseNo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(CadCaseNo));
            }
            if ((BarangayPsgc == null)) {
                throw new global::System.ArgumentNullException("BarangayPsgc");
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(BarangayPsgc));
            }
            if ((SectionId == null)) {
                throw new global::System.ArgumentNullException("SectionId");
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(SectionId));
            }
            if ((Quadrangle == null)) {
                throw new global::System.ArgumentNullException("Quadrangle");
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(Quadrangle));
            }
            lsdmsDataSet.LotDataTable dataTable = new lsdmsDataSet.LotDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByUser(lsdmsDataSet.LotDataTable dataTable, string CadSurveyNo, string MunicipalityPsgc, string CadCaseNo, string BarangayPsgc, string SectionId, string Quadrangle, string UserName) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((CadSurveyNo == null)) {
                throw new global::System.ArgumentNullException("CadSurveyNo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(CadSurveyNo));
            }
            if ((MunicipalityPsgc == null)) {
                throw new global::System.ArgumentNullException("MunicipalityPsgc");
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(MunicipalityPsgc));
            }
            if ((CadCaseNo == null)) {
                throw new global::System.ArgumentNullException("CadCaseNo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(CadCaseNo));
            }
            if ((BarangayPsgc == null)) {
                throw new global::System.ArgumentNullException("BarangayPsgc");
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(BarangayPsgc));
            }
            if ((SectionId == null)) {
                throw new global::System.ArgumentNullException("SectionId");
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(SectionId));
            }
            if ((Quadrangle == null)) {
                throw new global::System.ArgumentNullException("Quadrangle");
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(Quadrangle));
            }
            if ((UserName == null)) {
                this.Adapter.SelectCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = ((string)(UserName));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual lsdmsDataSet.LotDataTable GetDataByUser(string CadSurveyNo, string MunicipalityPsgc, string CadCaseNo, string BarangayPsgc, string SectionId, string Quadrangle, string UserName) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((CadSurveyNo == null)) {
                throw new global::System.ArgumentNullException("CadSurveyNo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(CadSurveyNo));
            }
            if ((MunicipalityPsgc == null)) {
                throw new global::System.ArgumentNullException("MunicipalityPsgc");
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(MunicipalityPsgc));
            }
            if ((CadCaseNo == null)) {
                throw new global::System.ArgumentNullException("CadCaseNo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(CadCaseNo));
            }
            if ((BarangayPsgc == null)) {
                throw new global::System.ArgumentNullException("BarangayPsgc");
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(BarangayPsgc));
            }
            if ((SectionId == null)) {
                throw new global::System.ArgumentNullException("SectionId");
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(SectionId));
            }
            if ((Quadrangle == null)) {
                throw new global::System.ArgumentNullException("Quadrangle");
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(Quadrangle));
            }
            if ((UserName == null)) {
                this.Adapter.SelectCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = ((string)(UserName));
            }
            lsdmsDataSet.LotDataTable dataTable = new lsdmsDataSet.LotDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(lsdmsDataSet.LotDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(lsdmsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Lot");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LotDataTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LotDataTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LotData";
            tableMapping.ColumnMappings.Add("CadSurveyNo", "CadSurveyNo");
            tableMapping.ColumnMappings.Add("MunicipalityPsgc", "MunicipalityPsgc");
            tableMapping.ColumnMappings.Add("CadCaseNo", "CadCaseNo");
            tableMapping.ColumnMappings.Add("BarangayPsgc", "BarangayPsgc");
            tableMapping.ColumnMappings.Add("SectionId", "SectionId");
            tableMapping.ColumnMappings.Add("LotNo", "LotNo");
            tableMapping.ColumnMappings.Add("Sequence", "Sequence");
            tableMapping.ColumnMappings.Add("Quadrangle", "Quadrangle");
            tableMapping.ColumnMappings.Add("LocalX", "LocalX");
            tableMapping.ColumnMappings.Add("LocalY", "LocalY");
            tableMapping.ColumnMappings.Add("PtmX", "PtmX");
            tableMapping.ColumnMappings.Add("PtmY", "PtmY");
            tableMapping.ColumnMappings.Add("WgsX", "WgsX");
            tableMapping.ColumnMappings.Add("WgsY", "WgsY");
            tableMapping.ColumnMappings.Add("PrsX", "PrsX");
            tableMapping.ColumnMappings.Add("PrsY", "PrsY");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [LotData] WHERE (([CadSurveyNo] = @Original_CadSurveyNo) AND ([MunicipalityPsgc] = @Original_MunicipalityPsgc) AND ([CadCaseNo] = @Original_CadCaseNo) AND ([BarangayPsgc] = @Original_BarangayPsgc) AND ([Quadrangle] = @Original_Quadrangle) AND ([SectionId] = @Original_SectionId) AND ([LotNo] = @Original_LotNo) AND ([Sequence] = @Original_Sequence) AND ((@IsNull_LocalX = 1 AND [LocalX] IS NULL) OR ([LocalX] = @Original_LocalX)) AND ((@IsNull_LocalY = 1 AND [LocalY] IS NULL) OR ([LocalY] = @Original_LocalY)) AND ((@IsNull_PtmX = 1 AND [PtmX] IS NULL) OR ([PtmX] = @Original_PtmX)) AND ((@IsNull_PtmY = 1 AND [PtmY] IS NULL) OR ([PtmY] = @Original_PtmY)) AND ((@IsNull_WgsX = 1 AND [WgsX] IS NULL) OR ([WgsX] = @Original_WgsX)) AND ((@IsNull_WgsY = 1 AND [WgsY] IS NULL) OR ([WgsY] = @Original_WgsY)) AND ((@IsNull_PrsX = 1 AND [PrsX] IS NULL) OR ([PrsX] = @Original_PrsX)) AND ((@IsNull_PrsY = 1 AND [PrsY] IS NULL) OR ([PrsY] = @Original_PrsY)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CadSurveyNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MunicipalityPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MunicipalityPsgc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CadCaseNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadCaseNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BarangayPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BarangayPsgc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Quadrangle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Quadrangle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SectionId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SectionId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LotNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LotNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Sequence", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sequence", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LocalX", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LocalX", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LocalX", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 7, 2, "LocalX", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LocalY", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LocalY", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LocalY", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 7, 2, "LocalY", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PtmX", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PtmX", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PtmX", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 14, 7, "PtmX", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PtmY", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PtmY", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PtmY", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 14, 7, "PtmY", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_WgsX", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WgsX", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WgsX", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 11, 5, "WgsX", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_WgsY", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WgsY", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WgsY", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 11, 5, "WgsY", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PrsX", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PrsX", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PrsX", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 11, 5, "PrsX", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PrsY", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PrsY", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PrsY", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 11, 5, "PrsY", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [LotData] ([CadSurveyNo], [MunicipalityPsgc], [CadCaseNo], [BarangayPsgc], [Quadrangle], [SectionId], [LotNo], [Sequence], [LocalX], [LocalY], [PtmX], [PtmY], [WgsX], [WgsY], [PrsX], [PrsY]) VALUES (@CadSurveyNo, @MunicipalityPsgc, @CadCaseNo, @BarangayPsgc, @Quadrangle, @SectionId, @LotNo, @Sequence, @LocalX, @LocalY, @PtmX, @PtmY, @WgsX, @WgsY, @PrsX, @PrsY);
SELECT CadSurveyNo, MunicipalityPsgc, CadCaseNo, BarangayPsgc, Quadrangle, SectionId, LotNo, Sequence, LocalX, LocalY, PtmX, PtmY, WgsX, WgsY, PrsX, PrsY FROM LotData WHERE (BarangayPsgc = @BarangayPsgc) AND (CadCaseNo = @CadCaseNo) AND (CadSurveyNo = @CadSurveyNo) AND (LotNo = @LotNo) AND (MunicipalityPsgc = @MunicipalityPsgc) AND (Quadrangle = @Quadrangle) AND (SectionId = @SectionId) AND (Sequence = @Sequence)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadSurveyNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MunicipalityPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MunicipalityPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadCaseNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadCaseNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BarangayPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BarangayPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Quadrangle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Quadrangle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SectionId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SectionId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LotNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LotNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Sequence", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sequence", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LocalX", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 7, 2, "LocalX", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LocalY", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 7, 2, "LocalY", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PtmX", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 14, 7, "PtmX", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PtmY", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 14, 7, "PtmY", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WgsX", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 11, 5, "WgsX", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WgsY", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 11, 5, "WgsY", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PrsX", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 11, 5, "PrsX", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PrsY", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 11, 5, "PrsY", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [LotData] SET [CadSurveyNo] = @CadSurveyNo, [MunicipalityPsgc] = @Municipa" +
                "lityPsgc, [CadCaseNo] = @CadCaseNo, [BarangayPsgc] = @BarangayPsgc, [Quadrangle]" +
                " = @Quadrangle, [SectionId] = @SectionId, [LotNo] = @LotNo, [Sequence] = @Sequen" +
                "ce, [LocalX] = @LocalX, [LocalY] = @LocalY, [PtmX] = @PtmX, [PtmY] = @PtmY, [Wgs" +
                "X] = @WgsX, [WgsY] = @WgsY, [PrsX] = @PrsX, [PrsY] = @PrsY WHERE (([CadSurveyNo]" +
                " = @Original_CadSurveyNo) AND ([MunicipalityPsgc] = @Original_MunicipalityPsgc) " +
                "AND ([CadCaseNo] = @Original_CadCaseNo) AND ([BarangayPsgc] = @Original_Barangay" +
                "Psgc) AND ([Quadrangle] = @Original_Quadrangle) AND ([SectionId] = @Original_Sec" +
                "tionId) AND ([LotNo] = @Original_LotNo) AND ([Sequence] = @Original_Sequence) AN" +
                "D ((@IsNull_LocalX = 1 AND [LocalX] IS NULL) OR ([LocalX] = @Original_LocalX)) A" +
                "ND ((@IsNull_LocalY = 1 AND [LocalY] IS NULL) OR ([LocalY] = @Original_LocalY)) " +
                "AND ((@IsNull_PtmX = 1 AND [PtmX] IS NULL) OR ([PtmX] = @Original_PtmX)) AND ((@" +
                "IsNull_PtmY = 1 AND [PtmY] IS NULL) OR ([PtmY] = @Original_PtmY)) AND ((@IsNull_" +
                "WgsX = 1 AND [WgsX] IS NULL) OR ([WgsX] = @Original_WgsX)) AND ((@IsNull_WgsY = " +
                "1 AND [WgsY] IS NULL) OR ([WgsY] = @Original_WgsY)) AND ((@IsNull_PrsX = 1 AND [" +
                "PrsX] IS NULL) OR ([PrsX] = @Original_PrsX)) AND ((@IsNull_PrsY = 1 AND [PrsY] I" +
                "S NULL) OR ([PrsY] = @Original_PrsY)));\r\nSELECT CadSurveyNo, MunicipalityPsgc, C" +
                "adCaseNo, BarangayPsgc, Quadrangle, SectionId, LotNo, Sequence, LocalX, LocalY, " +
                "PtmX, PtmY, WgsX, WgsY, PrsX, PrsY FROM LotData WHERE (BarangayPsgc = @BarangayP" +
                "sgc) AND (CadCaseNo = @CadCaseNo) AND (CadSurveyNo = @CadSurveyNo) AND (LotNo = " +
                "@LotNo) AND (MunicipalityPsgc = @MunicipalityPsgc) AND (Quadrangle = @Quadrangle" +
                ") AND (SectionId = @SectionId) AND (Sequence = @Sequence)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadSurveyNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MunicipalityPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MunicipalityPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadCaseNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadCaseNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BarangayPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BarangayPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Quadrangle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Quadrangle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SectionId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SectionId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LotNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LotNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Sequence", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sequence", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LocalX", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 7, 2, "LocalX", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LocalY", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 7, 2, "LocalY", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PtmX", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 14, 7, "PtmX", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PtmY", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 14, 7, "PtmY", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WgsX", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 11, 5, "WgsX", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WgsY", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 11, 5, "WgsY", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PrsX", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 11, 5, "PrsX", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PrsY", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 11, 5, "PrsY", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CadSurveyNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MunicipalityPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MunicipalityPsgc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CadCaseNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadCaseNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BarangayPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BarangayPsgc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Quadrangle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Quadrangle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SectionId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SectionId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LotNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LotNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Sequence", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sequence", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LocalX", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LocalX", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LocalX", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 7, 2, "LocalX", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LocalY", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LocalY", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LocalY", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 7, 2, "LocalY", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PtmX", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PtmX", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PtmX", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 14, 7, "PtmX", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PtmY", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PtmY", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PtmY", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 14, 7, "PtmY", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_WgsX", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WgsX", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WgsX", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 11, 5, "WgsX", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_WgsY", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WgsY", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WgsY", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 11, 5, "WgsY", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PrsX", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PrsX", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PrsX", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 11, 5, "PrsX", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PrsY", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PrsY", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PrsY", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 11, 5, "PrsY", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LSDMS.Properties.Settings.Default.lsdmsConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT      LotData.*\r\nFROM          LotData";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT BarangayPsgc, CadCaseNo, CadSurveyNo, LocalX, LocalY, LotNo, MunicipalityPsgc, PrsX, PrsY, PtmX, PtmY, Quadrangle, SectionId, Sequence, WgsX, WgsY FROM LotData WHERE (CadSurveyNo = @CadSurveyNo) AND (MunicipalityPsgc = @MunicipalityPsgc) AND (CadCaseNo = @CadCaseNo) AND (BarangayPsgc = @BarangayPsgc) AND (SectionId = @SectionId) AND (LotNo = @LotNo) AND (Quadrangle = @Quadrangle)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadSurveyNo", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MunicipalityPsgc", global::System.Data.SqlDbType.NChar, 9, global::System.Data.ParameterDirection.Input, 0, 0, "MunicipalityPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadCaseNo", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "CadCaseNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BarangayPsgc", global::System.Data.SqlDbType.NChar, 9, global::System.Data.ParameterDirection.Input, 0, 0, "BarangayPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Quadrangle", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "Quadrangle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SectionId", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "SectionId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LotNo", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "LotNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(lsdmsDataSet.LotDataDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual lsdmsDataSet.LotDataDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            lsdmsDataSet.LotDataDataTable dataTable = new lsdmsDataSet.LotDataDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByLot(lsdmsDataSet.LotDataDataTable dataTable, string CadSurveyNo, string MunicipalityPsgc, string CadCaseNo, string BarangayPsgc, string Quadrangle, string SectionId, string LotNo) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((CadSurveyNo == null)) {
                throw new global::System.ArgumentNullException("CadSurveyNo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(CadSurveyNo));
            }
            if ((MunicipalityPsgc == null)) {
                throw new global::System.ArgumentNullException("MunicipalityPsgc");
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(MunicipalityPsgc));
            }
            if ((CadCaseNo == null)) {
                throw new global::System.ArgumentNullException("CadCaseNo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(CadCaseNo));
            }
            if ((BarangayPsgc == null)) {
                throw new global::System.ArgumentNullException("BarangayPsgc");
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(BarangayPsgc));
            }
            if ((Quadrangle == null)) {
                throw new global::System.ArgumentNullException("Quadrangle");
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(Quadrangle));
            }
            if ((SectionId == null)) {
                throw new global::System.ArgumentNullException("SectionId");
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(SectionId));
            }
            if ((LotNo == null)) {
                throw new global::System.ArgumentNullException("LotNo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = ((string)(LotNo));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual lsdmsDataSet.LotDataDataTable GetDataByLot(string CadSurveyNo, string MunicipalityPsgc, string CadCaseNo, string BarangayPsgc, string Quadrangle, string SectionId, string LotNo) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((CadSurveyNo == null)) {
                throw new global::System.ArgumentNullException("CadSurveyNo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(CadSurveyNo));
            }
            if ((MunicipalityPsgc == null)) {
                throw new global::System.ArgumentNullException("MunicipalityPsgc");
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(MunicipalityPsgc));
            }
            if ((CadCaseNo == null)) {
                throw new global::System.ArgumentNullException("CadCaseNo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(CadCaseNo));
            }
            if ((BarangayPsgc == null)) {
                throw new global::System.ArgumentNullException("BarangayPsgc");
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(BarangayPsgc));
            }
            if ((Quadrangle == null)) {
                throw new global::System.ArgumentNullException("Quadrangle");
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(Quadrangle));
            }
            if ((SectionId == null)) {
                throw new global::System.ArgumentNullException("SectionId");
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(SectionId));
            }
            if ((LotNo == null)) {
                throw new global::System.ArgumentNullException("LotNo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = ((string)(LotNo));
            }
            lsdmsDataSet.LotDataDataTable dataTable = new lsdmsDataSet.LotDataDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(lsdmsDataSet.LotDataDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(lsdmsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "LotData");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MunicipalityTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MunicipalityTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Municipality";
            tableMapping.ColumnMappings.Add("CadSurveyNo", "CadSurveyNo");
            tableMapping.ColumnMappings.Add("MunicipalityPsgc", "MunicipalityPsgc");
            tableMapping.ColumnMappings.Add("GEOG_NM", "GEOG_NM");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Municipality] WHERE (([CadSurveyNo] = @Original_CadSurveyNo) A" +
                "ND ([MunicipalityPsgc] = @Original_MunicipalityPsgc))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CadSurveyNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MunicipalityPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MunicipalityPsgc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Municipality] ([CadSurveyNo], [MunicipalityPsgc]) VALUES (@Cad" +
                "SurveyNo, @MunicipalityPsgc);\r\nSELECT CadSurveyNo, MunicipalityPsgc FROM Municip" +
                "ality WHERE (CadSurveyNo = @CadSurveyNo) AND (MunicipalityPsgc = @MunicipalityPs" +
                "gc)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadSurveyNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MunicipalityPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MunicipalityPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Municipality] SET [CadSurveyNo] = @CadSurveyNo, [MunicipalityPsgc] = @MunicipalityPsgc WHERE (([CadSurveyNo] = @Original_CadSurveyNo) AND ([MunicipalityPsgc] = @Original_MunicipalityPsgc));
SELECT CadSurveyNo, MunicipalityPsgc FROM Municipality WHERE (CadSurveyNo = @CadSurveyNo) AND (MunicipalityPsgc = @MunicipalityPsgc)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadSurveyNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MunicipalityPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MunicipalityPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CadSurveyNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MunicipalityPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MunicipalityPsgc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LSDMS.Properties.Settings.Default.lsdmsConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT      Municipality.CadSurveyNo, Municipality.MunicipalityPsgc, CASE WHEN psgc.name IS NULL 
                        THEN '<Unknown>' ELSE psgc.name END AS GEOG_NM
FROM          Municipality LEFT OUTER JOIN
                        psgc ON Municipality.MunicipalityPsgc = psgc.psgc_cd
ORDER BY GEOG_NM";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT      Municipality.CadSurveyNo, Municipality.MunicipalityPsgc, CASE WHEN psgc.name IS NULL 
                        THEN '<Unknown>' ELSE psgc.name END AS GEOG_NM
FROM          Municipality LEFT OUTER JOIN
                        psgc ON Municipality.MunicipalityPsgc = psgc.psgc_cd
WHERE      (Municipality.CadSurveyNo = @CadSurveyNo)
ORDER BY GEOG_NM";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadSurveyNo", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(lsdmsDataSet.MunicipalityDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual lsdmsDataSet.MunicipalityDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            lsdmsDataSet.MunicipalityDataTable dataTable = new lsdmsDataSet.MunicipalityDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByCadSurveyNo(lsdmsDataSet.MunicipalityDataTable dataTable, string CadSurveyNo) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((CadSurveyNo == null)) {
                throw new global::System.ArgumentNullException("CadSurveyNo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(CadSurveyNo));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual lsdmsDataSet.MunicipalityDataTable GetDataByCadSurveyNo(string CadSurveyNo) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((CadSurveyNo == null)) {
                throw new global::System.ArgumentNullException("CadSurveyNo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(CadSurveyNo));
            }
            lsdmsDataSet.MunicipalityDataTable dataTable = new lsdmsDataSet.MunicipalityDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(lsdmsDataSet.MunicipalityDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(lsdmsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Municipality");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_CadSurveyNo, string Original_MunicipalityPsgc) {
            if ((Original_CadSurveyNo == null)) {
                throw new global::System.ArgumentNullException("Original_CadSurveyNo");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_CadSurveyNo));
            }
            if ((Original_MunicipalityPsgc == null)) {
                throw new global::System.ArgumentNullException("Original_MunicipalityPsgc");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_MunicipalityPsgc));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string CadSurveyNo, string MunicipalityPsgc) {
            if ((CadSurveyNo == null)) {
                throw new global::System.ArgumentNullException("CadSurveyNo");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(CadSurveyNo));
            }
            if ((MunicipalityPsgc == null)) {
                throw new global::System.ArgumentNullException("MunicipalityPsgc");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(MunicipalityPsgc));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string CadSurveyNo, string MunicipalityPsgc, string Original_CadSurveyNo, string Original_MunicipalityPsgc) {
            if ((CadSurveyNo == null)) {
                throw new global::System.ArgumentNullException("CadSurveyNo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(CadSurveyNo));
            }
            if ((MunicipalityPsgc == null)) {
                throw new global::System.ArgumentNullException("MunicipalityPsgc");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(MunicipalityPsgc));
            }
            if ((Original_CadSurveyNo == null)) {
                throw new global::System.ArgumentNullException("Original_CadSurveyNo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_CadSurveyNo));
            }
            if ((Original_MunicipalityPsgc == null)) {
                throw new global::System.ArgumentNullException("Original_MunicipalityPsgc");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_MunicipalityPsgc));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Original_CadSurveyNo, string Original_MunicipalityPsgc) {
            return this.Update(Original_CadSurveyNo, Original_MunicipalityPsgc, Original_CadSurveyNo, Original_MunicipalityPsgc);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ProjectsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ProjectsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Projects";
            tableMapping.ColumnMappings.Add("Project_No", "Project_No");
            tableMapping.ColumnMappings.Add("Region", "Region");
            tableMapping.ColumnMappings.Add("Province", "Province");
            tableMapping.ColumnMappings.Add("Municipality", "Municipality");
            tableMapping.ColumnMappings.Add("Ref_Type", "Ref_Type");
            tableMapping.ColumnMappings.Add("Latitude", "Latitude");
            tableMapping.ColumnMappings.Add("Longitude", "Longitude");
            tableMapping.ColumnMappings.Add("Encoder", "Encoder");
            tableMapping.ColumnMappings.Add("Date_Last_Updated", "Date_Last_Updated");
            tableMapping.ColumnMappings.Add("Validation_Status", "Validation_Status");
            tableMapping.ColumnMappings.Add("Validated_By", "Validated_By");
            tableMapping.ColumnMappings.Add("Validation_Date", "Validation_Date");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Projects] WHERE (([Project_No] = @Original_Project_No) AND ((@IsNull_Region = 1 AND [Region] IS NULL) OR ([Region] = @Original_Region)) AND ((@IsNull_Province = 1 AND [Province] IS NULL) OR ([Province] = @Original_Province)) AND ((@IsNull_Municipality = 1 AND [Municipality] IS NULL) OR ([Municipality] = @Original_Municipality)) AND ((@IsNull_Ref_Type = 1 AND [Ref_Type] IS NULL) OR ([Ref_Type] = @Original_Ref_Type)) AND ((@IsNull_Latitude = 1 AND [Latitude] IS NULL) OR ([Latitude] = @Original_Latitude)) AND ((@IsNull_Longitude = 1 AND [Longitude] IS NULL) OR ([Longitude] = @Original_Longitude)) AND ((@IsNull_Encoder = 1 AND [Encoder] IS NULL) OR ([Encoder] = @Original_Encoder)) AND ((@IsNull_Date_Last_Updated = 1 AND [Date_Last_Updated] IS NULL) OR ([Date_Last_Updated] = @Original_Date_Last_Updated)) AND ((@IsNull_Validation_Status = 1 AND [Validation_Status] IS NULL) OR ([Validation_Status] = @Original_Validation_Status)) AND ((@IsNull_Validated_By = 1 AND [Validated_By] IS NULL) OR ([Validated_By] = @Original_Validated_By)) AND ((@IsNull_Validation_Date = 1 AND [Validation_Date] IS NULL) OR ([Validation_Date] = @Original_Validation_Date)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Project_No", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Project_No", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Region", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Region", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Region", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Region", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Province", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Province", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Province", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Province", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Municipality", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Municipality", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Municipality", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Municipality", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Ref_Type", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ref_Type", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Ref_Type", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ref_Type", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Latitude", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Latitude", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Latitude", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Latitude", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Longitude", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Longitude", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Longitude", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Longitude", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Encoder", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Encoder", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Encoder", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Encoder", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Date_Last_Updated", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date_Last_Updated", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Date_Last_Updated", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date_Last_Updated", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Validation_Status", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Validation_Status", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Validation_Status", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Validation_Status", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Validated_By", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Validated_By", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Validated_By", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Validated_By", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Validation_Date", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Validation_Date", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Validation_Date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Validation_Date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Projects] ([Project_No], [Region], [Province], [Municipality], [Ref_Type], [Latitude], [Longitude], [Encoder], [Date_Last_Updated], [Validation_Status], [Validated_By], [Validation_Date]) VALUES (@Project_No, @Region, @Province, @Municipality, @Ref_Type, @Latitude, @Longitude, @Encoder, @Date_Last_Updated, @Validation_Status, @Validated_By, @Validation_Date);
SELECT Project_No, Region, Province, Municipality, Ref_Type, Latitude, Longitude, Encoder, Date_Last_Updated, Validation_Status, Validated_By, Validation_Date FROM Projects WHERE (Project_No = @Project_No)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Project_No", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Project_No", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Region", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Region", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Province", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Province", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Municipality", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Municipality", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Ref_Type", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ref_Type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Latitude", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Latitude", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Longitude", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Longitude", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Encoder", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Encoder", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Date_Last_Updated", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date_Last_Updated", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Validation_Status", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Validation_Status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Validated_By", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Validated_By", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Validation_Date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Validation_Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Projects] SET [Project_No] = @Project_No, [Region] = @Region, [Prov" +
                "ince] = @Province, [Municipality] = @Municipality, [Ref_Type] = @Ref_Type, [Lati" +
                "tude] = @Latitude, [Longitude] = @Longitude, [Encoder] = @Encoder, [Date_Last_Up" +
                "dated] = @Date_Last_Updated, [Validation_Status] = @Validation_Status, [Validate" +
                "d_By] = @Validated_By, [Validation_Date] = @Validation_Date WHERE (([Project_No]" +
                " = @Original_Project_No) AND ((@IsNull_Region = 1 AND [Region] IS NULL) OR ([Reg" +
                "ion] = @Original_Region)) AND ((@IsNull_Province = 1 AND [Province] IS NULL) OR " +
                "([Province] = @Original_Province)) AND ((@IsNull_Municipality = 1 AND [Municipal" +
                "ity] IS NULL) OR ([Municipality] = @Original_Municipality)) AND ((@IsNull_Ref_Ty" +
                "pe = 1 AND [Ref_Type] IS NULL) OR ([Ref_Type] = @Original_Ref_Type)) AND ((@IsNu" +
                "ll_Latitude = 1 AND [Latitude] IS NULL) OR ([Latitude] = @Original_Latitude)) AN" +
                "D ((@IsNull_Longitude = 1 AND [Longitude] IS NULL) OR ([Longitude] = @Original_L" +
                "ongitude)) AND ((@IsNull_Encoder = 1 AND [Encoder] IS NULL) OR ([Encoder] = @Ori" +
                "ginal_Encoder)) AND ((@IsNull_Date_Last_Updated = 1 AND [Date_Last_Updated] IS N" +
                "ULL) OR ([Date_Last_Updated] = @Original_Date_Last_Updated)) AND ((@IsNull_Valid" +
                "ation_Status = 1 AND [Validation_Status] IS NULL) OR ([Validation_Status] = @Ori" +
                "ginal_Validation_Status)) AND ((@IsNull_Validated_By = 1 AND [Validated_By] IS N" +
                "ULL) OR ([Validated_By] = @Original_Validated_By)) AND ((@IsNull_Validation_Date" +
                " = 1 AND [Validation_Date] IS NULL) OR ([Validation_Date] = @Original_Validation" +
                "_Date)));\r\nSELECT Project_No, Region, Province, Municipality, Ref_Type, Latitude" +
                ", Longitude, Encoder, Date_Last_Updated, Validation_Status, Validated_By, Valida" +
                "tion_Date FROM Projects WHERE (Project_No = @Project_No)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Project_No", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Project_No", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Region", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Region", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Province", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Province", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Municipality", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Municipality", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Ref_Type", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ref_Type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Latitude", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Latitude", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Longitude", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Longitude", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Encoder", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Encoder", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Date_Last_Updated", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date_Last_Updated", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Validation_Status", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Validation_Status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Validated_By", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Validated_By", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Validation_Date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Validation_Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Project_No", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Project_No", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Region", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Region", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Region", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Region", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Province", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Province", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Province", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Province", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Municipality", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Municipality", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Municipality", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Municipality", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Ref_Type", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ref_Type", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Ref_Type", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ref_Type", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Latitude", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Latitude", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Latitude", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Latitude", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Longitude", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Longitude", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Longitude", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Longitude", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Encoder", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Encoder", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Encoder", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Encoder", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Date_Last_Updated", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date_Last_Updated", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Date_Last_Updated", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date_Last_Updated", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Validation_Status", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Validation_Status", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Validation_Status", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Validation_Status", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Validated_By", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Validated_By", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Validated_By", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Validated_By", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Validation_Date", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Validation_Date", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Validation_Date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Validation_Date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LSDMS.Properties.Settings.Default.lsdmsConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Project_No, Region, Province, Municipality, Ref_Type, Latitude, Longitude," +
                " Encoder, Date_Last_Updated, Validation_Status, Validated_By, Validation_Date FR" +
                "OM dbo.Projects";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(lsdmsDataSet.ProjectsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual lsdmsDataSet.ProjectsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            lsdmsDataSet.ProjectsDataTable dataTable = new lsdmsDataSet.ProjectsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(lsdmsDataSet.ProjectsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(lsdmsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Projects");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_Project_No, string Original_Region, string Original_Province, string Original_Municipality, string Original_Ref_Type, string Original_Latitude, string Original_Longitude, string Original_Encoder, global::System.Nullable<global::System.DateTime> Original_Date_Last_Updated, string Original_Validation_Status, string Original_Validated_By, global::System.Nullable<global::System.DateTime> Original_Validation_Date) {
            if ((Original_Project_No == null)) {
                throw new global::System.ArgumentNullException("Original_Project_No");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_Project_No));
            }
            if ((Original_Region == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Region));
            }
            if ((Original_Province == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_Province));
            }
            if ((Original_Municipality == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_Municipality));
            }
            if ((Original_Ref_Type == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_Ref_Type));
            }
            if ((Original_Latitude == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_Latitude));
            }
            if ((Original_Longitude == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_Longitude));
            }
            if ((Original_Encoder == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_Encoder));
            }
            if ((Original_Date_Last_Updated.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((System.DateTime)(Original_Date_Last_Updated.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_Validation_Status == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_Validation_Status));
            }
            if ((Original_Validated_By == null)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((string)(Original_Validated_By));
            }
            if ((Original_Validation_Date.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((System.DateTime)(Original_Validation_Date.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Project_No, string Region, string Province, string Municipality, string Ref_Type, string Latitude, string Longitude, string Encoder, global::System.Nullable<global::System.DateTime> Date_Last_Updated, string Validation_Status, string Validated_By, global::System.Nullable<global::System.DateTime> Validation_Date) {
            if ((Project_No == null)) {
                throw new global::System.ArgumentNullException("Project_No");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Project_No));
            }
            if ((Region == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Region));
            }
            if ((Province == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Province));
            }
            if ((Municipality == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Municipality));
            }
            if ((Ref_Type == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Ref_Type));
            }
            if ((Latitude == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Latitude));
            }
            if ((Longitude == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(Longitude));
            }
            if ((Encoder == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Encoder));
            }
            if ((Date_Last_Updated.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((System.DateTime)(Date_Last_Updated.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Validation_Status == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(Validation_Status));
            }
            if ((Validated_By == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(Validated_By));
            }
            if ((Validation_Date.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((System.DateTime)(Validation_Date.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Project_No, 
                    string Region, 
                    string Province, 
                    string Municipality, 
                    string Ref_Type, 
                    string Latitude, 
                    string Longitude, 
                    string Encoder, 
                    global::System.Nullable<global::System.DateTime> Date_Last_Updated, 
                    string Validation_Status, 
                    string Validated_By, 
                    global::System.Nullable<global::System.DateTime> Validation_Date, 
                    string Original_Project_No, 
                    string Original_Region, 
                    string Original_Province, 
                    string Original_Municipality, 
                    string Original_Ref_Type, 
                    string Original_Latitude, 
                    string Original_Longitude, 
                    string Original_Encoder, 
                    global::System.Nullable<global::System.DateTime> Original_Date_Last_Updated, 
                    string Original_Validation_Status, 
                    string Original_Validated_By, 
                    global::System.Nullable<global::System.DateTime> Original_Validation_Date) {
            if ((Project_No == null)) {
                throw new global::System.ArgumentNullException("Project_No");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Project_No));
            }
            if ((Region == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Region));
            }
            if ((Province == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Province));
            }
            if ((Municipality == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Municipality));
            }
            if ((Ref_Type == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Ref_Type));
            }
            if ((Latitude == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Latitude));
            }
            if ((Longitude == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Longitude));
            }
            if ((Encoder == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Encoder));
            }
            if ((Date_Last_Updated.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((System.DateTime)(Date_Last_Updated.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Validation_Status == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Validation_Status));
            }
            if ((Validated_By == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Validated_By));
            }
            if ((Validation_Date.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((System.DateTime)(Validation_Date.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Original_Project_No == null)) {
                throw new global::System.ArgumentNullException("Original_Project_No");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_Project_No));
            }
            if ((Original_Region == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_Region));
            }
            if ((Original_Province == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_Province));
            }
            if ((Original_Municipality == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_Municipality));
            }
            if ((Original_Ref_Type == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_Ref_Type));
            }
            if ((Original_Latitude == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_Latitude));
            }
            if ((Original_Longitude == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_Longitude));
            }
            if ((Original_Encoder == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(Original_Encoder));
            }
            if ((Original_Date_Last_Updated.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((System.DateTime)(Original_Date_Last_Updated.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Original_Validation_Status == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(Original_Validation_Status));
            }
            if ((Original_Validated_By == null)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((string)(Original_Validated_By));
            }
            if ((Original_Validation_Date.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((System.DateTime)(Original_Validation_Date.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Region, 
                    string Province, 
                    string Municipality, 
                    string Ref_Type, 
                    string Latitude, 
                    string Longitude, 
                    string Encoder, 
                    global::System.Nullable<global::System.DateTime> Date_Last_Updated, 
                    string Validation_Status, 
                    string Validated_By, 
                    global::System.Nullable<global::System.DateTime> Validation_Date, 
                    string Original_Project_No, 
                    string Original_Region, 
                    string Original_Province, 
                    string Original_Municipality, 
                    string Original_Ref_Type, 
                    string Original_Latitude, 
                    string Original_Longitude, 
                    string Original_Encoder, 
                    global::System.Nullable<global::System.DateTime> Original_Date_Last_Updated, 
                    string Original_Validation_Status, 
                    string Original_Validated_By, 
                    global::System.Nullable<global::System.DateTime> Original_Validation_Date) {
            return this.Update(Original_Project_No, Region, Province, Municipality, Ref_Type, Latitude, Longitude, Encoder, Date_Last_Updated, Validation_Status, Validated_By, Validation_Date, Original_Project_No, Original_Region, Original_Province, Original_Municipality, Original_Ref_Type, Original_Latitude, Original_Longitude, Original_Encoder, Original_Date_Last_Updated, Original_Validation_Status, Original_Validated_By, Original_Validation_Date);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PsgcTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PsgcTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Psgc";
            tableMapping.ColumnMappings.Add("PSGC", "PSGC");
            tableMapping.ColumnMappings.Add("GEOG_NM", "GEOG_NM");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Psgc] WHERE (([PSGC] = @Original_PSGC) AND ((@IsNull_GEOG_NM =" +
                " 1 AND [GEOG_NM] IS NULL) OR ([GEOG_NM] = @Original_GEOG_NM)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PSGC", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PSGC", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_GEOG_NM", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GEOG_NM", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GEOG_NM", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GEOG_NM", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Psgc] ([PSGC], [GEOG_NM]) VALUES (@PSGC, @GEOG_NM);\r\nSELECT PS" +
                "GC, GEOG_NM FROM Psgc WHERE (PSGC = @PSGC)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PSGC", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PSGC", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GEOG_NM", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GEOG_NM", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Psgc] SET [PSGC] = @PSGC, [GEOG_NM] = @GEOG_NM WHERE (([PSGC] = @Or" +
                "iginal_PSGC) AND ((@IsNull_GEOG_NM = 1 AND [GEOG_NM] IS NULL) OR ([GEOG_NM] = @O" +
                "riginal_GEOG_NM)));\r\nSELECT PSGC, GEOG_NM FROM Psgc WHERE (PSGC = @PSGC)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PSGC", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PSGC", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GEOG_NM", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GEOG_NM", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PSGC", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PSGC", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_GEOG_NM", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GEOG_NM", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GEOG_NM", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GEOG_NM", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LSDMS.Properties.Settings.Default.lsdmsConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[5];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        psgc_cd AS PSGC, name AS GEOG_NM\r\nFROM            psgc";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT      SUBSTRING(@provincePsgc, 1, 6) + 'XXX' AS PSGC, '<Unknown>' AS GEOG_NM
UNION ALL
SELECT      psgc_cd AS PSGC, name AS GEOG_NM
FROM          psgc
WHERE      (psgc_cd LIKE SUBSTRING(@provincePsgc, 1, 6) + '%') AND (NOT (psgc_cd = SUBSTRING(@provincePsgc, 1, 6) + '000'))";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@provincePsgc", global::System.Data.SqlDbType.VarChar, 1024, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = @"SELECT      SUBSTRING(@provincePsgc, 1, 4) + 'XX000' AS PSGC, '<Unknown>' AS GEOG_NM
UNION ALL
SELECT      psgc_cd AS PSGC, name AS GEOG_NM
FROM          psgc
WHERE      (psgc_cd LIKE SUBSTRING(@provincePsgc, 1, 4) + '%000') AND (NOT (psgc_cd = SUBSTRING(@provincePsgc, 1, 4) + '00000'))";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@provincePsgc", global::System.Data.SqlDbType.VarChar, 1024, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "SELECT        psgc_cd AS PSGC, name AS GEOG_NM\r\nFROM            psgc\r\nWHERE      " +
                "  (psgc_cd LIKE SUBSTRING(@regionPsgc, 1, 2) + \'%00000\') AND (NOT (psgc_cd = SUB" +
                "STRING(@regionPsgc, 1, 2) + \'0000000\'))";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@regionPsgc", global::System.Data.SqlDbType.NChar, 9, global::System.Data.ParameterDirection.Input, 0, 0, "PSGC", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "SELECT        psgc_cd AS PSGC, name AS GEOG_NM\r\nFROM            psgc\r\nWHERE      " +
                "  (SUBSTRING(psgc_cd, 3, 2) = \'00\')";
            this._commandCollection[4].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(lsdmsDataSet.PsgcDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual lsdmsDataSet.PsgcDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            lsdmsDataSet.PsgcDataTable dataTable = new lsdmsDataSet.PsgcDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillWithBarangay(lsdmsDataSet.PsgcDataTable dataTable, string provincePsgc) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((provincePsgc == null)) {
                throw new global::System.ArgumentNullException("provincePsgc");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(provincePsgc));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual lsdmsDataSet.PsgcDataTable GetBarangay(string provincePsgc) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((provincePsgc == null)) {
                throw new global::System.ArgumentNullException("provincePsgc");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(provincePsgc));
            }
            lsdmsDataSet.PsgcDataTable dataTable = new lsdmsDataSet.PsgcDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillWithMunicipality(lsdmsDataSet.PsgcDataTable dataTable, string provincePsgc) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((provincePsgc == null)) {
                throw new global::System.ArgumentNullException("provincePsgc");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(provincePsgc));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual lsdmsDataSet.PsgcDataTable GetMunicipality(string provincePsgc) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((provincePsgc == null)) {
                throw new global::System.ArgumentNullException("provincePsgc");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(provincePsgc));
            }
            lsdmsDataSet.PsgcDataTable dataTable = new lsdmsDataSet.PsgcDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillWithProvince(lsdmsDataSet.PsgcDataTable dataTable, string regionPsgc) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((regionPsgc == null)) {
                throw new global::System.ArgumentNullException("regionPsgc");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(regionPsgc));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual lsdmsDataSet.PsgcDataTable GetProvince(string regionPsgc) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((regionPsgc == null)) {
                throw new global::System.ArgumentNullException("regionPsgc");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(regionPsgc));
            }
            lsdmsDataSet.PsgcDataTable dataTable = new lsdmsDataSet.PsgcDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillWithRegion(lsdmsDataSet.PsgcDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual lsdmsDataSet.PsgcDataTable GetRegion() {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            lsdmsDataSet.PsgcDataTable dataTable = new lsdmsDataSet.PsgcDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(lsdmsDataSet.PsgcDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(lsdmsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Psgc");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_PSGC, string Original_GEOG_NM) {
            if ((Original_PSGC == null)) {
                throw new global::System.ArgumentNullException("Original_PSGC");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_PSGC));
            }
            if ((Original_GEOG_NM == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_GEOG_NM));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string PSGC, string GEOG_NM) {
            if ((PSGC == null)) {
                throw new global::System.ArgumentNullException("PSGC");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(PSGC));
            }
            if ((GEOG_NM == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(GEOG_NM));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string PSGC, string GEOG_NM, string Original_PSGC, string Original_GEOG_NM) {
            if ((PSGC == null)) {
                throw new global::System.ArgumentNullException("PSGC");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(PSGC));
            }
            if ((GEOG_NM == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(GEOG_NM));
            }
            if ((Original_PSGC == null)) {
                throw new global::System.ArgumentNullException("Original_PSGC");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_PSGC));
            }
            if ((Original_GEOG_NM == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_GEOG_NM));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string GEOG_NM, string Original_PSGC, string Original_GEOG_NM) {
            return this.Update(Original_PSGC, GEOG_NM, Original_PSGC, Original_GEOG_NM);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Ref_Type_TableTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Ref_Type_TableTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Ref_Type_Table";
            tableMapping.ColumnMappings.Add("Ref_Type", "Ref_Type");
            tableMapping.ColumnMappings.Add("Ref_Type_No", "Ref_Type_No");
            tableMapping.ColumnMappings.Add("Project_No", "Project_No");
            tableMapping.ColumnMappings.Add("False_Northing", "False_Northing");
            tableMapping.ColumnMappings.Add("False_Easting", "False_Easting");
            tableMapping.ColumnMappings.Add("True_Northing", "True_Northing");
            tableMapping.ColumnMappings.Add("True_Easting", "True_Easting");
            tableMapping.ColumnMappings.Add("Latitude", "Latitude");
            tableMapping.ColumnMappings.Add("Longitude", "Longitude");
            tableMapping.ColumnMappings.Add("PRSLong", "PRSLong");
            tableMapping.ColumnMappings.Add("PRSLat", "PRSLat");
            tableMapping.ColumnMappings.Add("PRSEllipsoidalHt", "PRSEllipsoidalHt");
            tableMapping.ColumnMappings.Add("WGSLong", "WGSLong");
            tableMapping.ColumnMappings.Add("WGSLat", "WGSLat");
            tableMapping.ColumnMappings.Add("WGSEllipsoidalHt", "WGSEllipsoidalHt");
            tableMapping.ColumnMappings.Add("Sketch", "Sketch");
            tableMapping.ColumnMappings.Add("Description", "Description");
            tableMapping.ColumnMappings.Add("Remarks", "Remarks");
            tableMapping.ColumnMappings.Add("ReferencePoint", "ReferencePoint");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [ref_type_table] ([Ref_Type], [Ref_Type_No], [Project_No], [False_Northing], [False_Easting], [True_Northing], [True_Easting], [Latitude], [Longitude], [PRSLong], [PRSLat], [PRSEllipsoidalHt], [WGSLong], [WGSLat], [WGSEllipsoidalHt], [Sketch], [Description], [Remarks]) VALUES (@Ref_Type, @Ref_Type_No, @Project_No, @False_Northing, @False_Easting, @True_Northing, @True_Easting, @Latitude, @Longitude, @PRSLong, @PRSLat, @PRSEllipsoidalHt, @WGSLong, @WGSLat, @WGSEllipsoidalHt, @Sketch, @Description, @Remarks)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Ref_Type", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ref_Type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Ref_Type_No", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ref_Type_No", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Project_No", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Project_No", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@False_Northing", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "False_Northing", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@False_Easting", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "False_Easting", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@True_Northing", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "True_Northing", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@True_Easting", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "True_Easting", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Latitude", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Latitude", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Longitude", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Longitude", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PRSLong", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PRSLong", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PRSLat", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PRSLat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PRSEllipsoidalHt", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PRSEllipsoidalHt", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WGSLong", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WGSLong", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WGSLat", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WGSLat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WGSEllipsoidalHt", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WGSEllipsoidalHt", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Sketch", global::System.Data.SqlDbType.Image, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sketch", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Description", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Remarks", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remarks", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LSDMS.Properties.Settings.Default.lsdmsConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT Ref_Type + ' ' + CAST(Ref_Type_No AS varchar(10)) AS ReferencePoint, Ref_Type, Ref_Type_No, Project_No, False_Northing, False_Easting, True_Northing, True_Easting, Latitude, Longitude, PRSLong, PRSLat, PRSEllipsoidalHt, WGSLong, WGSLat, WGSEllipsoidalHt, Sketch, Description, Remarks FROM ref_type_table";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT      NULL AS ReferencePoint, NULL AS Ref_Type_No, NULL AS Ref_Type
UNION ALL
SELECT      Ref_Type + ' ' + ISNULL(CAST(Ref_Type_No AS varchar(10)),'') AS ReferencePoint, Ref_Type_No, Ref_Type
FROM          ref_type_table
WHERE      (Project_No = @ProjectNo)
ORDER BY Ref_Type, Ref_Type_No";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProjectNo", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(lsdmsDataSet.Ref_Type_TableDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual lsdmsDataSet.Ref_Type_TableDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            lsdmsDataSet.Ref_Type_TableDataTable dataTable = new lsdmsDataSet.Ref_Type_TableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByProjectNo(lsdmsDataSet.Ref_Type_TableDataTable dataTable, string ProjectNo) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((ProjectNo == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(ProjectNo));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual lsdmsDataSet.Ref_Type_TableDataTable GetDataByProjectNo(string ProjectNo) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((ProjectNo == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(ProjectNo));
            }
            lsdmsDataSet.Ref_Type_TableDataTable dataTable = new lsdmsDataSet.Ref_Type_TableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(lsdmsDataSet.Ref_Type_TableDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(lsdmsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Ref_Type_Table");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string Ref_Type, 
                    string Ref_Type_No, 
                    string Project_No, 
                    global::System.Nullable<double> False_Northing, 
                    global::System.Nullable<double> False_Easting, 
                    global::System.Nullable<double> True_Northing, 
                    global::System.Nullable<double> True_Easting, 
                    string Latitude, 
                    string Longitude, 
                    string PRSLong, 
                    string PRSLat, 
                    global::System.Nullable<double> PRSEllipsoidalHt, 
                    string WGSLong, 
                    string WGSLat, 
                    global::System.Nullable<double> WGSEllipsoidalHt, 
                    byte[] Sketch, 
                    string Description, 
                    string Remarks) {
            if ((Ref_Type == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Ref_Type));
            }
            if ((Ref_Type_No == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Ref_Type_No));
            }
            if ((Project_No == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Project_No));
            }
            if ((False_Northing.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((double)(False_Northing.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((False_Easting.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((double)(False_Easting.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((True_Northing.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((double)(True_Northing.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((True_Easting.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(True_Easting.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Latitude == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Latitude));
            }
            if ((Longitude == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(Longitude));
            }
            if ((PRSLong == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(PRSLong));
            }
            if ((PRSLat == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(PRSLat));
            }
            if ((PRSEllipsoidalHt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((double)(PRSEllipsoidalHt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((WGSLong == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(WGSLong));
            }
            if ((WGSLat == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(WGSLat));
            }
            if ((WGSEllipsoidalHt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((double)(WGSEllipsoidalHt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Sketch == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((byte[])(Sketch));
            }
            if ((Description == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(Description));
            }
            if ((Remarks == null)) {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(Remarks));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SectionTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SectionTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Section";
            tableMapping.ColumnMappings.Add("CadSurveyNo", "CadSurveyNo");
            tableMapping.ColumnMappings.Add("MunicipalityPsgc", "MunicipalityPsgc");
            tableMapping.ColumnMappings.Add("CadCaseNo", "CadCaseNo");
            tableMapping.ColumnMappings.Add("BarangayPsgc", "BarangayPsgc");
            tableMapping.ColumnMappings.Add("SectionId", "SectionId");
            tableMapping.ColumnMappings.Add("Quadrangle", "Quadrangle");
            tableMapping.ColumnMappings.Add("Scale", "Scale");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Section] WHERE (([CadSurveyNo] = @Original_CadSurveyNo) AND ([MunicipalityPsgc] = @Original_MunicipalityPsgc) AND ([CadCaseNo] = @Original_CadCaseNo) AND ([BarangayPsgc] = @Original_BarangayPsgc) AND ([SectionId] = @Original_SectionId) AND ((@IsNull_Quadrangle = 1 AND [Quadrangle] IS NULL) OR ([Quadrangle] = @Original_Quadrangle)) AND ((@IsNull_Scale = 1 AND [Scale] IS NULL) OR ([Scale] = @Original_Scale)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CadSurveyNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MunicipalityPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MunicipalityPsgc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CadCaseNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadCaseNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BarangayPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BarangayPsgc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SectionId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SectionId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Quadrangle", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Quadrangle", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Quadrangle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Quadrangle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Scale", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Scale", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Scale", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Scale", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Section] ([CadSurveyNo], [MunicipalityPsgc], [CadCaseNo], [BarangayPsgc], [SectionId], [Quadrangle], [Scale]) VALUES (@CadSurveyNo, @MunicipalityPsgc, @CadCaseNo, @BarangayPsgc, @SectionId, @Quadrangle, @Scale);
SELECT CadSurveyNo, MunicipalityPsgc, CadCaseNo, BarangayPsgc, SectionId, Quadrangle, Scale FROM Section WHERE (BarangayPsgc = @BarangayPsgc) AND (CadCaseNo = @CadCaseNo) AND (CadSurveyNo = @CadSurveyNo) AND (MunicipalityPsgc = @MunicipalityPsgc) AND (SectionId = @SectionId)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadSurveyNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MunicipalityPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MunicipalityPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadCaseNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadCaseNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BarangayPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BarangayPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SectionId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SectionId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Quadrangle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Quadrangle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Scale", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Scale", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Section] SET [CadSurveyNo] = @CadSurveyNo, [MunicipalityPsgc] = @MunicipalityPsgc, [CadCaseNo] = @CadCaseNo, [BarangayPsgc] = @BarangayPsgc, [SectionId] = @SectionId, [Quadrangle] = @Quadrangle, [Scale] = @Scale WHERE (([CadSurveyNo] = @Original_CadSurveyNo) AND ([MunicipalityPsgc] = @Original_MunicipalityPsgc) AND ([CadCaseNo] = @Original_CadCaseNo) AND ([BarangayPsgc] = @Original_BarangayPsgc) AND ([SectionId] = @Original_SectionId) AND ((@IsNull_Quadrangle = 1 AND [Quadrangle] IS NULL) OR ([Quadrangle] = @Original_Quadrangle)) AND ((@IsNull_Scale = 1 AND [Scale] IS NULL) OR ([Scale] = @Original_Scale)));
SELECT CadSurveyNo, MunicipalityPsgc, CadCaseNo, BarangayPsgc, SectionId, Quadrangle, Scale FROM Section WHERE (BarangayPsgc = @BarangayPsgc) AND (CadCaseNo = @CadCaseNo) AND (CadSurveyNo = @CadSurveyNo) AND (MunicipalityPsgc = @MunicipalityPsgc) AND (SectionId = @SectionId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadSurveyNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MunicipalityPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MunicipalityPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadCaseNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadCaseNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BarangayPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BarangayPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SectionId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SectionId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Quadrangle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Quadrangle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Scale", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Scale", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CadSurveyNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MunicipalityPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MunicipalityPsgc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CadCaseNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadCaseNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BarangayPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BarangayPsgc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SectionId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SectionId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Quadrangle", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Quadrangle", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Quadrangle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Quadrangle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Scale", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Scale", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Scale", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Scale", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LSDMS.Properties.Settings.Default.lsdmsConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CadSurveyNo, MunicipalityPsgc, CadCaseNo, BarangayPsgc, SectionId, Quadran" +
                "gle, Scale FROM dbo.Section";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT      CadSurveyNo, MunicipalityPsgc, CadCaseNo, BarangayPsgc, Quadrangle, SectionId, Scale
FROM          Section
WHERE      (CadSurveyNo = @CadSurveyNo) AND (MunicipalityPsgc = @MunicipalityPsgc) AND (CadCaseNo = @CadCaseNo) AND 
                        (BarangayPsgc = @BarangayPsgc) AND (Quadrangle = @Quadrangle)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadSurveyNo", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MunicipalityPsgc", global::System.Data.SqlDbType.NChar, 9, global::System.Data.ParameterDirection.Input, 0, 0, "MunicipalityPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadCaseNo", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "CadCaseNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BarangayPsgc", global::System.Data.SqlDbType.NChar, 9, global::System.Data.ParameterDirection.Input, 0, 0, "BarangayPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Quadrangle", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "Quadrangle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(lsdmsDataSet.SectionDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual lsdmsDataSet.SectionDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            lsdmsDataSet.SectionDataTable dataTable = new lsdmsDataSet.SectionDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByQuadrangle(lsdmsDataSet.SectionDataTable dataTable, string CadSurveyNo, string MunicipalityPsgc, string CadCaseNo, string BarangayPsgc, string Quadrangle) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((CadSurveyNo == null)) {
                throw new global::System.ArgumentNullException("CadSurveyNo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(CadSurveyNo));
            }
            if ((MunicipalityPsgc == null)) {
                throw new global::System.ArgumentNullException("MunicipalityPsgc");
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(MunicipalityPsgc));
            }
            if ((CadCaseNo == null)) {
                throw new global::System.ArgumentNullException("CadCaseNo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(CadCaseNo));
            }
            if ((BarangayPsgc == null)) {
                throw new global::System.ArgumentNullException("BarangayPsgc");
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(BarangayPsgc));
            }
            if ((Quadrangle == null)) {
                throw new global::System.ArgumentNullException("Quadrangle");
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(Quadrangle));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual lsdmsDataSet.SectionDataTable GetDataByQuadrangle(string CadSurveyNo, string MunicipalityPsgc, string CadCaseNo, string BarangayPsgc, string Quadrangle) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((CadSurveyNo == null)) {
                throw new global::System.ArgumentNullException("CadSurveyNo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(CadSurveyNo));
            }
            if ((MunicipalityPsgc == null)) {
                throw new global::System.ArgumentNullException("MunicipalityPsgc");
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(MunicipalityPsgc));
            }
            if ((CadCaseNo == null)) {
                throw new global::System.ArgumentNullException("CadCaseNo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(CadCaseNo));
            }
            if ((BarangayPsgc == null)) {
                throw new global::System.ArgumentNullException("BarangayPsgc");
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(BarangayPsgc));
            }
            if ((Quadrangle == null)) {
                throw new global::System.ArgumentNullException("Quadrangle");
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(Quadrangle));
            }
            lsdmsDataSet.SectionDataTable dataTable = new lsdmsDataSet.SectionDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(lsdmsDataSet.SectionDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(lsdmsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Section");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_CadSurveyNo, string Original_MunicipalityPsgc, string Original_CadCaseNo, string Original_BarangayPsgc, string Original_SectionId, string Original_Quadrangle, global::System.Nullable<int> Original_Scale) {
            if ((Original_CadSurveyNo == null)) {
                throw new global::System.ArgumentNullException("Original_CadSurveyNo");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_CadSurveyNo));
            }
            if ((Original_MunicipalityPsgc == null)) {
                throw new global::System.ArgumentNullException("Original_MunicipalityPsgc");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_MunicipalityPsgc));
            }
            if ((Original_CadCaseNo == null)) {
                throw new global::System.ArgumentNullException("Original_CadCaseNo");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_CadCaseNo));
            }
            if ((Original_BarangayPsgc == null)) {
                throw new global::System.ArgumentNullException("Original_BarangayPsgc");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_BarangayPsgc));
            }
            if ((Original_SectionId == null)) {
                throw new global::System.ArgumentNullException("Original_SectionId");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_SectionId));
            }
            if ((Original_Quadrangle == null)) {
                throw new global::System.ArgumentNullException("Original_Quadrangle");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_Quadrangle));
            }
            if ((Original_Scale.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_Scale.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string CadSurveyNo, string MunicipalityPsgc, string CadCaseNo, string BarangayPsgc, string SectionId, string Quadrangle, global::System.Nullable<int> Scale) {
            if ((CadSurveyNo == null)) {
                throw new global::System.ArgumentNullException("CadSurveyNo");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(CadSurveyNo));
            }
            if ((MunicipalityPsgc == null)) {
                throw new global::System.ArgumentNullException("MunicipalityPsgc");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(MunicipalityPsgc));
            }
            if ((CadCaseNo == null)) {
                throw new global::System.ArgumentNullException("CadCaseNo");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(CadCaseNo));
            }
            if ((BarangayPsgc == null)) {
                throw new global::System.ArgumentNullException("BarangayPsgc");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(BarangayPsgc));
            }
            if ((SectionId == null)) {
                throw new global::System.ArgumentNullException("SectionId");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(SectionId));
            }
            if ((Quadrangle == null)) {
                throw new global::System.ArgumentNullException("Quadrangle");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Quadrangle));
            }
            if ((Scale.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(Scale.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string CadSurveyNo, string MunicipalityPsgc, string CadCaseNo, string BarangayPsgc, string SectionId, string Quadrangle, global::System.Nullable<int> Scale, string Original_CadSurveyNo, string Original_MunicipalityPsgc, string Original_CadCaseNo, string Original_BarangayPsgc, string Original_SectionId, string Original_Quadrangle, global::System.Nullable<int> Original_Scale) {
            if ((CadSurveyNo == null)) {
                throw new global::System.ArgumentNullException("CadSurveyNo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(CadSurveyNo));
            }
            if ((MunicipalityPsgc == null)) {
                throw new global::System.ArgumentNullException("MunicipalityPsgc");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(MunicipalityPsgc));
            }
            if ((CadCaseNo == null)) {
                throw new global::System.ArgumentNullException("CadCaseNo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(CadCaseNo));
            }
            if ((BarangayPsgc == null)) {
                throw new global::System.ArgumentNullException("BarangayPsgc");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(BarangayPsgc));
            }
            if ((SectionId == null)) {
                throw new global::System.ArgumentNullException("SectionId");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(SectionId));
            }
            if ((Quadrangle == null)) {
                throw new global::System.ArgumentNullException("Quadrangle");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Quadrangle));
            }
            if ((Scale.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Scale.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_CadSurveyNo == null)) {
                throw new global::System.ArgumentNullException("Original_CadSurveyNo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_CadSurveyNo));
            }
            if ((Original_MunicipalityPsgc == null)) {
                throw new global::System.ArgumentNullException("Original_MunicipalityPsgc");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_MunicipalityPsgc));
            }
            if ((Original_CadCaseNo == null)) {
                throw new global::System.ArgumentNullException("Original_CadCaseNo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_CadCaseNo));
            }
            if ((Original_BarangayPsgc == null)) {
                throw new global::System.ArgumentNullException("Original_BarangayPsgc");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_BarangayPsgc));
            }
            if ((Original_SectionId == null)) {
                throw new global::System.ArgumentNullException("Original_SectionId");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_SectionId));
            }
            if ((Original_Quadrangle == null)) {
                throw new global::System.ArgumentNullException("Original_Quadrangle");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_Quadrangle));
            }
            if ((Original_Scale.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_Scale.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<int> Scale, string Original_CadSurveyNo, string Original_MunicipalityPsgc, string Original_CadCaseNo, string Original_BarangayPsgc, string Original_SectionId, string Original_Quadrangle, global::System.Nullable<int> Original_Scale) {
            return this.Update(Original_CadSurveyNo, Original_MunicipalityPsgc, Original_CadCaseNo, Original_BarangayPsgc, Original_SectionId, Original_Quadrangle, Scale, Original_CadSurveyNo, Original_MunicipalityPsgc, Original_CadCaseNo, Original_BarangayPsgc, Original_SectionId, Original_Quadrangle, Original_Scale);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TechDescTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TechDescTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TechDesc";
            tableMapping.ColumnMappings.Add("CadSurveyNo", "CadSurveyNo");
            tableMapping.ColumnMappings.Add("MunicipalityPsgc", "MunicipalityPsgc");
            tableMapping.ColumnMappings.Add("CadCaseNo", "CadCaseNo");
            tableMapping.ColumnMappings.Add("BarangayPsgc", "BarangayPsgc");
            tableMapping.ColumnMappings.Add("SectionId", "SectionId");
            tableMapping.ColumnMappings.Add("LotNo", "LotNo");
            tableMapping.ColumnMappings.Add("FromCorner", "FromCorner");
            tableMapping.ColumnMappings.Add("Quadrangle", "Quadrangle");
            tableMapping.ColumnMappings.Add("ToCorner", "ToCorner");
            tableMapping.ColumnMappings.Add("Distance", "Distance");
            tableMapping.ColumnMappings.Add("NS", "NS");
            tableMapping.ColumnMappings.Add("Degree", "Degree");
            tableMapping.ColumnMappings.Add("Minute", "Minute");
            tableMapping.ColumnMappings.Add("EW", "EW");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [TechDesc] WHERE (([CadSurveyNo] = @Original_CadSurveyNo) AND ([MunicipalityPsgc] = @Original_MunicipalityPsgc) AND ([CadCaseNo] = @Original_CadCaseNo) AND ([BarangayPsgc] = @Original_BarangayPsgc) AND ([Quadrangle] = @Original_Quadrangle) AND ([SectionId] = @Original_SectionId) AND ([LotNo] = @Original_LotNo) AND ([FromCorner] = @Original_FromCorner) AND ((@IsNull_ToCorner = 1 AND [ToCorner] IS NULL) OR ([ToCorner] = @Original_ToCorner)) AND ((@IsNull_Distance = 1 AND [Distance] IS NULL) OR ([Distance] = @Original_Distance)) AND ((@IsNull_NS = 1 AND [NS] IS NULL) OR ([NS] = @Original_NS)) AND ((@IsNull_Degree = 1 AND [Degree] IS NULL) OR ([Degree] = @Original_Degree)) AND ((@IsNull_Minute = 1 AND [Minute] IS NULL) OR ([Minute] = @Original_Minute)) AND ((@IsNull_EW = 1 AND [EW] IS NULL) OR ([EW] = @Original_EW)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CadSurveyNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MunicipalityPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MunicipalityPsgc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CadCaseNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadCaseNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BarangayPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BarangayPsgc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Quadrangle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Quadrangle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SectionId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SectionId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LotNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LotNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FromCorner", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FromCorner", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ToCorner", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToCorner", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ToCorner", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToCorner", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Distance", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Distance", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Distance", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 4, "Distance", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_NS", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NS", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NS", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NS", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Degree", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Degree", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Degree", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Degree", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Minute", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Minute", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Minute", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Minute", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_EW", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EW", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EW", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EW", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [TechDesc] ([CadSurveyNo], [MunicipalityPsgc], [CadCaseNo], [BarangayPsgc], [Quadrangle], [SectionId], [LotNo], [FromCorner], [ToCorner], [Distance], [NS], [Degree], [Minute], [EW]) VALUES (@CadSurveyNo, @MunicipalityPsgc, @CadCaseNo, @BarangayPsgc, @Quadrangle, @SectionId, @LotNo, @FromCorner, @ToCorner, @Distance, @NS, @Degree, @Minute, @EW);
SELECT CadSurveyNo, MunicipalityPsgc, CadCaseNo, BarangayPsgc, Quadrangle, SectionId, LotNo, FromCorner, ToCorner, Distance, NS, Degree, Minute, EW FROM TechDesc WHERE (BarangayPsgc = @BarangayPsgc) AND (CadCaseNo = @CadCaseNo) AND (CadSurveyNo = @CadSurveyNo) AND (FromCorner = @FromCorner) AND (LotNo = @LotNo) AND (MunicipalityPsgc = @MunicipalityPsgc) AND (Quadrangle = @Quadrangle) AND (SectionId = @SectionId)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadSurveyNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MunicipalityPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MunicipalityPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadCaseNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadCaseNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BarangayPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BarangayPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Quadrangle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Quadrangle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SectionId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SectionId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LotNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LotNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FromCorner", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FromCorner", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ToCorner", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToCorner", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Distance", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 4, "Distance", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NS", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Degree", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Degree", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Minute", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Minute", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EW", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EW", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [TechDesc] SET [CadSurveyNo] = @CadSurveyNo, [MunicipalityPsgc] = @Municip" +
                "alityPsgc, [CadCaseNo] = @CadCaseNo, [BarangayPsgc] = @BarangayPsgc, [Quadrangle" +
                "] = @Quadrangle, [SectionId] = @SectionId, [LotNo] = @LotNo, [FromCorner] = @Fro" +
                "mCorner, [ToCorner] = @ToCorner, [Distance] = @Distance, [NS] = @NS, [Degree] = " +
                "@Degree, [Minute] = @Minute, [EW] = @EW WHERE (([CadSurveyNo] = @Original_CadSur" +
                "veyNo) AND ([MunicipalityPsgc] = @Original_MunicipalityPsgc) AND ([CadCaseNo] = " +
                "@Original_CadCaseNo) AND ([BarangayPsgc] = @Original_BarangayPsgc) AND ([Quadran" +
                "gle] = @Original_Quadrangle) AND ([SectionId] = @Original_SectionId) AND ([LotNo" +
                "] = @Original_LotNo) AND ([FromCorner] = @Original_FromCorner) AND ((@IsNull_ToC" +
                "orner = 1 AND [ToCorner] IS NULL) OR ([ToCorner] = @Original_ToCorner)) AND ((@I" +
                "sNull_Distance = 1 AND [Distance] IS NULL) OR ([Distance] = @Original_Distance))" +
                " AND ((@IsNull_NS = 1 AND [NS] IS NULL) OR ([NS] = @Original_NS)) AND ((@IsNull_" +
                "Degree = 1 AND [Degree] IS NULL) OR ([Degree] = @Original_Degree)) AND ((@IsNull" +
                "_Minute = 1 AND [Minute] IS NULL) OR ([Minute] = @Original_Minute)) AND ((@IsNul" +
                "l_EW = 1 AND [EW] IS NULL) OR ([EW] = @Original_EW)));\r\nSELECT CadSurveyNo, Muni" +
                "cipalityPsgc, CadCaseNo, BarangayPsgc, Quadrangle, SectionId, LotNo, FromCorner," +
                " ToCorner, Distance, NS, Degree, Minute, EW FROM TechDesc WHERE (BarangayPsgc = " +
                "@BarangayPsgc) AND (CadCaseNo = @CadCaseNo) AND (CadSurveyNo = @CadSurveyNo) AND" +
                " (FromCorner = @FromCorner) AND (LotNo = @LotNo) AND (MunicipalityPsgc = @Munici" +
                "palityPsgc) AND (Quadrangle = @Quadrangle) AND (SectionId = @SectionId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadSurveyNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MunicipalityPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MunicipalityPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadCaseNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadCaseNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BarangayPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BarangayPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Quadrangle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Quadrangle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SectionId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SectionId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LotNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LotNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FromCorner", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FromCorner", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ToCorner", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToCorner", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Distance", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 4, "Distance", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NS", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Degree", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Degree", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Minute", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Minute", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EW", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EW", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CadSurveyNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MunicipalityPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MunicipalityPsgc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CadCaseNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadCaseNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BarangayPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BarangayPsgc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Quadrangle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Quadrangle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SectionId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SectionId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LotNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LotNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FromCorner", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FromCorner", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ToCorner", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToCorner", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ToCorner", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToCorner", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Distance", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Distance", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Distance", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 4, "Distance", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_NS", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NS", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NS", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NS", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Degree", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Degree", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Degree", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Degree", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Minute", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Minute", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Minute", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Minute", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_EW", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EW", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EW", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EW", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LSDMS.Properties.Settings.Default.lsdmsConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT      TechDesc.*\r\nFROM          TechDesc";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT BarangayPsgc, CadCaseNo, CadSurveyNo, Degree, Distance, EW, FromCorner, LotNo, Minute, MunicipalityPsgc, NS, Quadrangle, SectionId, ToCorner FROM TechDesc WHERE (CadSurveyNo = @CadSurveyNo) AND (MunicipalityPsgc = @MunicipalityPsgc) AND (CadCaseNo = @CadCaseNo) AND (BarangayPsgc = @BarangayPsgc) AND (SectionId = @SectionId) AND (LotNo = @LotNo) AND (Quadrangle = @Quadrangle)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadSurveyNo", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MunicipalityPsgc", global::System.Data.SqlDbType.NChar, 9, global::System.Data.ParameterDirection.Input, 0, 0, "MunicipalityPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadCaseNo", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "CadCaseNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BarangayPsgc", global::System.Data.SqlDbType.NChar, 9, global::System.Data.ParameterDirection.Input, 0, 0, "BarangayPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Quadrangle", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "Quadrangle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SectionId", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "SectionId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LotNo", global::System.Data.SqlDbType.VarChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "LotNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(lsdmsDataSet.TechDescDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual lsdmsDataSet.TechDescDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            lsdmsDataSet.TechDescDataTable dataTable = new lsdmsDataSet.TechDescDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByLot(lsdmsDataSet.TechDescDataTable dataTable, string CadSurveyNo, string MunicipalityPsgc, string CadCaseNo, string BarangayPsgc, string Quadrangle, string SectionId, string LotNo) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((CadSurveyNo == null)) {
                throw new global::System.ArgumentNullException("CadSurveyNo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(CadSurveyNo));
            }
            if ((MunicipalityPsgc == null)) {
                throw new global::System.ArgumentNullException("MunicipalityPsgc");
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(MunicipalityPsgc));
            }
            if ((CadCaseNo == null)) {
                throw new global::System.ArgumentNullException("CadCaseNo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(CadCaseNo));
            }
            if ((BarangayPsgc == null)) {
                throw new global::System.ArgumentNullException("BarangayPsgc");
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(BarangayPsgc));
            }
            if ((Quadrangle == null)) {
                throw new global::System.ArgumentNullException("Quadrangle");
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(Quadrangle));
            }
            if ((SectionId == null)) {
                throw new global::System.ArgumentNullException("SectionId");
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(SectionId));
            }
            if ((LotNo == null)) {
                throw new global::System.ArgumentNullException("LotNo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = ((string)(LotNo));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual lsdmsDataSet.TechDescDataTable GetDataByLot(string CadSurveyNo, string MunicipalityPsgc, string CadCaseNo, string BarangayPsgc, string Quadrangle, string SectionId, string LotNo) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((CadSurveyNo == null)) {
                throw new global::System.ArgumentNullException("CadSurveyNo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(CadSurveyNo));
            }
            if ((MunicipalityPsgc == null)) {
                throw new global::System.ArgumentNullException("MunicipalityPsgc");
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(MunicipalityPsgc));
            }
            if ((CadCaseNo == null)) {
                throw new global::System.ArgumentNullException("CadCaseNo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(CadCaseNo));
            }
            if ((BarangayPsgc == null)) {
                throw new global::System.ArgumentNullException("BarangayPsgc");
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(BarangayPsgc));
            }
            if ((Quadrangle == null)) {
                throw new global::System.ArgumentNullException("Quadrangle");
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(Quadrangle));
            }
            if ((SectionId == null)) {
                throw new global::System.ArgumentNullException("SectionId");
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(SectionId));
            }
            if ((LotNo == null)) {
                throw new global::System.ArgumentNullException("LotNo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = ((string)(LotNo));
            }
            lsdmsDataSet.TechDescDataTable dataTable = new lsdmsDataSet.TechDescDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(lsdmsDataSet.TechDescDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(lsdmsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TechDesc");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class UsersTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UsersTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Users";
            tableMapping.ColumnMappings.Add("Username", "Username");
            tableMapping.ColumnMappings.Add("Password", "Password");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Users] WHERE (([Username] = @Original_Username) AND ((@IsNull_" +
                "Password = 1 AND [Password] IS NULL) OR ([Password] = @Original_Password)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Username", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Username", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Password", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Password", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Password", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Password", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Users] ([Username], [Password]) VALUES (@Username, @Password);" +
                "\r\nSELECT Username, Password FROM Users WHERE (Username = @Username)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Username", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Username", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Password", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Password", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Users] SET [Username] = @Username, [Password] = @Password WHERE (([Username] = @Original_Username) AND ((@IsNull_Password = 1 AND [Password] IS NULL) OR ([Password] = @Original_Password)));
SELECT Username, Password FROM Users WHERE (Username = @Username)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Username", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Username", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Password", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Password", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Username", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Username", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Password", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Password", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Password", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Password", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LSDMS.Properties.Settings.Default.lsdmsConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Username, Password FROM dbo.Users";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(lsdmsDataSet.UsersDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual lsdmsDataSet.UsersDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            lsdmsDataSet.UsersDataTable dataTable = new lsdmsDataSet.UsersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(lsdmsDataSet.UsersDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(lsdmsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Users");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_Username, string Original_Password) {
            if ((Original_Username == null)) {
                throw new global::System.ArgumentNullException("Original_Username");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_Username));
            }
            if ((Original_Password == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Password));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Username, string Password) {
            if ((Username == null)) {
                throw new global::System.ArgumentNullException("Username");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Username));
            }
            if ((Password == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Password));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Username, string Password, string Original_Username, string Original_Password) {
            if ((Username == null)) {
                throw new global::System.ArgumentNullException("Username");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Username));
            }
            if ((Password == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Password));
            }
            if ((Original_Username == null)) {
                throw new global::System.ArgumentNullException("Original_Username");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_Username));
            }
            if ((Original_Password == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_Password));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Password, string Original_Username, string Original_Password) {
            return this.Update(Original_Username, Password, Original_Username, Original_Password);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class QuadrangleTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public QuadrangleTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Quadrangle";
            tableMapping.ColumnMappings.Add("CadSurveyNo", "CadSurveyNo");
            tableMapping.ColumnMappings.Add("MunicipalityPsgc", "MunicipalityPsgc");
            tableMapping.ColumnMappings.Add("CadCaseNo", "CadCaseNo");
            tableMapping.ColumnMappings.Add("BarangayPsgc", "BarangayPsgc");
            tableMapping.ColumnMappings.Add("Quadrangle", "Quadrangle");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [Quadrangle] WHERE (([CadSurveyNo] = @Original_CadSurveyNo) AND ([Mun" +
                "icipalityPsgc] = @Original_MunicipalityPsgc) AND ([CadCaseNo] = @Original_CadCas" +
                "eNo) AND ([BarangayPsgc] = @Original_BarangayPsgc) AND ([Quadrangle] = @Original" +
                "_Quadrangle))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CadSurveyNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MunicipalityPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MunicipalityPsgc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CadCaseNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadCaseNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BarangayPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BarangayPsgc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Quadrangle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Quadrangle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [Quadrangle] ([CadSurveyNo], [MunicipalityPsgc], [CadCaseNo], [BarangayPsgc], [Quadrangle]) VALUES (@CadSurveyNo, @MunicipalityPsgc, @CadCaseNo, @BarangayPsgc, @Quadrangle);
SELECT CadSurveyNo, MunicipalityPsgc, CadCaseNo, BarangayPsgc, Quadrangle FROM Quadrangle WHERE (BarangayPsgc = @BarangayPsgc) AND (CadCaseNo = @CadCaseNo) AND (CadSurveyNo = @CadSurveyNo) AND (MunicipalityPsgc = @MunicipalityPsgc) AND (Quadrangle = @Quadrangle)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadSurveyNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MunicipalityPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MunicipalityPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadCaseNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadCaseNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BarangayPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BarangayPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Quadrangle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Quadrangle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [Quadrangle] SET [CadSurveyNo] = @CadSurveyNo, [MunicipalityPsgc] = @MunicipalityPsgc, [CadCaseNo] = @CadCaseNo, [BarangayPsgc] = @BarangayPsgc, [Quadrangle] = @Quadrangle WHERE (([CadSurveyNo] = @Original_CadSurveyNo) AND ([MunicipalityPsgc] = @Original_MunicipalityPsgc) AND ([CadCaseNo] = @Original_CadCaseNo) AND ([BarangayPsgc] = @Original_BarangayPsgc) AND ([Quadrangle] = @Original_Quadrangle));
SELECT CadSurveyNo, MunicipalityPsgc, CadCaseNo, BarangayPsgc, Quadrangle FROM Quadrangle WHERE (BarangayPsgc = @BarangayPsgc) AND (CadCaseNo = @CadCaseNo) AND (CadSurveyNo = @CadSurveyNo) AND (MunicipalityPsgc = @MunicipalityPsgc) AND (Quadrangle = @Quadrangle)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadSurveyNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MunicipalityPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MunicipalityPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadCaseNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadCaseNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BarangayPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BarangayPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Quadrangle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Quadrangle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CadSurveyNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MunicipalityPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MunicipalityPsgc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CadCaseNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CadCaseNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BarangayPsgc", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BarangayPsgc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Quadrangle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Quadrangle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LSDMS.Properties.Settings.Default.lsdmsConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT      Quadrangle.*\r\nFROM          Quadrangle";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT      Quadrangle.*\r\nFROM          Quadrangle\r\nWHERE      (Quadrangle.CadSur" +
                "veyNo = @CadSurveyNo) AND (Quadrangle.MunicipalityPsgc = @MunicipalityPsgc) AND " +
                "(Quadrangle.CadCaseNo = @CadCaseNo) AND (Quadrangle.BarangayPsgc = @BarangayPsgc" +
                ")";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadSurveyNo", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "CadSurveyNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MunicipalityPsgc", global::System.Data.SqlDbType.NChar, 9, global::System.Data.ParameterDirection.Input, 0, 0, "MunicipalityPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CadCaseNo", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "CadCaseNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BarangayPsgc", global::System.Data.SqlDbType.NChar, 9, global::System.Data.ParameterDirection.Input, 0, 0, "BarangayPsgc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(lsdmsDataSet.QuadrangleDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual lsdmsDataSet.QuadrangleDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            lsdmsDataSet.QuadrangleDataTable dataTable = new lsdmsDataSet.QuadrangleDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByBarangay(lsdmsDataSet.QuadrangleDataTable dataTable, string CadSurveyNo, string MunicipalityPsgc, string CadCaseNo, string BarangayPsgc) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((CadSurveyNo == null)) {
                throw new global::System.ArgumentNullException("CadSurveyNo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(CadSurveyNo));
            }
            if ((MunicipalityPsgc == null)) {
                throw new global::System.ArgumentNullException("MunicipalityPsgc");
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(MunicipalityPsgc));
            }
            if ((CadCaseNo == null)) {
                throw new global::System.ArgumentNullException("CadCaseNo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(CadCaseNo));
            }
            if ((BarangayPsgc == null)) {
                throw new global::System.ArgumentNullException("BarangayPsgc");
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(BarangayPsgc));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual lsdmsDataSet.QuadrangleDataTable GetDataByBarangay(string CadSurveyNo, string MunicipalityPsgc, string CadCaseNo, string BarangayPsgc) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((CadSurveyNo == null)) {
                throw new global::System.ArgumentNullException("CadSurveyNo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(CadSurveyNo));
            }
            if ((MunicipalityPsgc == null)) {
                throw new global::System.ArgumentNullException("MunicipalityPsgc");
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(MunicipalityPsgc));
            }
            if ((CadCaseNo == null)) {
                throw new global::System.ArgumentNullException("CadCaseNo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(CadCaseNo));
            }
            if ((BarangayPsgc == null)) {
                throw new global::System.ArgumentNullException("BarangayPsgc");
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(BarangayPsgc));
            }
            lsdmsDataSet.QuadrangleDataTable dataTable = new lsdmsDataSet.QuadrangleDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(lsdmsDataSet.QuadrangleDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(lsdmsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Quadrangle");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_CadSurveyNo, string Original_MunicipalityPsgc, string Original_CadCaseNo, string Original_BarangayPsgc, string Original_Quadrangle) {
            if ((Original_CadSurveyNo == null)) {
                throw new global::System.ArgumentNullException("Original_CadSurveyNo");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_CadSurveyNo));
            }
            if ((Original_MunicipalityPsgc == null)) {
                throw new global::System.ArgumentNullException("Original_MunicipalityPsgc");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_MunicipalityPsgc));
            }
            if ((Original_CadCaseNo == null)) {
                throw new global::System.ArgumentNullException("Original_CadCaseNo");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_CadCaseNo));
            }
            if ((Original_BarangayPsgc == null)) {
                throw new global::System.ArgumentNullException("Original_BarangayPsgc");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_BarangayPsgc));
            }
            if ((Original_Quadrangle == null)) {
                throw new global::System.ArgumentNullException("Original_Quadrangle");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_Quadrangle));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string CadSurveyNo, string MunicipalityPsgc, string CadCaseNo, string BarangayPsgc, string Quadrangle) {
            if ((CadSurveyNo == null)) {
                throw new global::System.ArgumentNullException("CadSurveyNo");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(CadSurveyNo));
            }
            if ((MunicipalityPsgc == null)) {
                throw new global::System.ArgumentNullException("MunicipalityPsgc");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(MunicipalityPsgc));
            }
            if ((CadCaseNo == null)) {
                throw new global::System.ArgumentNullException("CadCaseNo");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(CadCaseNo));
            }
            if ((BarangayPsgc == null)) {
                throw new global::System.ArgumentNullException("BarangayPsgc");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(BarangayPsgc));
            }
            if ((Quadrangle == null)) {
                throw new global::System.ArgumentNullException("Quadrangle");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Quadrangle));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string CadSurveyNo, string MunicipalityPsgc, string CadCaseNo, string BarangayPsgc, string Quadrangle, string Original_CadSurveyNo, string Original_MunicipalityPsgc, string Original_CadCaseNo, string Original_BarangayPsgc, string Original_Quadrangle) {
            if ((CadSurveyNo == null)) {
                throw new global::System.ArgumentNullException("CadSurveyNo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(CadSurveyNo));
            }
            if ((MunicipalityPsgc == null)) {
                throw new global::System.ArgumentNullException("MunicipalityPsgc");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(MunicipalityPsgc));
            }
            if ((CadCaseNo == null)) {
                throw new global::System.ArgumentNullException("CadCaseNo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(CadCaseNo));
            }
            if ((BarangayPsgc == null)) {
                throw new global::System.ArgumentNullException("BarangayPsgc");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(BarangayPsgc));
            }
            if ((Quadrangle == null)) {
                throw new global::System.ArgumentNullException("Quadrangle");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Quadrangle));
            }
            if ((Original_CadSurveyNo == null)) {
                throw new global::System.ArgumentNullException("Original_CadSurveyNo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_CadSurveyNo));
            }
            if ((Original_MunicipalityPsgc == null)) {
                throw new global::System.ArgumentNullException("Original_MunicipalityPsgc");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_MunicipalityPsgc));
            }
            if ((Original_CadCaseNo == null)) {
                throw new global::System.ArgumentNullException("Original_CadCaseNo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_CadCaseNo));
            }
            if ((Original_BarangayPsgc == null)) {
                throw new global::System.ArgumentNullException("Original_BarangayPsgc");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_BarangayPsgc));
            }
            if ((Original_Quadrangle == null)) {
                throw new global::System.ArgumentNullException("Original_Quadrangle");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_Quadrangle));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Original_CadSurveyNo, string Original_MunicipalityPsgc, string Original_CadCaseNo, string Original_BarangayPsgc, string Original_Quadrangle) {
            return this.Update(Original_CadSurveyNo, Original_MunicipalityPsgc, Original_CadCaseNo, Original_BarangayPsgc, Original_Quadrangle, Original_CadSurveyNo, Original_MunicipalityPsgc, Original_CadCaseNo, Original_BarangayPsgc, Original_Quadrangle);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Ref_Type_Table2TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Ref_Type_Table2TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Ref_Type_Table2";
            tableMapping.ColumnMappings.Add("Ref_Type", "Ref_Type");
            tableMapping.ColumnMappings.Add("Ref_Type_No", "Ref_Type_No");
            tableMapping.ColumnMappings.Add("Project_No", "Project_No");
            tableMapping.ColumnMappings.Add("False_Northing", "False_Northing");
            tableMapping.ColumnMappings.Add("False_Easting", "False_Easting");
            tableMapping.ColumnMappings.Add("True_Northing", "True_Northing");
            tableMapping.ColumnMappings.Add("True_Easting", "True_Easting");
            tableMapping.ColumnMappings.Add("PTM_PRS92_Northing", "PTM_PRS92_Northing");
            tableMapping.ColumnMappings.Add("PTM_PRS92_Easting", "PTM_PRS92_Easting");
            tableMapping.ColumnMappings.Add("Latitude", "Latitude");
            tableMapping.ColumnMappings.Add("Longitude", "Longitude");
            tableMapping.ColumnMappings.Add("PRSLong", "PRSLong");
            tableMapping.ColumnMappings.Add("PRSLat", "PRSLat");
            tableMapping.ColumnMappings.Add("PRSEllipsoidalHt", "PRSEllipsoidalHt");
            tableMapping.ColumnMappings.Add("WGSLong", "WGSLong");
            tableMapping.ColumnMappings.Add("WGSLat", "WGSLat");
            tableMapping.ColumnMappings.Add("WGSEllipsoidalHt", "WGSEllipsoidalHt");
            tableMapping.ColumnMappings.Add("Sketch", "Sketch");
            tableMapping.ColumnMappings.Add("Description", "Description");
            tableMapping.ColumnMappings.Add("Remarks", "Remarks");
            tableMapping.ColumnMappings.Add("Status", "Status");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [ref_type_table] ([Ref_Type], [Ref_Type_No], [Project_No], [False_Northing], [False_Easting], [True_Northing], [True_Easting], [PTM_PRS92_Northing], [PTM_PRS92_Easting], [Latitude], [Longitude], [PRSLong], [PRSLat], [PRSEllipsoidalHt], [WGSLong], [WGSLat], [WGSEllipsoidalHt], [Sketch], [Description], [Remarks], [Status]) VALUES (@Ref_Type, @Ref_Type_No, @Project_No, @False_Northing, @False_Easting, @True_Northing, @True_Easting, @PTM_PRS92_Northing, @PTM_PRS92_Easting, @Latitude, @Longitude, @PRSLong, @PRSLat, @PRSEllipsoidalHt, @WGSLong, @WGSLat, @WGSEllipsoidalHt, @Sketch, @Description, @Remarks, @Status)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Ref_Type", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ref_Type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Ref_Type_No", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ref_Type_No", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Project_No", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Project_No", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@False_Northing", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "False_Northing", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@False_Easting", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "False_Easting", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@True_Northing", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "True_Northing", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@True_Easting", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "True_Easting", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PTM_PRS92_Northing", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 5, "PTM_PRS92_Northing", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PTM_PRS92_Easting", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 5, "PTM_PRS92_Easting", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Latitude", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Latitude", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Longitude", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Longitude", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PRSLong", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PRSLong", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PRSLat", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PRSLat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PRSEllipsoidalHt", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PRSEllipsoidalHt", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WGSLong", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WGSLong", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WGSLat", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WGSLat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WGSEllipsoidalHt", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WGSEllipsoidalHt", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Sketch", global::System.Data.SqlDbType.Image, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sketch", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Description", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Remarks", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remarks", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Status", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LSDMS.Properties.Settings.Default.lsdmsConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT      ref_type_table.*\r\nFROM          ref_type_table";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT      NULL AS ReferencePoint, NULL AS Ref_Type_No, NULL AS Ref_Type
UNION ALL
SELECT      Ref_Type + ' ' + ISNULL(CAST(Ref_Type_No AS varchar(10)), '') AS ReferencePoint, Ref_Type_No, Ref_Type
FROM          ref_type_table
WHERE      (Project_No = @ProjectNo)
ORDER BY Ref_Type, Ref_Type_No";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProjectNo", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(lsdmsDataSet.Ref_Type_Table2DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual lsdmsDataSet.Ref_Type_Table2DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            lsdmsDataSet.Ref_Type_Table2DataTable dataTable = new lsdmsDataSet.Ref_Type_Table2DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByProjectNo(lsdmsDataSet.Ref_Type_Table2DataTable dataTable, string ProjectNo) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((ProjectNo == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(ProjectNo));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual lsdmsDataSet.Ref_Type_Table2DataTable GetDataByProjectNo(string ProjectNo) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((ProjectNo == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(ProjectNo));
            }
            lsdmsDataSet.Ref_Type_Table2DataTable dataTable = new lsdmsDataSet.Ref_Type_Table2DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(lsdmsDataSet.Ref_Type_Table2DataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(lsdmsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Ref_Type_Table2");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string Ref_Type, 
                    string Ref_Type_No, 
                    string Project_No, 
                    global::System.Nullable<double> False_Northing, 
                    global::System.Nullable<double> False_Easting, 
                    global::System.Nullable<double> True_Northing, 
                    global::System.Nullable<double> True_Easting, 
                    global::System.Nullable<decimal> PTM_PRS92_Northing, 
                    global::System.Nullable<decimal> PTM_PRS92_Easting, 
                    string Latitude, 
                    string Longitude, 
                    string PRSLong, 
                    string PRSLat, 
                    global::System.Nullable<double> PRSEllipsoidalHt, 
                    string WGSLong, 
                    string WGSLat, 
                    global::System.Nullable<double> WGSEllipsoidalHt, 
                    byte[] Sketch, 
                    string Description, 
                    string Remarks, 
                    string Status) {
            if ((Ref_Type == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Ref_Type));
            }
            if ((Ref_Type_No == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Ref_Type_No));
            }
            if ((Project_No == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Project_No));
            }
            if ((False_Northing.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((double)(False_Northing.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((False_Easting.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((double)(False_Easting.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((True_Northing.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((double)(True_Northing.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((True_Easting.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(True_Easting.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((PTM_PRS92_Northing.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((decimal)(PTM_PRS92_Northing.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((PTM_PRS92_Easting.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(PTM_PRS92_Easting.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Latitude == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(Latitude));
            }
            if ((Longitude == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(Longitude));
            }
            if ((PRSLong == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(PRSLong));
            }
            if ((PRSLat == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(PRSLat));
            }
            if ((PRSEllipsoidalHt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((double)(PRSEllipsoidalHt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((WGSLong == null)) {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(WGSLong));
            }
            if ((WGSLat == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(WGSLat));
            }
            if ((WGSEllipsoidalHt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((double)(WGSEllipsoidalHt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Sketch == null)) {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((byte[])(Sketch));
            }
            if ((Description == null)) {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(Description));
            }
            if ((Remarks == null)) {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((string)(Remarks));
            }
            if ((Status == null)) {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = ((string)(Status));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
}

#pragma warning restore 1591